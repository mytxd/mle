From: Adam Saponara <as@php.net>
Date: Fri, 28 Dec 2018 14:28:27 -0500
Subject: change pointer style

---
 aproc.c                                      |   14 +-
 bline.c                                      |   16 +-
 buffer.c                                     |  362 ++++----
 bview.c                                      |  226 ++---
 cmd.c                                        |  414 ++++-----
 cursor.c                                     |   68 +-
 editor.c                                     |  474 +++++------
 main.c                                       |    2 +-
 mark.c                                       |  206 ++---
 mlbuf.h                                      |  344 ++++----
 mle.h                                        |  598 ++++++-------
 tests/unit/test.h                            |    8 +-
 tests/unit/test_bline_delete.c               |    4 +-
 tests/unit/test_bline_get_col.c              |    4 +-
 tests/unit/test_bline_insert.c               |    4 +-
 tests/unit/test_buffer_add_mark.c            |    6 +-
 tests/unit/test_buffer_add_srule.c           |    8 +-
 tests/unit/test_buffer_delete.c              |    4 +-
 tests/unit/test_buffer_destroy.c             |    4 +-
 tests/unit/test_buffer_get.c                 |    6 +-
 tests/unit/test_buffer_get_bline.c           |    8 +-
 tests/unit/test_buffer_get_bline_col.c       |    6 +-
 tests/unit/test_buffer_get_offset.c          |    4 +-
 tests/unit/test_buffer_insert.c              |    4 +-
 tests/unit/test_buffer_new.c                 |    4 +-
 tests/unit/test_buffer_redo.c                |    6 +-
 tests/unit/test_buffer_register.c            |    6 +-
 tests/unit/test_buffer_remove_srule.c        |    6 +-
 tests/unit/test_buffer_replace.c             |    4 +-
 tests/unit/test_buffer_set.c                 |    4 +-
 tests/unit/test_buffer_set_callback.c        |   10 +-
 tests/unit/test_buffer_set_tab_width.c       |    4 +-
 tests/unit/test_buffer_substr.c              |    4 +-
 tests/unit/test_buffer_undo.c                |    6 +-
 tests/unit/test_mark_clone.c                 |    6 +-
 tests/unit/test_mark_delete_after.c          |    6 +-
 tests/unit/test_mark_delete_before.c         |    6 +-
 tests/unit/test_mark_delete_between_mark.c   |    6 +-
 tests/unit/test_mark_delete_between_mark_2.c |    6 +-
 tests/unit/test_mark_find_bracket_pair.c     |    4 +-
 tests/unit/test_mark_get_between_mark.c      |    8 +-
 tests/unit/test_mark_get_offset.c            |    4 +-
 tests/unit/test_mark_insert_after.c          |    6 +-
 tests/unit/test_mark_insert_before.c         |    6 +-
 tests/unit/test_mark_is_at_word_bound.c      |    4 +-
 tests/unit/test_mark_is_gt.c                 |    6 +-
 tests/unit/test_mark_lettered.c              |   10 +-
 tests/unit/test_mark_move_bol.c              |    4 +-
 tests/unit/test_mark_move_bracket_pair.c     |    4 +-
 tests/unit/test_mark_move_by.c               |    4 +-
 tests/unit/test_mark_move_col.c              |    4 +-
 tests/unit/test_mark_move_eol.c              |    4 +-
 tests/unit/test_mark_move_next_re.c          |    4 +-
 tests/unit/test_mark_move_next_str.c         |    4 +-
 tests/unit/test_mark_move_offset.c           |    4 +-
 tests/unit/test_mark_move_prev_re.c          |    4 +-
 tests/unit/test_mark_move_prev_str.c         |    4 +-
 tests/unit/test_mark_move_to.c               |    4 +-
 tests/unit/test_mark_move_vert.c             |    4 +-
 tests/unit/test_mark_set_pcre_ovector.c      |    6 +-
 tests/unit/test_mark_swap_with_mark.c        |    6 +-
 tests/unit/test_recalloc.c                   |    6 +-
 uscript.c                                    |  152 ++--
 uscript.inc                                  | 1160 +++++++++++++-------------
 uscript.inc.php                              |   43 +-
 util.c                                       |   70 +-
 66 files changed, 2213 insertions(+), 2204 deletions(-)

diff --git a/aproc.c b/aproc.c
index 16210ee..68f1005 100644
--- a/aproc.c
+++ b/aproc.c
@@ -9,8 +9,8 @@
 #include "mle.h"
 
 // Return a new aproc_t
-aproc_t* aproc_new(editor_t* editor, void* owner, aproc_t** owner_aproc, char* shell_cmd, int rw, aproc_cb_t callback) {
-    aproc_t* aproc;
+aproc_t *aproc_new(editor_t *editor, void *owner, aproc_t **owner_aproc, char *shell_cmd, int rw, aproc_cb_t callback) {
+    aproc_t *aproc;
     aproc = calloc(1, sizeof(aproc_t));
     aproc->editor = editor;
     aproc_set_owner(aproc, owner, owner_aproc);
@@ -38,7 +38,7 @@ aproc_new_failure:
 }
 
 // Set aproc owner
-int aproc_set_owner(aproc_t* aproc, void* owner, aproc_t** owner_aproc) {
+int aproc_set_owner(aproc_t *aproc, void *owner, aproc_t **owner_aproc) {
     if (aproc->owner_aproc) {
         *aproc->owner_aproc = NULL;
     }
@@ -49,7 +49,7 @@ int aproc_set_owner(aproc_t* aproc, void* owner, aproc_t** owner_aproc) {
 }
 
 // Destroy an aproc_t
-int aproc_destroy(aproc_t* aproc, int preempt) {
+int aproc_destroy(aproc_t *aproc, int preempt) {
     DL_DELETE(aproc->editor->aprocs, aproc);
     if (aproc->owner_aproc) *aproc->owner_aproc = NULL;
     if (preempt) {
@@ -65,11 +65,11 @@ int aproc_destroy(aproc_t* aproc, int preempt) {
 
 // Manage async procs, giving priority to user input. Return 1 if drain should
 // be called again, else return 0.
-int aproc_drain_all(aproc_t* aprocs, int* ttyfd) {
+int aproc_drain_all(aproc_t *aprocs, int *ttyfd) {
     int maxfd;
     fd_set readfds;
-    aproc_t* aproc;
-    aproc_t* aproc_tmp;
+    aproc_t *aproc;
+    aproc_t *aproc_tmp;
     char buf[1024 + 1];
     ssize_t nbytes;
     int rc;
diff --git a/bline.c b/bline.c
index df6e444..310235b 100644
--- a/bline.c
+++ b/bline.c
@@ -2,7 +2,7 @@
 #include "mlbuf.h"
 
 // Move self/col forward until col fits on current line
-static void _bline_advance_col(bline_t** self, bint_t* col) {
+static void _bline_advance_col(bline_t **self, bint_t *col) {
     while (1) {
         MLBUF_BLINE_ENSURE_CHARS(*self);
         if (*col > (*self)->char_count) {
@@ -20,8 +20,8 @@ static void _bline_advance_col(bline_t** self, bint_t* col) {
 }
 
 // Count multi-byte characters and character widths of this line
-int bline_count_chars(bline_t* bline) {
-    char* c;
+int bline_count_chars(bline_t *bline) {
+    char *c;
     int char_len;
     uint32_t ch;
     int char_w;
@@ -100,25 +100,25 @@ int bline_count_chars(bline_t* bline) {
 }
 
 // Insert data on a line
-int bline_insert(bline_t* self, bint_t col, char* data, bint_t data_len, bint_t* ret_num_chars) {
+int bline_insert(bline_t *self, bint_t col, char *data, bint_t data_len, bint_t *ret_num_chars) {
     _bline_advance_col(&self, &col);
     return buffer_insert_w_bline(self->buffer, self, col, data, data_len, ret_num_chars);
 }
 
 // Delete data from a line
-int bline_delete(bline_t* self, bint_t col, bint_t num_chars) {
+int bline_delete(bline_t *self, bint_t col, bint_t num_chars) {
     _bline_advance_col(&self, &col);
     return buffer_delete_w_bline(self->buffer, self, col, num_chars);
 }
 
 // Replace data on a line
-int bline_replace(bline_t* self, bint_t col, bint_t num_chars, char* data, bint_t data_len) {
+int bline_replace(bline_t *self, bint_t col, bint_t num_chars, char *data, bint_t data_len) {
     _bline_advance_col(&self, &col);
     return buffer_replace_w_bline(self->buffer, self, col, num_chars, data, data_len);
 }
 
 // Return a col given a byte index
-int bline_get_col(bline_t* self, bint_t index, bint_t* ret_col) {
+int bline_get_col(bline_t *self, bint_t index, bint_t *ret_col) {
     bint_t col;
     MLBUF_MAKE_GT_EQ0(index);
     MLBUF_BLINE_ENSURE_CHARS(self);
@@ -143,7 +143,7 @@ int bline_get_col(bline_t* self, bint_t index, bint_t* ret_col) {
 }
 
 // Convert a vcol to a col
-int bline_get_col_from_vcol(bline_t* bline, bint_t vcol, bint_t* ret_col) {
+int bline_get_col_from_vcol(bline_t *bline, bint_t vcol, bint_t *ret_col) {
     bint_t i;
     MLBUF_BLINE_ENSURE_CHARS(bline);
     for (i = 0; i < bline->char_count; i++) {
diff --git a/buffer.c b/buffer.c
index 4601cd3..b4709c6 100644
--- a/buffer.c
+++ b/buffer.c
@@ -11,37 +11,37 @@
 #include <inttypes.h>
 #include "mlbuf.h"
 
-static int _buffer_open_mmap(buffer_t* self, int fd, size_t size);
-static int _buffer_open_read(buffer_t* self, int fd, size_t size);
-static int _buffer_bline_unslab(bline_t* self);
-static void _buffer_stat(buffer_t* self);
-static int _buffer_baction_do(buffer_t* self, bline_t* bline, baction_t* action, int is_redo, bint_t* opt_repeat_offset);
-static int _buffer_update(buffer_t* self, baction_t* action);
-static int _buffer_truncate_undo_stack(buffer_t* self, baction_t* action_from);
-static int _buffer_add_to_undo_stack(buffer_t* self, baction_t* action);
-static int _buffer_apply_styles_singles(bline_t* start_line, bint_t min_nlines);
-static int _buffer_apply_styles_multis(bline_t* start_line, bint_t min_nlines, int srule_type);
-static int _buffer_bline_apply_style_single(srule_t* srule, bline_t* bline);
-static int _buffer_bline_apply_style_multi(srule_t* srule, bline_t* bline, srule_t** open_rule, bint_t* look_offset);
-static bline_t* _buffer_bline_new(buffer_t* self);
-static int _buffer_bline_free(bline_t* bline, bline_t* maybe_mark_line, bint_t col_delta);
-static bline_t* _buffer_bline_break(bline_t* bline, bint_t col);
-static void _buffer_find_end_pos(bline_t* start_line, bint_t start_col, bint_t num_chars, bline_t** ret_end_line, bint_t* ret_end_col, bint_t* ret_safe_num_chars);
-static void _buffer_bline_replace(bline_t* bline, bint_t start_col, char* data, bint_t data_len, str_t* del_data);
-static bint_t _buffer_bline_insert(bline_t* bline, bint_t col, char* data, bint_t data_len, int move_marks);
-static bint_t _buffer_bline_delete(bline_t* bline, bint_t col, bint_t num_chars);
-static bint_t _buffer_bline_col_to_index(bline_t* bline, bint_t col);
-static bint_t _buffer_bline_index_to_col(bline_t* bline, bint_t index);
-static int _buffer_munmap(buffer_t* self);
-static int _srule_multi_find(srule_t* rule, int find_end, bline_t* bline, bint_t start_offset, bint_t* ret_start, bint_t* ret_stop);
-static int _srule_multi_find_start(srule_t* rule, bline_t* bline, bint_t start_offset, bint_t* ret_start, bint_t* ret_stop);
-static int _srule_multi_find_end(srule_t* rule, bline_t* bline, bint_t start_offset, bint_t* ret_stop);
-static int _baction_destroy(baction_t* action);
+static int _buffer_open_mmap(buffer_t *self, int fd, size_t size);
+static int _buffer_open_read(buffer_t *self, int fd, size_t size);
+static int _buffer_bline_unslab(bline_t *self);
+static void _buffer_stat(buffer_t *self);
+static int _buffer_baction_do(buffer_t *self, bline_t *bline, baction_t *action, int is_redo, bint_t *opt_repeat_offset);
+static int _buffer_update(buffer_t *self, baction_t *action);
+static int _buffer_truncate_undo_stack(buffer_t *self, baction_t *action_from);
+static int _buffer_add_to_undo_stack(buffer_t *self, baction_t *action);
+static int _buffer_apply_styles_singles(bline_t *start_line, bint_t min_nlines);
+static int _buffer_apply_styles_multis(bline_t *start_line, bint_t min_nlines, int srule_type);
+static int _buffer_bline_apply_style_single(srule_t *srule, bline_t *bline);
+static int _buffer_bline_apply_style_multi(srule_t *srule, bline_t *bline, srule_t **open_rule, bint_t *look_offset);
+static bline_t *_buffer_bline_new(buffer_t *self);
+static int _buffer_bline_free(bline_t *bline, bline_t *maybe_mark_line, bint_t col_delta);
+static bline_t *_buffer_bline_break(bline_t *bline, bint_t col);
+static void _buffer_find_end_pos(bline_t *start_line, bint_t start_col, bint_t num_chars, bline_t **ret_end_line, bint_t *ret_end_col, bint_t *ret_safe_num_chars);
+static void _buffer_bline_replace(bline_t *bline, bint_t start_col, char *data, bint_t data_len, str_t *del_data);
+static bint_t _buffer_bline_insert(bline_t *bline, bint_t col, char *data, bint_t data_len, int move_marks);
+static bint_t _buffer_bline_delete(bline_t *bline, bint_t col, bint_t num_chars);
+static bint_t _buffer_bline_col_to_index(bline_t *bline, bint_t col);
+static bint_t _buffer_bline_index_to_col(bline_t *bline, bint_t index);
+static int _buffer_munmap(buffer_t *self);
+static int _srule_multi_find(srule_t *rule, int find_end, bline_t *bline, bint_t start_offset, bint_t *ret_start, bint_t *ret_stop);
+static int _srule_multi_find_start(srule_t *rule, bline_t *bline, bint_t start_offset, bint_t *ret_start, bint_t *ret_stop);
+static int _srule_multi_find_end(srule_t *rule, bline_t *bline, bint_t start_offset, bint_t *ret_stop);
+static int _baction_destroy(baction_t *action);
 
 // Make a new buffer and return it
-buffer_t* buffer_new() {
-    buffer_t* buffer;
-    bline_t* bline;
+buffer_t *buffer_new() {
+    buffer_t *buffer;
+    bline_t *bline;
     buffer = calloc(1, sizeof(buffer_t));
     buffer->tab_width = 4;
     bline = _buffer_bline_new(buffer);
@@ -53,8 +53,8 @@ buffer_t* buffer_new() {
 }
 
 // Wrapper for buffer_new + buffer_open
-buffer_t* buffer_new_open(char* path) {
-    buffer_t* self;
+buffer_t *buffer_new_open(char *path) {
+    buffer_t *self;
     int rc;
     self = buffer_new();
     if ((rc = buffer_open(self, path)) != MLBUF_OK) {
@@ -65,7 +65,7 @@ buffer_t* buffer_new_open(char* path) {
 }
 
 // Read buffer from path
-int buffer_open(buffer_t* self, char* path) {
+int buffer_open(buffer_t *self, char *path) {
     int rc;
     struct stat st;
     int fd;
@@ -123,13 +123,13 @@ int buffer_open(buffer_t* self, char* path) {
 }
 
 // Write buffer to path
-int buffer_save(buffer_t* self) {
+int buffer_save(buffer_t *self) {
     return buffer_save_as(self, self->path, NULL);
 }
 
 // Write buffer to specified path
-int buffer_save_as(buffer_t* self, char* path, bint_t* optret_nbytes) {
-    FILE* fp;
+int buffer_save_as(buffer_t *self, char *path, bint_t *optret_nbytes) {
+    FILE *fp;
     size_t nbytes;
 
     if (optret_nbytes) *optret_nbytes = 0;
@@ -165,13 +165,13 @@ int buffer_save_as(buffer_t* self, char* path, bint_t* optret_nbytes) {
 }
 
 // Write buffer data to FILE*
-int buffer_write_to_file(buffer_t* self, FILE* fp, size_t* optret_nbytes) {
+int buffer_write_to_file(buffer_t *self, FILE *fp, size_t *optret_nbytes) {
     return buffer_write_to_fd(self, fileno(fp), optret_nbytes);
 }
 
 // Write buffer data to file descriptor
-int buffer_write_to_fd(buffer_t* self, int fd, size_t* optret_nbytes) {
-    bline_t* bline;
+int buffer_write_to_fd(buffer_t *self, int fd, size_t *optret_nbytes) {
+    bline_t *bline;
     size_t nbytes;
     ssize_t write_rc;
     nbytes = 0;
@@ -191,11 +191,11 @@ int buffer_write_to_fd(buffer_t* self, int fd, size_t* optret_nbytes) {
 }
 
 // Free a buffer
-int buffer_destroy(buffer_t* self) {
-    bline_t* line;
-    bline_t* line_tmp;
-    baction_t* action;
-    baction_t* action_tmp;
+int buffer_destroy(buffer_t *self) {
+    bline_t *line;
+    bline_t *line_tmp;
+    baction_t *action;
+    baction_t *action_tmp;
     char c;
     for (line = self->last_line; line; ) {
         line_tmp = line->prev;
@@ -217,16 +217,16 @@ int buffer_destroy(buffer_t* self) {
 }
 
 // Add a mark to this buffer and return it
-mark_t* buffer_add_mark(buffer_t* self, bline_t* maybe_line, bint_t maybe_col) {
+mark_t *buffer_add_mark(buffer_t *self, bline_t *maybe_line, bint_t maybe_col) {
     return buffer_add_mark_ex(self, '\0', maybe_line, maybe_col);
 }
 
 // If letter is [a-z], add a lettered mark and return it.
 // If letter is \0, add a non-lettered mark and return it.
 // Otherwise do nothing and return NULL.
-mark_t* buffer_add_mark_ex(buffer_t* self, char letter, bline_t* maybe_line, bint_t maybe_col) {
-    mark_t* mark;
-    mark_t* mark_tmp;
+mark_t *buffer_add_mark_ex(buffer_t *self, char letter, bline_t *maybe_line, bint_t maybe_col) {
+    mark_t *mark;
+    mark_t *mark_tmp;
     if (!((letter >= 'a' && letter <= 'z') || letter == '\0')) {
         return NULL;
     }
@@ -252,16 +252,16 @@ mark_t* buffer_add_mark_ex(buffer_t* self, char letter, bline_t* maybe_line, bin
 }
 
 // Return lettered mark or NULL if it does not exist
-int buffer_get_lettered_mark(buffer_t* self, char letter, mark_t** ret_mark) {
+int buffer_get_lettered_mark(buffer_t *self, char letter, mark_t **ret_mark) {
     MLBUF_ENSURE_AZ(letter);
     *ret_mark = MLBUF_LETT_MARK(self, letter);
     return MLBUF_OK;
 }
 
 // Remove mark from buffer and free it, removing any range srules that use it
-int buffer_destroy_mark(buffer_t* self, mark_t* mark) {
-    srule_node_t* node;
-    srule_node_t* node_tmp;
+int buffer_destroy_mark(buffer_t *self, mark_t *mark) {
+    srule_node_t *node;
+    srule_node_t *node_tmp;
     DL_DELETE(mark->bline->marks, mark);
     if (mark->letter) MLBUF_LETT_MARK(self, mark->letter) = NULL;
     DL_FOREACH_SAFE(self->multi_srules, node, node_tmp) {
@@ -277,9 +277,9 @@ int buffer_destroy_mark(buffer_t* self, mark_t* mark) {
 }
 
 // Get buffer contents and length
-int buffer_get(buffer_t* self, char** ret_data, bint_t* ret_data_len) {
-    bline_t* bline;
-    char* data_cursor;
+int buffer_get(buffer_t *self, char **ret_data, bint_t *ret_data_len) {
+    bline_t *bline;
+    char *data_cursor;
     bint_t alloc_size;
     if (self->is_data_dirty) {
         // Refresh self->data
@@ -308,12 +308,12 @@ int buffer_get(buffer_t* self, char** ret_data, bint_t* ret_data_len) {
     return MLBUF_OK;
 }
 
-int buffer_clear(buffer_t* self) {
+int buffer_clear(buffer_t *self) {
     return buffer_delete(self, 0, self->byte_count);
 }
 
 // Set buffer contents
-int buffer_set(buffer_t* self, char* data, bint_t data_len) {
+int buffer_set(buffer_t *self, char *data, bint_t data_len) {
     int rc;
     MLBUF_MAKE_GT_EQ0(data_len);
     if ((rc = buffer_clear(self)) != MLBUF_OK) {
@@ -325,13 +325,13 @@ int buffer_set(buffer_t* self, char* data, bint_t data_len) {
 }
 
 // Set buffer contents more efficiently
-int buffer_set_mmapped(buffer_t* self, char* data, bint_t data_len) {
+int buffer_set_mmapped(buffer_t *self, char *data, bint_t data_len) {
     bint_t nlines;
     bint_t line_num;
-    bline_t* blines;
+    bline_t *blines;
     bint_t data_remaining_len;
-    char* data_cursor;
-    char* data_newline;
+    char *data_cursor;
+    char *data_newline;
     bint_t line_len;
 
     if (buffer_clear(self) != MLBUF_OK) {
@@ -406,9 +406,9 @@ int buffer_set_mmapped(buffer_t* self, char* data, bint_t data_len) {
 }
 
 // Insert data into buffer given a buffer offset
-int buffer_insert(buffer_t* self, bint_t offset, char* data, bint_t data_len, bint_t* optret_num_chars) {
+int buffer_insert(buffer_t *self, bint_t offset, char *data, bint_t data_len, bint_t *optret_num_chars) {
     int rc;
-    bline_t* start_line;
+    bline_t *start_line;
     bint_t start_col;
     MLBUF_MAKE_GT_EQ0(offset);
 
@@ -421,19 +421,19 @@ int buffer_insert(buffer_t* self, bint_t offset, char* data, bint_t data_len, bi
 }
 
 // Insert data into buffer given a bline/col
-int buffer_insert_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col, char* data, bint_t data_len, bint_t* optret_num_chars) {
-    bline_t* cur_line;
+int buffer_insert_w_bline(buffer_t *self, bline_t *start_line, bint_t start_col, char *data, bint_t data_len, bint_t *optret_num_chars) {
+    bline_t *cur_line;
     bint_t cur_col;
-    bline_t* new_line;
-    char* data_cursor;
-    char* data_newline;
+    bline_t *new_line;
+    char *data_cursor;
+    char *data_newline;
     bint_t data_remaining_len;
     bint_t insert_len;
     bint_t num_lines_added;
-    char* ins_data;
+    char *ins_data;
     bint_t ins_data_len;
     bint_t ins_data_nchars;
-    baction_t* action;
+    baction_t *action;
     MLBUF_MAKE_GT_EQ0(data_len);
 
     // Exit early if no data
@@ -488,8 +488,8 @@ int buffer_insert_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col,
 }
 
 // Delete data from buffer given an offset
-int buffer_delete(buffer_t* self, bint_t offset, bint_t num_chars) {
-    bline_t* start_line;
+int buffer_delete(buffer_t *self, bint_t offset, bint_t num_chars) {
+    bline_t *start_line;
     bint_t start_col;
     MLBUF_MAKE_GT_EQ0(offset);
     buffer_get_bline_col(self, offset, &start_line, &start_col);
@@ -497,20 +497,20 @@ int buffer_delete(buffer_t* self, bint_t offset, bint_t num_chars) {
 }
 
 // Delete data from buffer given a bline/col
-int buffer_delete_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col, bint_t num_chars) {
-    bline_t* end_line;
+int buffer_delete_w_bline(buffer_t *self, bline_t *start_line, bint_t start_col, bint_t num_chars) {
+    bline_t *end_line;
     bint_t end_col;
-    bline_t* tmp_line;
-    bline_t* swap_line;
-    bline_t* next_line;
+    bline_t *tmp_line;
+    bline_t *swap_line;
+    bline_t *next_line;
     bint_t tmp_len;
-    char* del_data;
+    char *del_data;
     bint_t del_data_len;
     bint_t del_data_nchars;
     bint_t num_lines_removed;
     bint_t safe_num_chars;
     bint_t orig_char_count;
-    baction_t* action;
+    baction_t *action;
     MLBUF_MAKE_GT_EQ0(num_chars);
 
     // Find end line and col
@@ -580,9 +580,9 @@ int buffer_delete_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col,
 }
 
 // Replace num_chars in buffer at offset with data
-int buffer_replace(buffer_t* self, bint_t offset, bint_t num_chars, char* data, bint_t data_len) {
+int buffer_replace(buffer_t *self, bint_t offset, bint_t num_chars, char *data, bint_t data_len) {
     int rc;
-    bline_t* start_line;
+    bline_t *start_line;
     bint_t start_col;
     MLBUF_MAKE_GT_EQ0(offset);
 
@@ -595,17 +595,17 @@ int buffer_replace(buffer_t* self, bint_t offset, bint_t num_chars, char* data,
 }
 
 // Replace num_chars from start_line:start_col with data
-int buffer_replace_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col, bint_t del_chars, char* data, bint_t data_len) {
-    bline_t* cur_line;
+int buffer_replace_w_bline(buffer_t *self, bline_t *start_line, bint_t start_col, bint_t del_chars, char *data, bint_t data_len) {
+    bline_t *cur_line;
     bint_t cur_col;
     bint_t insert_rem;
     bint_t delete_rem;
     bint_t data_linelen;
     bint_t nchars_ins;
     bint_t nlines;
-    char* data_cursor;
-    char* data_newline;
-    baction_t* action;
+    char *data_cursor;
+    char *data_newline;
+    baction_t *action;
     str_t del_data = {0};
 
     // Replace data on common lines
@@ -690,8 +690,8 @@ int buffer_replace_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col
 }
 
 // Return a line given a line_index
-int buffer_get_bline(buffer_t* self, bint_t line_index, bline_t** ret_bline) {
-    bline_t* tmp_line;
+int buffer_get_bline(buffer_t *self, bint_t line_index, bline_t **ret_bline) {
+    bline_t *tmp_line;
     MLBUF_MAKE_GT_EQ0(line_index);
     for (tmp_line = self->first_line; tmp_line; tmp_line = tmp_line->next) {
         if (tmp_line->line_index == line_index) {
@@ -704,9 +704,9 @@ int buffer_get_bline(buffer_t* self, bint_t line_index, bline_t** ret_bline) {
 }
 
 // Return a line and col for the given offset
-int buffer_get_bline_col(buffer_t* self, bint_t offset, bline_t** ret_bline, bint_t* ret_col) {
-    bline_t* tmp_line;
-    bline_t* good_line = NULL;
+int buffer_get_bline_col(buffer_t *self, bint_t offset, bline_t **ret_bline, bint_t *ret_col) {
+    bline_t *tmp_line;
+    bline_t *good_line = NULL;
     bint_t remaining_chars;
     MLBUF_MAKE_GT_EQ0(offset);
 
@@ -730,8 +730,8 @@ int buffer_get_bline_col(buffer_t* self, bint_t offset, bline_t** ret_bline, bin
 }
 
 // Return an offset given a line and col
-int buffer_get_offset(buffer_t* self, bline_t* bline, bint_t col, bint_t* ret_offset) {
-    bline_t* tmp_line;
+int buffer_get_offset(buffer_t *self, bline_t *bline, bint_t col, bint_t *ret_offset) {
+    bline_t *tmp_line;
     bint_t offset;
     MLBUF_MAKE_GT_EQ0(col);
 
@@ -751,8 +751,8 @@ int buffer_get_offset(buffer_t* self, bline_t* bline, bint_t col, bint_t* ret_of
 }
 
 // Add a style rule to the buffer
-int buffer_add_srule(buffer_t* self, srule_t* srule) {
-    srule_node_t* node;
+int buffer_add_srule(buffer_t *self, srule_t *srule) {
+    srule_node_t *node;
     node = calloc(1, sizeof(srule_node_t));
     node->srule = srule;
     if (srule->type == MLBUF_SRULE_TYPE_SINGLE) {
@@ -768,11 +768,11 @@ int buffer_add_srule(buffer_t* self, srule_t* srule) {
 }
 
 // Remove a style rule from the buffer
-int buffer_remove_srule(buffer_t* self, srule_t* srule) {
+int buffer_remove_srule(buffer_t *self, srule_t *srule) {
     int found;
-    srule_node_t** head;
-    srule_node_t* node;
-    srule_node_t* node_tmp;
+    srule_node_t **head;
+    srule_node_t *node;
+    srule_node_t *node_tmp;
     if (srule->type == MLBUF_SRULE_TYPE_SINGLE) {
         head = &self->single_srules;
     } else {
@@ -795,7 +795,7 @@ int buffer_remove_srule(buffer_t* self, srule_t* srule) {
 }
 
 // Set callback to cb. Pass in NULL to unset callback.
-int buffer_set_callback(buffer_t* self, buffer_callback_t cb, void* udata) {
+int buffer_set_callback(buffer_t *self, buffer_callback_t cb, void *udata) {
     if (cb) {
         self->callback = cb;
         self->callback_udata = udata;
@@ -807,8 +807,8 @@ int buffer_set_callback(buffer_t* self, buffer_callback_t cb, void* udata) {
 }
 
 // Set tab_width and recalculate all line char vwidths
-int buffer_set_tab_width(buffer_t* self, int tab_width) {
-    bline_t* tmp_line;
+int buffer_set_tab_width(buffer_t *self, int tab_width) {
+    bline_t *tmp_line;
     if (tab_width < 1) {
         return MLBUF_ERR;
     }
@@ -820,11 +820,11 @@ int buffer_set_tab_width(buffer_t* self, int tab_width) {
 }
 
 // Return data from start_line:start_col thru end_line:end_col
-int buffer_substr(buffer_t* self, bline_t* start_line, bint_t start_col, bline_t* end_line, bint_t end_col, char** ret_data, bint_t* ret_data_len, bint_t* ret_data_nchars) {
-    char* data;
+int buffer_substr(buffer_t *self, bline_t *start_line, bint_t start_col, bline_t *end_line, bint_t end_col, char **ret_data, bint_t *ret_data_len, bint_t *ret_data_nchars) {
+    char *data;
     bint_t data_len;
     bint_t data_size;
-    bline_t* tmp_line;
+    bline_t *tmp_line;
     bint_t copy_len;
     bint_t copy_index;
     bint_t add_len;
@@ -890,9 +890,9 @@ int buffer_substr(buffer_t* self, bline_t* start_line, bint_t start_col, bline_t
 }
 
 // Undo an action
-int buffer_undo(buffer_t* self) {
-    baction_t* action_to_undo;
-    bline_t* bline;
+int buffer_undo(buffer_t *self) {
+    baction_t *action_to_undo;
+    bline_t *bline;
     int rc;
 
     // Find action to undo
@@ -930,9 +930,9 @@ int buffer_undo(buffer_t* self) {
 }
 
 // Redo an undone action
-int buffer_redo(buffer_t* self) {
-    baction_t* action_to_redo;
-    bline_t* bline;
+int buffer_redo(buffer_t *self) {
+    baction_t *action_to_redo;
+    bline_t *bline;
     int rc;
 
     // Find action to undo
@@ -962,7 +962,7 @@ int buffer_redo(buffer_t* self) {
 }
 
 // Toggle is_style_disabled
-int buffer_set_styles_enabled(buffer_t* self, int is_enabled) {
+int buffer_set_styles_enabled(buffer_t *self, int is_enabled) {
     if (!self->is_style_disabled && !is_enabled) {
         self->is_style_disabled = 1;
     } else if (self->is_style_disabled && is_enabled) {
@@ -973,9 +973,9 @@ int buffer_set_styles_enabled(buffer_t* self, int is_enabled) {
 }
 
 // Apply styles from start_line
-int buffer_apply_styles(buffer_t* self, bline_t* start_line, bint_t line_delta) {
+int buffer_apply_styles(buffer_t *self, bline_t *start_line, bint_t line_delta) {
     bint_t min_nlines;
-    srule_node_t* srule_node;
+    srule_node_t *srule_node;
     int count_tmp;
     int srule_count;
 
@@ -1008,36 +1008,36 @@ int buffer_apply_styles(buffer_t* self, bline_t* start_line, bint_t line_delta)
 }
 
 // Set register
-int buffer_register_set(buffer_t* self, char reg, char* data, size_t data_len) {
+int buffer_register_set(buffer_t *self, char reg, char *data, size_t data_len) {
     MLBUF_ENSURE_AZ(reg);
     str_set_len(MLBUF_REG_PTR(self, reg), data, data_len);
     return MLBUF_OK;
 }
 
 // Append to register
-int buffer_register_append(buffer_t* self, char reg, char* data, size_t data_len) {
+int buffer_register_append(buffer_t *self, char reg, char *data, size_t data_len) {
     MLBUF_ENSURE_AZ(reg);
     str_append_len(MLBUF_REG_PTR(self, reg), data, data_len);
     return MLBUF_OK;
 }
 
 // Prepend to register
-int buffer_register_prepend(buffer_t* self, char reg, char* data, size_t data_len) {
+int buffer_register_prepend(buffer_t *self, char reg, char *data, size_t data_len) {
     MLBUF_ENSURE_AZ(reg);
     str_prepend_len(MLBUF_REG_PTR(self, reg), data, data_len);
     return MLBUF_OK;
 }
 
 // Clear register
-int buffer_register_clear(buffer_t* self, char reg) {
+int buffer_register_clear(buffer_t *self, char reg) {
     MLBUF_ENSURE_AZ(reg);
     str_free(MLBUF_REG_PTR(self, reg));
     return MLBUF_OK;
 }
 
 // Get register, optionally allocating duplicate
-int buffer_register_get(buffer_t* self, char reg, int dup, char** ret_data, size_t* ret_data_len) {
-    str_t* sreg;
+int buffer_register_get(buffer_t *self, char reg, int dup, char **ret_data, size_t *ret_data_len) {
+    str_t *sreg;
     MLBUF_ENSURE_AZ(reg);
     sreg = MLBUF_REG_PTR(self, reg);
     if (dup) {
@@ -1050,12 +1050,12 @@ int buffer_register_get(buffer_t* self, char reg, int dup, char** ret_data, size
     return MLBUF_OK;
 }
 
-static int _buffer_open_mmap(buffer_t* self, int fd, size_t size) {
+static int _buffer_open_mmap(buffer_t *self, int fd, size_t size) {
     char tmppath[16];
     int tmpfd;
     char readbuf[1024];
     ssize_t nread;
-    char* mmap_buf;
+    char *mmap_buf;
 
     // Copy fd to tmp file
     sprintf(tmppath, "%s", "/tmp/mle-XXXXXX");
@@ -1093,9 +1093,9 @@ static int _buffer_open_mmap(buffer_t* self, int fd, size_t size) {
     return MLBUF_OK;
 }
 
-static int _buffer_open_read(buffer_t* self, int fd, size_t size) {
+static int _buffer_open_read(buffer_t *self, int fd, size_t size) {
     int rc;
-    char* buf;
+    char *buf;
     buf = malloc(size);
     rc = MLBUF_OK;
     if (size != (size_t)read(fd, buf, size)) {
@@ -1107,9 +1107,9 @@ static int _buffer_open_read(buffer_t* self, int fd, size_t size) {
     return rc;
 }
 
-static int _buffer_bline_unslab(bline_t* self) {
-    char* data;
-    bline_char_t* chars;
+static int _buffer_bline_unslab(bline_t *self) {
+    char *data;
+    bline_char_t *chars;
     if (!self->is_data_slabbed) {
         return MLBUF_ERR;
     }
@@ -1125,14 +1125,14 @@ static int _buffer_bline_unslab(bline_t* self) {
     return bline_count_chars(self);
 }
 
-static void _buffer_stat(buffer_t* self) {
+static void _buffer_stat(buffer_t *self) {
     if (!self->path) {
         return;
     }
     stat(self->path, &self->st); // TODO err?
 }
 
-static int _buffer_baction_do(buffer_t* self, bline_t* bline, baction_t* action, int is_redo, bint_t* opt_repeat_offset) {
+static int _buffer_baction_do(buffer_t *self, bline_t *bline, baction_t *action, int is_redo, bint_t *opt_repeat_offset) {
     int rc;
     bint_t col;
     bint_t offset;
@@ -1150,9 +1150,9 @@ static int _buffer_baction_do(buffer_t* self, bline_t* bline, baction_t* action,
     return rc;
 }
 
-static int _buffer_update(buffer_t* self, baction_t* action) {
-    bline_t* tmp_line;
-    bline_t* last_line;
+static int _buffer_update(buffer_t *self, baction_t *action) {
+    bline_t *tmp_line;
+    bline_t *last_line;
     bint_t new_line_index;
 
     // Adjust counts
@@ -1194,9 +1194,9 @@ static int _buffer_update(buffer_t* self, baction_t* action) {
     return MLBUF_OK;
 }
 
-static int _buffer_truncate_undo_stack(buffer_t* self, baction_t* action_from) {
-    baction_t* action_target;
-    baction_t* action_tmp;
+static int _buffer_truncate_undo_stack(buffer_t *self, baction_t *action_from) {
+    baction_t *action_target;
+    baction_t *action_tmp;
     int do_delete;
     self->action_tail = action_from->prev != action_from ? action_from->prev : NULL;
     do_delete = 0;
@@ -1212,7 +1212,7 @@ static int _buffer_truncate_undo_stack(buffer_t* self, baction_t* action_from) {
     return MLBUF_OK;
 }
 
-static int _buffer_add_to_undo_stack(buffer_t* self, baction_t* action) {
+static int _buffer_add_to_undo_stack(buffer_t *self, baction_t *action) {
     if (self->action_undone) {
         // We are recording an action after an undo has been performed, so we
         // need to chop off the tail of the baction list before recording the
@@ -1228,9 +1228,9 @@ static int _buffer_add_to_undo_stack(buffer_t* self, baction_t* action) {
     return MLBUF_OK;
 }
 
-static int _buffer_apply_styles_singles(bline_t* start_line, bint_t min_nlines) {
-    bline_t* cur_line;
-    srule_node_t* srule_node;
+static int _buffer_apply_styles_singles(bline_t *start_line, bint_t min_nlines) {
+    bline_t *cur_line;
+    srule_node_t *srule_node;
     bint_t styled_nlines;
     bint_t i;
 
@@ -1260,10 +1260,10 @@ static int _buffer_apply_styles_singles(bline_t* start_line, bint_t min_nlines)
     return MLBUF_OK;
 }
 
-static int _buffer_apply_styles_multis(bline_t* start_line, bint_t min_nlines, int srule_type) {
-    bline_t* cur_line;
-    srule_node_t* srule_node;
-    srule_t* open_rule;
+static int _buffer_apply_styles_multis(bline_t *start_line, bint_t min_nlines, int srule_type) {
+    bline_t *cur_line;
+    srule_node_t *srule_node;
+    srule_t *open_rule;
     bint_t styled_nlines;
     bint_t multi_look_offset;
     int open_rule_ended;
@@ -1335,7 +1335,7 @@ static int _buffer_apply_styles_multis(bline_t* start_line, bint_t min_nlines, i
     return MLBUF_OK;
 }
 
-static int _buffer_bline_apply_style_single(srule_t* srule, bline_t* bline) {
+static int _buffer_bline_apply_style_single(srule_t *srule, bline_t *bline) {
     int rc;
     int substrs[3];
     bint_t start;
@@ -1363,7 +1363,7 @@ static int _buffer_bline_apply_style_single(srule_t* srule, bline_t* bline) {
     return MLBUF_OK;
 }
 
-static int _buffer_bline_apply_style_multi(srule_t* srule, bline_t* bline, srule_t** open_rule, bint_t* look_offset) {
+static int _buffer_bline_apply_style_multi(srule_t *srule, bline_t *bline, srule_t **open_rule, bint_t *look_offset) {
     bint_t start;
     bint_t start_stop;
     bint_t end;
@@ -1423,16 +1423,16 @@ static int _buffer_bline_apply_style_multi(srule_t* srule, bline_t* bline, srule
     return MLBUF_OK;
 }
 
-static bline_t* _buffer_bline_new(buffer_t* self) {
-    bline_t* bline;
+static bline_t *_buffer_bline_new(buffer_t *self) {
+    bline_t *bline;
     bline = calloc(1, sizeof(bline_t));
     bline->buffer = self;
     return bline;
 }
 
-static int _buffer_bline_free(bline_t* bline, bline_t* maybe_mark_line, bint_t col_delta) {
-    mark_t* mark;
-    mark_t* mark_tmp;
+static int _buffer_bline_free(bline_t *bline, bline_t *maybe_mark_line, bint_t col_delta) {
+    mark_t *mark;
+    mark_t *mark_tmp;
     if (!bline->is_data_slabbed) {
         if (bline->data) free(bline->data);
         if (bline->chars) free(bline->chars);
@@ -1452,13 +1452,13 @@ static int _buffer_bline_free(bline_t* bline, bline_t* maybe_mark_line, bint_t c
     return MLBUF_OK;
 }
 
-static bline_t* _buffer_bline_break(bline_t* bline, bint_t col) {
+static bline_t *_buffer_bline_break(bline_t *bline, bint_t col) {
     bint_t index;
     bint_t len;
-    bline_t* new_line;
-    bline_t* tmp_line;
-    mark_t* mark;
-    mark_t* mark_tmp;
+    bline_t *new_line;
+    bline_t *tmp_line;
+    mark_t *mark;
+    mark_t *mark_tmp;
 
     // Unslab if needed
     if (bline->is_data_slabbed) _buffer_bline_unslab(bline);
@@ -1501,8 +1501,8 @@ static bline_t* _buffer_bline_break(bline_t* bline, bint_t col) {
 }
 
 // Given start_line:start_col + num_chars, find end_line:end_col
-static void _buffer_find_end_pos(bline_t* start_line, bint_t start_col, bint_t num_chars, bline_t** ret_end_line, bint_t* ret_end_col, bint_t* ret_safe_num_chars) {
-    bline_t* end_line;
+static void _buffer_find_end_pos(bline_t *start_line, bint_t start_col, bint_t num_chars, bline_t **ret_end_line, bint_t *ret_end_col, bint_t *ret_safe_num_chars) {
+    bline_t *end_line;
     bint_t end_col;
     bint_t num_chars_rem;
     end_line = start_line;
@@ -1530,9 +1530,9 @@ static void _buffer_find_end_pos(bline_t* start_line, bint_t start_col, bint_t n
     *ret_safe_num_chars = num_chars;
 }
 
-static void _buffer_bline_replace(bline_t* bline, bint_t start_col, char* data, bint_t data_len, str_t* del_data) {
+static void _buffer_bline_replace(bline_t *bline, bint_t start_col, char *data, bint_t data_len, str_t *del_data) {
     bint_t start_index;
-    mark_t* mark;
+    mark_t *mark;
 
     // Unslab if needed
     if (bline->is_data_slabbed) _buffer_bline_unslab(bline);
@@ -1567,10 +1567,10 @@ static void _buffer_bline_replace(bline_t* bline, bint_t start_col, char* data,
     }
 }
 
-static bint_t _buffer_bline_insert(bline_t* bline, bint_t col, char* data, bint_t data_len, int move_marks) {
+static bint_t _buffer_bline_insert(bline_t *bline, bint_t col, char *data, bint_t data_len, int move_marks) {
     bint_t index;
-    mark_t* mark;
-    mark_t* mark_tmp;
+    mark_t *mark;
+    mark_t *mark_tmp;
     bint_t orig_char_count;
     bint_t num_chars_added;
 
@@ -1618,13 +1618,13 @@ static bint_t _buffer_bline_insert(bline_t* bline, bint_t col, char* data, bint_
     return num_chars_added;
 }
 
-static bint_t _buffer_bline_delete(bline_t* bline, bint_t col, bint_t num_chars) {
+static bint_t _buffer_bline_delete(bline_t *bline, bint_t col, bint_t num_chars) {
     bint_t safe_num_chars;
     bint_t index;
     bint_t index_end;
     bint_t move_len;
-    mark_t* mark;
-    mark_t* mark_tmp;
+    mark_t *mark;
+    mark_t *mark_tmp;
     bint_t orig_char_count;
     bint_t num_chars_deleted;
 
@@ -1672,7 +1672,7 @@ static bint_t _buffer_bline_delete(bline_t* bline, bint_t col, bint_t num_chars)
     return num_chars_deleted;
 }
 
-static bint_t _buffer_bline_col_to_index(bline_t* bline, bint_t col) {
+static bint_t _buffer_bline_col_to_index(bline_t *bline, bint_t col) {
     bint_t index;
     MLBUF_BLINE_ENSURE_CHARS(bline);
     if (!bline->chars) {
@@ -1686,7 +1686,7 @@ static bint_t _buffer_bline_col_to_index(bline_t* bline, bint_t col) {
     return index;
 }
 
-static bint_t _buffer_bline_index_to_col(bline_t* bline, bint_t index) {
+static bint_t _buffer_bline_index_to_col(bline_t *bline, bint_t index) {
     MLBUF_BLINE_ENSURE_CHARS(bline);
     if (index < 1) {
         return 0;
@@ -1697,7 +1697,7 @@ static bint_t _buffer_bline_index_to_col(bline_t* bline, bint_t index) {
 }
 
 // Close self->fd and self->mmap if needed
-static int _buffer_munmap(buffer_t* self) {
+static int _buffer_munmap(buffer_t *self) {
     if (self->mmap) {
         munmap(self->mmap, self->mmap_len);
         close(self->mmap_fd);
@@ -1709,8 +1709,8 @@ static int _buffer_munmap(buffer_t* self) {
 }
 
 // Make a new single-line style rule
-srule_t* srule_new_single(char* re, bint_t re_len, int caseless, uint16_t fg, uint16_t bg) {
-    srule_t* rule;
+srule_t *srule_new_single(char *re, bint_t re_len, int caseless, uint16_t fg, uint16_t bg) {
+    srule_t *rule;
     const char *re_error;
     int re_erroffset;
     rule = calloc(1, sizeof(srule_t));
@@ -1730,8 +1730,8 @@ srule_t* srule_new_single(char* re, bint_t re_len, int caseless, uint16_t fg, ui
 }
 
 // Make a new multi-line style rule
-srule_t* srule_new_multi(char* re, bint_t re_len, char* re_end, bint_t re_end_len, uint16_t fg, uint16_t bg) {
-    srule_t* rule;
+srule_t *srule_new_multi(char *re, bint_t re_len, char *re_end, bint_t re_end_len, uint16_t fg, uint16_t bg) {
+    srule_t *rule;
     const char *re_error;
     int re_erroffset;
     rule = calloc(1, sizeof(srule_t));
@@ -1755,8 +1755,8 @@ srule_t* srule_new_multi(char* re, bint_t re_len, char* re_end, bint_t re_end_le
 }
 
 // Make a new range style rule
-srule_t* srule_new_range(mark_t* range_a, mark_t* range_b, uint16_t fg, uint16_t bg) {
-    srule_t* rule;
+srule_t *srule_new_range(mark_t *range_a, mark_t *range_b, uint16_t fg, uint16_t bg) {
+    srule_t *rule;
     rule = calloc(1, sizeof(srule_t));
     rule->type = MLBUF_SRULE_TYPE_RANGE;
     rule->style.fg = fg;
@@ -1767,7 +1767,7 @@ srule_t* srule_new_range(mark_t* range_a, mark_t* range_b, uint16_t fg, uint16_t
 }
 
 // Free an srule
-int srule_destroy(srule_t* srule) {
+int srule_destroy(srule_t *srule) {
     if (srule->re) free(srule->re);
     if (srule->re_end) free(srule->re_end);
     if (srule->cre) pcre_free(srule->cre);
@@ -1778,13 +1778,13 @@ int srule_destroy(srule_t* srule) {
     return MLBUF_OK;
 }
 
-static int _srule_multi_find(srule_t* rule, int find_end, bline_t* bline, bint_t start_offset, bint_t* ret_start, bint_t* ret_stop) {
+static int _srule_multi_find(srule_t *rule, int find_end, bline_t *bline, bint_t start_offset, bint_t *ret_start, bint_t *ret_stop) {
     int rc;
-    pcre* cre;
-    pcre_extra* crex;
+    pcre *cre;
+    pcre_extra *crex;
     int substrs[3];
     bint_t start_index;
-    mark_t* mark;
+    mark_t *mark;
 
     if (rule->type == MLBUF_SRULE_TYPE_RANGE) {
         mark = mark_is_gt(rule->range_a, rule->range_b)
@@ -1810,16 +1810,16 @@ static int _srule_multi_find(srule_t* rule, int find_end, bline_t* bline, bint_t
     return 0;
 }
 
-static int _srule_multi_find_start(srule_t* rule, bline_t* bline, bint_t start_offset, bint_t* ret_start, bint_t* ret_stop) {
+static int _srule_multi_find_start(srule_t *rule, bline_t *bline, bint_t start_offset, bint_t *ret_start, bint_t *ret_stop) {
     return _srule_multi_find(rule, 0, bline, start_offset, ret_start, ret_stop);
 }
 
-static int _srule_multi_find_end(srule_t* rule, bline_t* bline, bint_t start_offset, bint_t* ret_stop) {
+static int _srule_multi_find_end(srule_t *rule, bline_t *bline, bint_t start_offset, bint_t *ret_stop) {
     bint_t ignore;
     return _srule_multi_find(rule, 1, bline, start_offset, &ignore, ret_stop);
 }
 
-static int _baction_destroy(baction_t* action) {
+static int _baction_destroy(baction_t *action) {
     if (action->data) free(action->data);
     free(action);
     return MLBUF_OK;
diff --git a/bview.c b/bview.c
index 5c3b522..a9e1f33 100644
--- a/bview.c
+++ b/bview.c
@@ -3,27 +3,27 @@
 #include <wctype.h>
 #include "mle.h"
 
-static int _bview_rectify_viewport_dim(bview_t* self, bline_t* bline, bint_t vpos, int dim_scope, int dim_size, bint_t *view_vpos);
-static void _bview_init(bview_t* self, buffer_t* buffer);
-static void _bview_init_resized(bview_t* self);
-static kmap_t* _bview_get_init_kmap(editor_t* editor);
-static void _bview_buffer_callback(buffer_t* buffer, baction_t* action, void* udata);
-static int _bview_set_linenum_width(bview_t* self);
-static void _bview_deinit(bview_t* self);
-static void _bview_set_tab_width(bview_t* self, int tab_width);
-static void _bview_fix_path(bview_t* self, char* path, int path_len, char** ret_path, int* ret_path_len, bint_t* ret_line_num);
-static void _bview_expand_tilde(bview_t* self, char* path, int path_len, char** ret_path, int* ret_path_len);
-static buffer_t* _bview_open_buffer(bview_t* self, char* opt_path, int opt_path_len);
-static void _bview_draw_prompt(bview_t* self);
-static void _bview_draw_status(bview_t* self);
-static void _bview_draw_edit(bview_t* self, int x, int y, int w, int h);
-static void _bview_draw_bline(bview_t* self, bline_t* bline, int rect_y, bline_t** optret_bline, int* optret_rect_y);
-static void _bview_highlight_bracket_pair(bview_t* self, mark_t* mark);
+static int _bview_rectify_viewport_dim(bview_t *self, bline_t *bline, bint_t vpos, int dim_scope, int dim_size, bint_t *view_vpos);
+static void _bview_init(bview_t *self, buffer_t *buffer);
+static void _bview_init_resized(bview_t *self);
+static kmap_t *_bview_get_init_kmap(editor_t *editor);
+static void _bview_buffer_callback(buffer_t *buffer, baction_t *action, void *udata);
+static int _bview_set_linenum_width(bview_t *self);
+static void _bview_deinit(bview_t *self);
+static void _bview_set_tab_width(bview_t *self, int tab_width);
+static void _bview_fix_path(bview_t *self, char *path, int path_len, char **ret_path, int *ret_path_len, bint_t *ret_line_num);
+static void _bview_expand_tilde(bview_t *self, char *path, int path_len, char **ret_path, int *ret_path_len);
+static buffer_t *_bview_open_buffer(bview_t *self, char *opt_path, int opt_path_len);
+static void _bview_draw_prompt(bview_t *self);
+static void _bview_draw_status(bview_t *self);
+static void _bview_draw_edit(bview_t *self, int x, int y, int w, int h);
+static void _bview_draw_bline(bview_t *self, bline_t *bline, int rect_y, bline_t **optret_bline, int *optret_rect_y);
+static void _bview_highlight_bracket_pair(bview_t *self, mark_t *mark);
 
 // Create a new bview
-bview_t* bview_new(editor_t* editor, char* opt_path, int opt_path_len, buffer_t* opt_buffer) {
-    bview_t* self;
-    buffer_t* buffer;
+bview_t *bview_new(editor_t *editor, char *opt_path, int opt_path_len, buffer_t *opt_buffer) {
+    bview_t *self;
+    buffer_t *buffer;
 
     // Allocate and init bview
     self = calloc(1, sizeof(bview_t));
@@ -54,8 +54,8 @@ bview_t* bview_new(editor_t* editor, char* opt_path, int opt_path_len, buffer_t*
 }
 
 // Open a buffer in an existing bview
-int bview_open(bview_t* self, char* path, int path_len) {
-    buffer_t* buffer;
+int bview_open(bview_t *self, char *path, int path_len) {
+    buffer_t *buffer;
     buffer = _bview_open_buffer(self, path, path_len);
     if (self->path) free(self->path);
     self->path = strndup(path, path_len);
@@ -65,7 +65,7 @@ int bview_open(bview_t* self, char* path, int path_len) {
 }
 
 // Free a bview
-int bview_destroy(bview_t* self) {
+int bview_destroy(bview_t *self) {
     _bview_deinit(self);
     if (self->path) free(self->path);
     // TODO ensure everything freed
@@ -74,7 +74,7 @@ int bview_destroy(bview_t* self) {
 }
 
 // Move and resize a bview to the given position and dimensions
-int bview_resize(bview_t* self, int x, int y, int w, int h) {
+int bview_resize(bview_t *self, int x, int y, int w, int h) {
     int aw, ah;
 
     self->x = x;
@@ -146,8 +146,8 @@ int bview_resize(bview_t* self, int x, int y, int w, int h) {
 }
 
 // Return top-most split_parent of a bview
-bview_t* bview_get_split_root(bview_t* self) {
-    bview_t* root;
+bview_t *bview_get_split_root(bview_t *self) {
+    bview_t *root;
     root = self;
     while (root->split_parent) {
         root = root->split_parent;
@@ -156,7 +156,7 @@ bview_t* bview_get_split_root(bview_t* self) {
 }
 
 // Draw bview to screen
-int bview_draw(bview_t* self) {
+int bview_draw(bview_t *self) {
     if (MLE_BVIEW_IS_PROMPT(self)) {
         _bview_draw_prompt(self);
     } else if (MLE_BVIEW_IS_STATUS(self)) {
@@ -167,12 +167,12 @@ int bview_draw(bview_t* self) {
 }
 
 // Set cursor to screen
-int bview_draw_cursor(bview_t* self, int set_real_cursor) {
-    cursor_t* cursor;
-    mark_t* mark;
+int bview_draw_cursor(bview_t *self, int set_real_cursor) {
+    cursor_t *cursor;
+    mark_t *mark;
     int screen_x;
     int screen_y;
-    struct tb_cell* cell;
+    struct tb_cell *cell;
     DL_FOREACH(self->cursors, cursor) {
         mark = cursor->mark;
         if (bview_get_screen_coords(self, mark, &screen_x, &screen_y, &cell) != MLE_OK) {
@@ -194,8 +194,8 @@ int bview_draw_cursor(bview_t* self, int set_real_cursor) {
 }
 
 // Push a kmap
-int bview_push_kmap(bview_t* bview, kmap_t* kmap) {
-    kmap_node_t* node;
+int bview_push_kmap(bview_t *bview, kmap_t *kmap) {
+    kmap_node_t *node;
     node = calloc(1, sizeof(kmap_node_t));
     node->kmap = kmap;
     node->bview = bview;
@@ -205,8 +205,8 @@ int bview_push_kmap(bview_t* bview, kmap_t* kmap) {
 }
 
 // Pop a kmap
-int bview_pop_kmap(bview_t* bview, kmap_t** optret_kmap) {
-    kmap_node_t* node_to_pop;
+int bview_pop_kmap(bview_t *bview, kmap_t **optret_kmap) {
+    kmap_node_t *node_to_pop;
     node_to_pop = bview->kmap_tail;
     if (!node_to_pop) {
         return MLE_ERR;
@@ -221,8 +221,8 @@ int bview_pop_kmap(bview_t* bview, kmap_t** optret_kmap) {
 }
 
 // Split a bview
-int bview_split(bview_t* self, int is_vertical, float factor, bview_t** optret_bview) {
-    bview_t* child;
+int bview_split(bview_t *self, int is_vertical, float factor, bview_t **optret_bview) {
+    bview_t *child;
 
     if (self->split_child) {
         MLE_RETURN_ERR(self->editor, "bview %p is already split", (void*)self);
@@ -251,9 +251,9 @@ int bview_split(bview_t* self, int is_vertical, float factor, bview_t** optret_b
 }
 
 // Return number of active cursors
-int bview_get_active_cursor_count(bview_t* self) {
+int bview_get_active_cursor_count(bview_t *self) {
     int count;
-    cursor_t* cursor;
+    cursor_t *cursor;
     count = 0;
     DL_FOREACH(self->cursors, cursor) {
         if (!cursor->is_asleep) {
@@ -264,8 +264,8 @@ int bview_get_active_cursor_count(bview_t* self) {
 }
 
 // Add a cursor to a bview
-int bview_add_cursor(bview_t* self, bline_t* opt_bline, bint_t opt_col, cursor_t** optret_cursor) {
-    cursor_t* cursor;
+int bview_add_cursor(bview_t *self, bline_t *opt_bline, bint_t opt_col, cursor_t **optret_cursor) {
+    cursor_t *cursor;
     cursor = calloc(1, sizeof(cursor_t));
     cursor->bview = self;
     if (!opt_bline) opt_bline = self->buffer->first_line;
@@ -282,8 +282,8 @@ int bview_add_cursor(bview_t* self, bline_t* opt_bline, bint_t opt_col, cursor_t
 }
 
 // Add sleeping cursor
-int bview_add_cursor_asleep(bview_t* self, bline_t* opt_bline, bint_t opt_col, cursor_t** optret_cursor) {
-    cursor_t* cursor;
+int bview_add_cursor_asleep(bview_t *self, bline_t *opt_bline, bint_t opt_col, cursor_t **optret_cursor) {
+    cursor_t *cursor;
     bview_add_cursor(self, opt_bline, opt_col, &cursor);
     cursor->is_asleep = 1;
     if (optret_cursor) *optret_cursor = cursor;
@@ -291,8 +291,8 @@ int bview_add_cursor_asleep(bview_t* self, bline_t* opt_bline, bint_t opt_col, c
 }
 
 // Wake all sleeping cursors
-int bview_wake_sleeping_cursors(bview_t* self) {
-    cursor_t* cursor;
+int bview_wake_sleeping_cursors(bview_t *self) {
+    cursor_t *cursor;
     DL_FOREACH(self->cursors, cursor) {
         if (cursor->is_asleep) {
             cursor->is_asleep = 0;
@@ -302,9 +302,9 @@ int bview_wake_sleeping_cursors(bview_t* self) {
 }
 
 // Remove all cursors except one
-int bview_remove_cursors_except(bview_t* self, cursor_t* one) {
-    cursor_t* cursor;
-    cursor_t* cursor_tmp;
+int bview_remove_cursors_except(bview_t *self, cursor_t *one) {
+    cursor_t *cursor;
+    cursor_t *cursor_tmp;
     DL_FOREACH_SAFE(self->cursors, cursor, cursor_tmp) {
         if (cursor != one) {
             bview_remove_cursor(self, cursor);
@@ -314,9 +314,9 @@ int bview_remove_cursors_except(bview_t* self, cursor_t* one) {
 }
 
 // Remove a cursor from a bview
-int bview_remove_cursor(bview_t* self, cursor_t* cursor) {
-    cursor_t* el;
-    cursor_t* tmp;
+int bview_remove_cursor(bview_t *self, cursor_t *cursor) {
+    cursor_t *el;
+    cursor_t *tmp;
     DL_FOREACH_SAFE(self->cursors, el, tmp) {
         if (el == cursor) {
             self->active_cursor = el->prev && el->prev != el ? el->prev : el->next;
@@ -335,7 +335,7 @@ int bview_remove_cursor(bview_t* self, cursor_t* cursor) {
 }
 
 // Set viewport y safely
-int bview_set_viewport_y(bview_t* self, bint_t y, int do_rectify) {
+int bview_set_viewport_y(bview_t *self, bint_t y, int do_rectify) {
     if (y < 0) {
         y = 0;
     } else if (y >= self->buffer->line_count) {
@@ -348,7 +348,7 @@ int bview_set_viewport_y(bview_t* self, bint_t y, int do_rectify) {
 }
 
 // Center the viewport vertically
-int bview_center_viewport_y(bview_t* self) {
+int bview_center_viewport_y(bview_t *self) {
     bint_t center;
     center = self->active_cursor->mark->bline->line_index - self->rect_buffer.h/2;
     if (center < 0) center = 0;
@@ -356,12 +356,12 @@ int bview_center_viewport_y(bview_t* self) {
 }
 
 // Zero the viewport vertically
-int bview_zero_viewport_y(bview_t* self) {
+int bview_zero_viewport_y(bview_t *self) {
     return bview_set_viewport_y(self, self->active_cursor->mark->bline->line_index, 1);
 }
 
 // Maximize the viewport vertically
-int bview_max_viewport_y(bview_t* self) {
+int bview_max_viewport_y(bview_t *self) {
     bint_t max;
     max = self->active_cursor->mark->bline->line_index - self->rect_buffer.h;
     if (max < 0) max = 0;
@@ -369,8 +369,8 @@ int bview_max_viewport_y(bview_t* self) {
 }
 
 // Rectify the viewport
-int bview_rectify_viewport(bview_t* self) {
-    mark_t* mark;
+int bview_rectify_viewport(bview_t *self) {
+    mark_t *mark;
     mark = self->active_cursor->mark;
 
     // Rectify each dimension of the viewport
@@ -388,8 +388,8 @@ int bview_rectify_viewport(bview_t* self) {
 }
 
 // Add a listener
-int bview_add_listener(bview_t* self, bview_listener_cb_t callback, void* udata) {
-    bview_listener_t* listener;
+int bview_add_listener(bview_t *self, bview_listener_cb_t callback, void *udata) {
+    bview_listener_t *listener;
     listener = calloc(1, sizeof(bview_listener_t));
     listener->callback = callback;
     listener->udata = udata;
@@ -398,14 +398,14 @@ int bview_add_listener(bview_t* self, bview_listener_cb_t callback, void* udata)
 }
 
 // Remove and free a listener
-int bview_destroy_listener(bview_t* self, bview_listener_t* listener) {
+int bview_destroy_listener(bview_t *self, bview_listener_t *listener) {
     DL_DELETE(self->listeners, listener);
     free(listener);
     return MLE_OK;
 }
 
 // Rectify a viewport dimension. Return 1 if changed, else 0.
-static int _bview_rectify_viewport_dim(bview_t* self, bline_t* bline, bint_t vpos, int dim_scope, int dim_size, bint_t *view_vpos) {
+static int _bview_rectify_viewport_dim(bview_t *self, bline_t *bline, bint_t vpos, int dim_scope, int dim_size, bint_t *view_vpos) {
     int rc;
     bint_t vpos_start;
     bint_t vpos_stop;
@@ -440,9 +440,9 @@ static int _bview_rectify_viewport_dim(bview_t* self, bline_t* bline, bint_t vpo
 }
 
 // Init a bview with a buffer
-static void _bview_init(bview_t* self, buffer_t* buffer) {
-    cursor_t* cursor_tmp;
-    kmap_t* kmap_init;
+static void _bview_init(bview_t *self, buffer_t *buffer) {
+    cursor_t *cursor_tmp;
+    kmap_t *kmap_init;
 
     _bview_deinit(self);
 
@@ -467,7 +467,7 @@ static void _bview_init(bview_t* self, buffer_t* buffer) {
 }
 
 // Invoked once after a bview has been resized for the first time
-static void _bview_init_resized(bview_t* self) {
+static void _bview_init_resized(bview_t *self) {
     // Move cursor to startup line if present
     if (self->startup_linenum > 0) {
         mark_move_to(self->active_cursor->mark, self->startup_linenum, 0);
@@ -476,7 +476,7 @@ static void _bview_init_resized(bview_t* self) {
 }
 
 // Return initial kmap to use
-static kmap_t* _bview_get_init_kmap(editor_t* editor) {
+static kmap_t *_bview_get_init_kmap(editor_t *editor) {
     if (!editor->kmap_init) {
         if (editor->kmap_init_name) {
             HASH_FIND_STR(editor->kmap_map, editor->kmap_init_name, editor->kmap_init);
@@ -489,11 +489,11 @@ static kmap_t* _bview_get_init_kmap(editor_t* editor) {
 }
 
 // Called by mlbuf after edits
-static void _bview_buffer_callback(buffer_t* buffer, baction_t* action, void* udata) {
-    editor_t* editor;
-    bview_t* self;
-    bview_t* active;
-    bview_listener_t* listener;
+static void _bview_buffer_callback(buffer_t *buffer, baction_t *action, void *udata) {
+    editor_t *editor;
+    bview_t *self;
+    bview_t *active;
+    bview_listener_t *listener;
 
     self = (bview_t*)udata;
     editor = self->editor;
@@ -505,9 +505,9 @@ static void _bview_buffer_callback(buffer_t* buffer, baction_t* action, void* ud
     }
 
     if (action && action->line_delta != 0) {
-        bview_t* bview;
-        bview_t* tmp1;
-        bview_t* tmp2;
+        bview_t *bview;
+        bview_t *tmp1;
+        bview_t *tmp2;
         CDL_FOREACH_SAFE2(editor->all_bviews, bview, tmp1, tmp2, all_prev, all_next) {
             if (bview->buffer == buffer) {
                 // Adjust linenum_width
@@ -530,7 +530,7 @@ static void _bview_buffer_callback(buffer_t* buffer, baction_t* action, void* ud
 }
 
 // Set linenum_width and return 1 if changed
-static int _bview_set_linenum_width(bview_t* self) {
+static int _bview_set_linenum_width(bview_t *self) {
     int orig;
     orig = self->linenum_width;
     self->abs_linenum_width = MLE_MAX(1, (int)(floor(log10((double)self->buffer->line_count))) + 1);
@@ -553,9 +553,9 @@ static int _bview_set_linenum_width(bview_t* self) {
 }
 
 // Deinit a bview
-static void _bview_deinit(bview_t* self) {
-    bview_listener_t* listener;
-    bview_listener_t* listener_tmp;
+static void _bview_deinit(bview_t *self) {
+    bview_listener_t *listener;
+    bview_listener_t *listener_tmp;
 
     // Remove all kmaps
     while (self->kmap_tail) {
@@ -564,7 +564,7 @@ static void _bview_deinit(bview_t* self) {
 
     // Remove all syntax rules
     if (self->syntax) {
-        srule_node_t* srule_node;
+        srule_node_t *srule_node;
         buffer_set_styles_enabled(self->buffer, 0);
         DL_FOREACH(self->syntax->srules, srule_node) {
             buffer_remove_srule(self->buffer, srule_node->srule);
@@ -603,11 +603,11 @@ static void _bview_deinit(bview_t* self) {
 }
 
 // Set syntax on bview buffer
-int bview_set_syntax(bview_t* self, char* opt_syntax) {
-    syntax_t* syntax;
-    syntax_t* syntax_tmp;
-    syntax_t* use_syntax;
-    srule_node_t* srule_node;
+int bview_set_syntax(bview_t *self, char *opt_syntax) {
+    syntax_t *syntax;
+    syntax_t *syntax_tmp;
+    syntax_t *use_syntax;
+    srule_node_t *srule_node;
 
     // Only set syntax on edit bviews
     if (!MLE_BVIEW_IS_EDIT(self)) {
@@ -661,7 +661,7 @@ int bview_set_syntax(bview_t* self, char* opt_syntax) {
     return use_syntax ? MLE_OK : MLE_ERR;
 }
 
-static void _bview_set_tab_width(bview_t* self, int tab_width) {
+static void _bview_set_tab_width(bview_t *self, int tab_width) {
     self->tab_width = tab_width;
     if (self->buffer && self->buffer->tab_width != self->tab_width) {
         buffer_set_tab_width(self->buffer, self->tab_width);
@@ -669,9 +669,9 @@ static void _bview_set_tab_width(bview_t* self, int tab_width) {
 }
 
 // Attempt to replace leading ~/ with $HOME
-static void _bview_expand_tilde(bview_t* self, char* path, int path_len, char** ret_path, int* ret_path_len) {
-    char* homedir;
-    char* newpath;
+static void _bview_expand_tilde(bview_t *self, char *path, int path_len, char **ret_path, int *ret_path_len) {
+    char *homedir;
+    char *newpath;
     (void)self;
     if (!util_is_file("~", NULL, NULL)
         && strncmp(path, "~/", 2) == 0
@@ -689,10 +689,10 @@ static void _bview_expand_tilde(bview_t* self, char* path, int path_len, char**
 
 // Attempt to fix path by stripping away git-style diff prefixes ([ab/]) and/or
 // by extracting a trailing line number after a colon (:)
-static void _bview_fix_path(bview_t* self, char* path, int path_len, char** ret_path, int* ret_path_len, bint_t* ret_line_num) {
-    char* tmp;
+static void _bview_fix_path(bview_t *self, char *path, int path_len, char **ret_path, int *ret_path_len, bint_t *ret_line_num) {
+    char *tmp;
     int tmp_len;
-    char* colon;
+    char *colon;
     int is_valid;
     int fix_nudge;
     int fix_len;
@@ -755,11 +755,11 @@ _bview_fix_path_ret:
 }
 
 // Open a buffer with an optional path to load, otherwise empty
-static buffer_t* _bview_open_buffer(bview_t* self, char* opt_path, int opt_path_len) {
-    buffer_t* buffer;
+static buffer_t *_bview_open_buffer(bview_t *self, char *opt_path, int opt_path_len) {
+    buffer_t *buffer;
     int has_path;
-    char* fix_path;
-    char* exp_path;
+    char *fix_path;
+    char *exp_path;
     int fix_path_len;
     int exp_path_len;
     bint_t startup_line_num;
@@ -786,15 +786,15 @@ static buffer_t* _bview_open_buffer(bview_t* self, char* opt_path, int opt_path_
     return buffer;
 }
 
-static void _bview_draw_prompt(bview_t* self) {
+static void _bview_draw_prompt(bview_t *self) {
     _bview_draw_bline(self, self->buffer->first_line, 0, NULL, NULL);
 }
 
-static void _bview_draw_status(bview_t* self) {
-    editor_t* editor;
-    bview_t* active;
-    bview_t* active_edit;
-    mark_t* mark;
+static void _bview_draw_status(bview_t *self) {
+    editor_t *editor;
+    bview_t *active;
+    bview_t *active_edit;
+    mark_t *mark;
 
     editor = self->editor;
     active = editor->active;
@@ -809,7 +809,7 @@ static void _bview_draw_status(bview_t* self) {
 
     // Macro indicator
     int i_macro_fg, i_macro_bg;
-    char* i_macro;
+    char *i_macro;
     if (editor->is_recording_macro) {
         i_macro_fg = TB_RED | TB_BOLD;
         i_macro_bg = TB_BLACK;
@@ -827,8 +827,8 @@ static void _bview_draw_status(bview_t* self) {
     // Anchor indicator
     int i_anchor_fg, i_anchor_bg;
     bint_t anchor_len, anchor_nlines, anchor_tmp;
-    char* i_anchor;
-    cursor_t* cursor;
+    char *i_anchor;
+    cursor_t *cursor;
     if (active_edit->active_cursor->is_anchored) {
         i_anchor_fg = TB_WHITE | TB_BOLD;
         i_anchor_bg = TB_BLACK;
@@ -850,7 +850,7 @@ static void _bview_draw_status(bview_t* self) {
 
     // Async indicator
     int i_async_fg, i_async_bg;
-    char* i_async;
+    char *i_async;
     if (editor->aprocs) {
         i_async_fg = TB_YELLOW | TB_BOLD;
         i_async_bg = TB_BLACK;
@@ -864,7 +864,7 @@ static void _bview_draw_status(bview_t* self) {
     // Need-more-input icon
     int i_needinput_fg;
     int i_needinput_bg;
-    char* i_needinput;
+    char *i_needinput;
     if (editor->loop_ctx->need_more_input) {
         i_needinput_fg = TB_BLUE | TB_BOLD;
         i_needinput_bg = TB_BLACK;
@@ -876,7 +876,7 @@ static void _bview_draw_status(bview_t* self) {
     }
 
     // Bview num TODO pre-compute this
-    bview_t* bview_tmp;
+    bview_t *bview_tmp;
     int bview_count = 0;
     int bview_num = 0;
     CDL_FOREACH2(editor->all_bviews, bview_tmp, all_next) {
@@ -925,7 +925,7 @@ _bview_draw_status_end:
     }
 }
 
-static void _bview_draw_edit(bview_t* self, int x, int y, int w, int h) {
+static void _bview_draw_edit(bview_t *self, int x, int y, int w, int h) {
     int split_w;
     int split_h;
     int min_w;
@@ -933,7 +933,7 @@ static void _bview_draw_edit(bview_t* self, int x, int y, int w, int h) {
     int rect_y;
     int fg_attr;
     int bg_attr;
-    bline_t* bline;
+    bline_t *bline;
 
     // Handle split
     if (self->split_child) {
@@ -1002,7 +1002,7 @@ static void _bview_draw_edit(bview_t* self, int x, int y, int w, int h) {
     }
 }
 
-static void _bview_draw_bline(bview_t* self, bline_t* bline, int rect_y, bline_t** optret_bline, int* optret_rect_y) {
+static void _bview_draw_bline(bview_t *self, bline_t *bline, int rect_y, bline_t **optret_bline, int *optret_rect_y) {
     int rect_x;
     bint_t char_col;
     int fg;
@@ -1101,14 +1101,14 @@ static void _bview_draw_bline(bview_t* self, bline_t* bline, int rect_y, bline_t
 }
 
 // Highlight matching bracket pair under mark
-static void _bview_highlight_bracket_pair(bview_t* self, mark_t* mark) {
-    bline_t* line;
+static void _bview_highlight_bracket_pair(bview_t *self, mark_t *mark) {
+    bline_t *line;
     bint_t brkt;
     bint_t col;
     mark_t pair;
     int screen_x;
     int screen_y;
-    struct tb_cell* cell;
+    struct tb_cell *cell;
 
     MLBUF_BLINE_ENSURE_CHARS(mark->bline);
 
@@ -1135,7 +1135,7 @@ static void _bview_highlight_bracket_pair(bview_t* self, mark_t* mark) {
 }
 
 // Find screen coordinates for a mark
-int bview_get_screen_coords(bview_t* self, mark_t* mark, int* ret_x, int* ret_y, struct tb_cell** optret_cell) {
+int bview_get_screen_coords(bview_t *self, mark_t *mark, int *ret_x, int *ret_y, struct tb_cell **optret_cell) {
     int screen_x;
     int screen_y;
     int is_soft_wrapped;
diff --git a/cmd.c b/cmd.c
index 996e8b2..03cfbc8 100644
--- a/cmd.c
+++ b/cmd.c
@@ -6,7 +6,7 @@
 #include "mle.h"
 
 #define MLE_MULTI_CURSOR_MARK_FN(pcursor, pfn, ...) do {\
-    cursor_t* cursor; \
+    cursor_t *cursor; \
     DL_FOREACH((pcursor)->bview->cursors, cursor) { \
         if (cursor->is_asleep) continue; \
         pfn(cursor->mark, ##__VA_ARGS__); \
@@ -14,7 +14,7 @@
 } while(0)
 
 #define MLE_MULTI_CURSOR_MARK_FN_NO_ARGS(pcursor, pfn) do {\
-    cursor_t* cursor; \
+    cursor_t *cursor; \
     DL_FOREACH((pcursor)->bview->cursors, cursor) { \
         if (cursor->is_asleep) continue; \
         pfn(cursor->mark); \
@@ -22,38 +22,38 @@
 } while(0)
 
 #define MLE_MULTI_CURSOR_CODE(pcursor, pcode) do { \
-    cursor_t* cursor; \
+    cursor_t *cursor; \
     DL_FOREACH((pcursor)->bview->cursors, cursor) { \
         if (cursor->is_asleep) continue; \
         pcode \
     } \
 } while(0)
 
-static void _cmd_force_redraw(cmd_context_t* ctx);
-static int _cmd_pre_close(editor_t* editor, bview_t* bview);
-static int _cmd_quit_inner(editor_t* editor, bview_t* bview);
-static int _cmd_save(editor_t* editor, bview_t* bview, int save_as);
-static int _cmd_search_next(bview_t* bview, cursor_t* cursor, mark_t* search_mark, char* regex, int regex_len);
-static void _cmd_aproc_bview_passthru_cb(aproc_t* self, char* buf, size_t buf_len);
-static void _cmd_isearch_prompt_cb(bview_t* bview, baction_t* action, void* udata);
-static int _cmd_menu_browse_cb(cmd_context_t* ctx);
-static int _cmd_menu_grep_cb(cmd_context_t* ctx);
-static int _cmd_menu_ctag_cb(cmd_context_t* ctx);
-static int _cmd_indent(cmd_context_t* ctx, int outdent);
-static int _cmd_indent_line(bline_t* bline, int use_tabs, int outdent);
-static void _cmd_help_inner(char* buf, kbinding_t* trie, str_t* h);
-static void _cmd_insert_auto_indent_newline(cmd_context_t* ctx);
-static void _cmd_insert_auto_indent_closing_bracket(cmd_context_t* ctx);
-static void _cmd_shell_apply_cmd(cmd_context_t* ctx, char* cmd);
-static void _cmd_get_input(cmd_context_t* ctx, kinput_t* ret_input);
+static void _cmd_force_redraw(cmd_context_t *ctx);
+static int _cmd_pre_close(editor_t *editor, bview_t *bview);
+static int _cmd_quit_inner(editor_t *editor, bview_t *bview);
+static int _cmd_save(editor_t *editor, bview_t *bview, int save_as);
+static int _cmd_search_next(bview_t *bview, cursor_t *cursor, mark_t *search_mark, char *regex, int regex_len);
+static void _cmd_aproc_bview_passthru_cb(aproc_t *self, char *buf, size_t buf_len);
+static void _cmd_isearch_prompt_cb(bview_t *bview, baction_t *action, void *udata);
+static int _cmd_menu_browse_cb(cmd_context_t *ctx);
+static int _cmd_menu_grep_cb(cmd_context_t *ctx);
+static int _cmd_menu_ctag_cb(cmd_context_t *ctx);
+static int _cmd_indent(cmd_context_t *ctx, int outdent);
+static int _cmd_indent_line(bline_t *bline, int use_tabs, int outdent);
+static void _cmd_help_inner(char *buf, kbinding_t *trie, str_t *h);
+static void _cmd_insert_auto_indent_newline(cmd_context_t *ctx);
+static void _cmd_insert_auto_indent_closing_bracket(cmd_context_t *ctx);
+static void _cmd_shell_apply_cmd(cmd_context_t *ctx, char *cmd);
+static void _cmd_get_input(cmd_context_t *ctx, kinput_t *ret_input);
 
 // Insert data
-int cmd_insert_data(cmd_context_t* ctx) {
+int cmd_insert_data(cmd_context_t *ctx) {
     bint_t insertbuf_len;
-    char* insertbuf_cur;
+    char *insertbuf_cur;
     bint_t len;
     size_t insert_size;
-    kinput_t* input;
+    kinput_t *input;
     int i;
 
     // Ensure space in insertbuf
@@ -101,7 +101,7 @@ int cmd_insert_data(cmd_context_t* ctx) {
         && memchr(ctx->editor->insertbuf, '\n', insertbuf_len) != NULL
     ) {
         // Insert with trim
-        char* trimmed = NULL;
+        char *trimmed = NULL;
         int trimmed_len = 0;
         util_pcre_replace("(?m) +$", ctx->editor->insertbuf, "", &trimmed, &trimmed_len);
         MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_insert_before, trimmed, trimmed_len);
@@ -122,7 +122,7 @@ int cmd_insert_data(cmd_context_t* ctx) {
 }
 
 // Insert newline above current line
-int cmd_insert_newline_above(cmd_context_t* ctx) {
+int cmd_insert_newline_above(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         mark_move_bol(cursor->mark);
         mark_insert_after(cursor->mark, "\n", 1);
@@ -131,7 +131,7 @@ int cmd_insert_newline_above(cmd_context_t* ctx) {
 }
 
 // Delete char before cursor mark
-int cmd_delete_before(cmd_context_t* ctx) {
+int cmd_delete_before(cmd_context_t *ctx) {
     bint_t offset;
     mark_get_offset(ctx->cursor->mark, &offset);
     if (offset < 1) return MLE_OK;
@@ -140,15 +140,15 @@ int cmd_delete_before(cmd_context_t* ctx) {
 }
 
 // Delete char after cursor mark
-int cmd_delete_after(cmd_context_t* ctx) {
+int cmd_delete_after(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_delete_after, 1);
     return MLE_OK;
 }
 
 // Move cursor to beginning of line
-int cmd_move_bol(cmd_context_t* ctx) {
+int cmd_move_bol(cmd_context_t *ctx) {
     uint32_t ch;
-    mark_t* mark;
+    mark_t *mark;
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         mark_clone(cursor->mark, &mark);
         mark_move_bol(mark);
@@ -168,71 +168,71 @@ int cmd_move_bol(cmd_context_t* ctx) {
 }
 
 // Move cursor to end of line
-int cmd_move_eol(cmd_context_t* ctx) {
+int cmd_move_eol(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN_NO_ARGS(ctx->cursor, mark_move_eol);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move cursor to beginning of buffer
-int cmd_move_beginning(cmd_context_t* ctx) {
+int cmd_move_beginning(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN_NO_ARGS(ctx->cursor, mark_move_beginning);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move cursor to end of buffer
-int cmd_move_end(cmd_context_t* ctx) {
+int cmd_move_end(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN_NO_ARGS(ctx->cursor, mark_move_end);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move cursor left one char
-int cmd_move_left(cmd_context_t* ctx) {
+int cmd_move_left(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_by, -1);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move cursor right one char
-int cmd_move_right(cmd_context_t* ctx) {
+int cmd_move_right(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_by, 1);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move cursor up one line
-int cmd_move_up(cmd_context_t* ctx) {
+int cmd_move_up(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_vert, -1);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move cursor down one line
-int cmd_move_down(cmd_context_t* ctx) {
+int cmd_move_down(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_vert, 1);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move cursor one page up
-int cmd_move_page_up(cmd_context_t* ctx) {
+int cmd_move_page_up(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_vert, -1 * ctx->bview->rect_buffer.h);
     bview_zero_viewport_y(ctx->bview);
     return MLE_OK;
 }
 
 // Move cursor one page down
-int cmd_move_page_down(cmd_context_t* ctx) {
+int cmd_move_page_down(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_vert, ctx->bview->rect_buffer.h);
     bview_zero_viewport_y(ctx->bview);
     return MLE_OK;
 }
 
 // Move to specific line
-int cmd_move_to_line(cmd_context_t* ctx) {
-    char* linestr;
+int cmd_move_to_line(cmd_context_t *ctx) {
+    char *linestr;
     bint_t line;
     editor_prompt(ctx->editor, "move_to_line: Line num?", NULL, &linestr);
     if (!linestr) return MLE_OK;
@@ -245,7 +245,7 @@ int cmd_move_to_line(cmd_context_t* ctx) {
 }
 
 // Move vertically relative to current line
-int cmd_move_relative(cmd_context_t* ctx) {
+int cmd_move_relative(cmd_context_t *ctx) {
     int delta;
     if (ctx->loop_ctx->numeric_params_len < 1) {
         return MLE_ERR;
@@ -263,33 +263,33 @@ int cmd_move_relative(cmd_context_t* ctx) {
 }
 
 // Move one word forward
-int cmd_move_word_forward(cmd_context_t* ctx) {
+int cmd_move_word_forward(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_next_re_nudge, MLE_RE_WORD_FORWARD, sizeof(MLE_RE_WORD_FORWARD)-1);
     return MLE_OK;
 }
 
 // Move one word back
-int cmd_move_word_back(cmd_context_t* ctx) {
+int cmd_move_word_back(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_prev_re, MLE_RE_WORD_BACK, sizeof(MLE_RE_WORD_BACK)-1);
     return MLE_OK;
 }
 
 // Move to next open bracket
-int cmd_move_bracket_forward(cmd_context_t* ctx) {
+int cmd_move_bracket_forward(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_next_str_nudge, "{", 1);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move to prev open bracket
-int cmd_move_bracket_back(cmd_context_t* ctx) {
+int cmd_move_bracket_back(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_MARK_FN(ctx->cursor, mark_move_prev_str, "{", 1);
     bview_rectify_viewport(ctx->bview);
     return MLE_OK;
 }
 
 // Move to matching bracket, or prev bracket if not on a bracket
-int cmd_move_bracket_toggle(cmd_context_t* ctx) {
+int cmd_move_bracket_toggle(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         if (mark_move_bracket_pair(cursor->mark, ctx->buffer->byte_count) == MLBUF_ERR) {
             mark_move_prev_re(cursor->mark, "[\\[\\(\\{]", strlen("[\\[\\(\\{]"));
@@ -300,8 +300,8 @@ int cmd_move_bracket_toggle(cmd_context_t* ctx) {
 }
 
 // Delete word back
-int cmd_delete_word_before(cmd_context_t* ctx) {
-    mark_t* tmark;
+int cmd_delete_word_before(cmd_context_t *ctx) {
+    mark_t *tmark;
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         mark_clone(cursor->mark, &tmark);
         mark_move_prev_re(tmark, MLE_RE_WORD_BACK, sizeof(MLE_RE_WORD_BACK)-1);
@@ -312,8 +312,8 @@ int cmd_delete_word_before(cmd_context_t* ctx) {
 }
 
 // Delete word ahead
-int cmd_delete_word_after(cmd_context_t* ctx) {
-    mark_t* tmark;
+int cmd_delete_word_after(cmd_context_t *ctx) {
+    mark_t *tmark;
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         mark_clone(cursor->mark, &tmark);
         mark_move_next_re(tmark, MLE_RE_WORD_FORWARD, sizeof(MLE_RE_WORD_FORWARD)-1);
@@ -324,7 +324,7 @@ int cmd_delete_word_after(cmd_context_t* ctx) {
 }
 
 // Toggle sel bound on cursors
-int cmd_toggle_anchor(cmd_context_t* ctx) {
+int cmd_toggle_anchor(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         cursor_toggle_anchor(cursor, 1);
     );
@@ -332,26 +332,26 @@ int cmd_toggle_anchor(cmd_context_t* ctx) {
 }
 
 // Drop an is_asleep=1 cursor
-int cmd_drop_sleeping_cursor(cmd_context_t* ctx) {
+int cmd_drop_sleeping_cursor(cmd_context_t *ctx) {
     return bview_add_cursor_asleep(ctx->bview, ctx->cursor->mark->bline, ctx->cursor->mark->col, NULL);
 }
 
 // Awake all is_asleep=1 cursors
-int cmd_wake_sleeping_cursors(cmd_context_t* ctx) {
+int cmd_wake_sleeping_cursors(cmd_context_t *ctx) {
     return bview_wake_sleeping_cursors(ctx->bview);
 }
 
 // Remove all cursors except the active one
-int cmd_remove_extra_cursors(cmd_context_t* ctx) {
+int cmd_remove_extra_cursors(cmd_context_t *ctx) {
     return bview_remove_cursors_except(ctx->bview, ctx->cursor);
 }
 
 // Drop column of cursors in selection
-int cmd_drop_cursor_column(cmd_context_t* ctx) {
-    bline_t* bline;
+int cmd_drop_cursor_column(cmd_context_t *ctx) {
+    bline_t *bline;
     bint_t col;
-    mark_t* lo;
-    mark_t* hi;
+    mark_t *lo;
+    mark_t *hi;
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         if (!cursor->is_anchored) continue;
         col = cursor->mark->col;
@@ -374,10 +374,10 @@ int cmd_drop_cursor_column(cmd_context_t* ctx) {
 }
 
 // Search for a regex
-int cmd_search(cmd_context_t* ctx) {
-    char* regex;
+int cmd_search(cmd_context_t *ctx) {
+    char *regex;
     int regex_len;
-    mark_t* search_mark;
+    mark_t *search_mark;
     editor_prompt(ctx->editor, "search: Regex?", NULL, &regex);
     if (!regex) return MLE_OK;
     regex_len = strlen(regex);
@@ -392,9 +392,9 @@ int cmd_search(cmd_context_t* ctx) {
 }
 
 // Search for next instance of last search regex
-int cmd_search_next(cmd_context_t* ctx) {
+int cmd_search_next(cmd_context_t *ctx) {
     int regex_len;
-    mark_t* search_mark;
+    mark_t *search_mark;
     if (!ctx->bview->last_search) return MLE_OK;
     regex_len = strlen(ctx->bview->last_search);
     search_mark = buffer_add_mark(ctx->bview->buffer, NULL, 0);
@@ -406,40 +406,40 @@ int cmd_search_next(cmd_context_t* ctx) {
 }
 
 // Interactive search and replace
-int cmd_replace(cmd_context_t* ctx) {
+int cmd_replace(cmd_context_t *ctx) {
     return cursor_replace(ctx->cursor, 1, NULL, NULL);
 }
 
 // Redraw screen
-int cmd_redraw(cmd_context_t* ctx) {
+int cmd_redraw(cmd_context_t *ctx) {
     bview_center_viewport_y(ctx->bview);
     _cmd_force_redraw(ctx);
     return MLE_OK;
 }
 
 // Zero viewport y
-int cmd_viewport_top(cmd_context_t* ctx) {
+int cmd_viewport_top(cmd_context_t *ctx) {
     bview_zero_viewport_y(ctx->bview);
     return MLE_OK;
 }
 
 // Center viewport y
-int cmd_viewport_mid(cmd_context_t* ctx) {
+int cmd_viewport_mid(cmd_context_t *ctx) {
     bview_center_viewport_y(ctx->bview);
     return MLE_OK;
 }
 
 // Max viewport y
-int cmd_viewport_bot(cmd_context_t* ctx) {
+int cmd_viewport_bot(cmd_context_t *ctx) {
     bview_max_viewport_y(ctx->bview);
     return MLE_OK;
 }
 
 // Toggle between top and mid viewport y
-int cmd_viewport_toggle(cmd_context_t* ctx) {
-    bline_t* orig;
-    bline_t* mid;
-    bline_t* top;
+int cmd_viewport_toggle(cmd_context_t *ctx) {
+    bline_t *orig;
+    bline_t *mid;
+    bline_t *top;
     orig = ctx->bview->viewport_bline;
     cmd_viewport_mid(ctx); mid = ctx->bview->viewport_bline;
     cmd_viewport_top(ctx); top = ctx->bview->viewport_bline;
@@ -454,9 +454,9 @@ int cmd_viewport_toggle(cmd_context_t* ctx) {
 }
 
 // Find next occurence of word under cursor
-int cmd_find_word(cmd_context_t* ctx) {
-    char* re;
-    char* word;
+int cmd_find_word(cmd_context_t *ctx) {
+    char *re;
+    char *word;
     bint_t re_len;
     bint_t word_len;
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
@@ -477,7 +477,7 @@ int cmd_find_word(cmd_context_t* ctx) {
 }
 
 // Incremental search
-int cmd_isearch(cmd_context_t* ctx) {
+int cmd_isearch(cmd_context_t *ctx) {
     editor_prompt(ctx->editor, "isearch: Regex?", &(editor_prompt_params_t) {
         .kmap = ctx->editor->kmap_prompt_isearch,
         .prompt_cb = _cmd_isearch_prompt_cb
@@ -491,7 +491,7 @@ int cmd_isearch(cmd_context_t* ctx) {
 }
 
 // Cut text
-int cmd_cut(cmd_context_t* ctx) {
+int cmd_cut(cmd_context_t *ctx) {
     int append;
     append = ctx->loop_ctx->last_cmd && ctx->loop_ctx->last_cmd->func == cmd_cut ? 1 : 0;
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
@@ -501,7 +501,7 @@ int cmd_cut(cmd_context_t* ctx) {
 }
 
 // Copy text
-int cmd_copy(cmd_context_t* ctx) {
+int cmd_copy(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         cursor_cut_copy(cursor, 0, 1, 0);
     );
@@ -509,7 +509,7 @@ int cmd_copy(cmd_context_t* ctx) {
 }
 
 // Paste text
-int cmd_uncut(cmd_context_t* ctx) {
+int cmd_uncut(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         cursor_uncut(cursor);
     );
@@ -517,7 +517,7 @@ int cmd_uncut(cmd_context_t* ctx) {
 }
 
 // Copy in between chars
-int cmd_copy_by(cmd_context_t* ctx) {
+int cmd_copy_by(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         if (cursor_select_by(cursor, ctx->static_param) == MLE_OK) {
             cursor_cut_copy(cursor, 0, 0, 0);
@@ -527,7 +527,7 @@ int cmd_copy_by(cmd_context_t* ctx) {
 }
 
 // Cut in between chars
-int cmd_cut_by(cmd_context_t* ctx) {
+int cmd_cut_by(cmd_context_t *ctx) {
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
         if (cursor_select_by(cursor, ctx->static_param) == MLE_OK) {
             cursor_cut_copy(cursor, 1, 0, 0);
@@ -537,20 +537,20 @@ int cmd_cut_by(cmd_context_t* ctx) {
 }
 
 // Go to next bview
-int cmd_next(cmd_context_t* ctx) {
+int cmd_next(cmd_context_t *ctx) {
     editor_set_active(ctx->editor, ctx->bview->all_next);
     return MLE_OK;
 }
 
 // Go to prev bview
-int cmd_prev(cmd_context_t* ctx) {
+int cmd_prev(cmd_context_t *ctx) {
     editor_set_active(ctx->editor, ctx->bview->all_prev);
     return MLE_OK;
 }
 
 // Split a bview vertically
-int cmd_split_vertical(cmd_context_t* ctx) {
-    bview_t* child;
+int cmd_split_vertical(cmd_context_t *ctx) {
+    bview_t *child;
     if (bview_split(ctx->bview, 1, 0.5, &child) == MLE_OK) {
         editor_set_active(ctx->editor, child);
     }
@@ -558,8 +558,8 @@ int cmd_split_vertical(cmd_context_t* ctx) {
 }
 
 // Split a bview horizontally
-int cmd_split_horizontal(cmd_context_t* ctx) {
-    bview_t* child;
+int cmd_split_horizontal(cmd_context_t *ctx) {
+    bview_t *child;
     if (bview_split(ctx->bview, 0, 0.5, &child) == MLE_OK) {
         editor_set_active(ctx->editor, child);
     }
@@ -567,8 +567,8 @@ int cmd_split_horizontal(cmd_context_t* ctx) {
 }
 
 // Fuzzy path search via fzf
-int cmd_fsearch(cmd_context_t* ctx) {
-    char* path;
+int cmd_fsearch(cmd_context_t *ctx) {
+    char *path;
     size_t path_len;
     path = NULL;
     if (util_shell_exec(ctx->editor, "fzf", -1, NULL, 0, 0, NULL, &path, &path_len) == MLE_ERR) {
@@ -595,12 +595,12 @@ int cmd_fsearch(cmd_context_t* ctx) {
 }
 
 // Grep for pattern in cwd
-int cmd_grep(cmd_context_t* ctx) {
-    aproc_t* aproc;
-    char* path;
-    char* path_arg;
-    char* cmd;
-    char* grep_fmt;
+int cmd_grep(cmd_context_t *ctx) {
+    aproc_t *aproc;
+    char *path;
+    char *path_arg;
+    char *cmd;
+    char *grep_fmt;
     editor_prompt(ctx->editor, "grep: Pattern?", NULL, &path);
     if (!path) return MLE_OK;
     if (ctx->static_param) {
@@ -624,11 +624,11 @@ int cmd_grep(cmd_context_t* ctx) {
 }
 
 // Invoke ctag search
-int cmd_ctag(cmd_context_t* ctx) {
-    aproc_t* aproc;
-    char* word;
-    char* word_arg;
-    char* cmd;
+int cmd_ctag(cmd_context_t *ctx) {
+    aproc_t *aproc;
+    char *word;
+    char *word_arg;
+    char *cmd;
     bint_t word_len;
     if (cursor_select_by(ctx->cursor, "word") != MLE_OK) {
         MLE_RETURN_ERR(ctx->editor, "%s", "Failed to select word under cursor");
@@ -650,10 +650,10 @@ int cmd_ctag(cmd_context_t* ctx) {
 }
 
 // Browse directory via tree
-int cmd_browse(cmd_context_t* ctx) {
-    bview_t* menu;
-    aproc_t* aproc;
-    char* cmd;
+int cmd_browse(cmd_context_t *ctx) {
+    bview_t *menu;
+    aproc_t *aproc;
+    char *cmd;
     asprintf(&cmd, "tree --charset C -n -f -L 2 %s 2>/dev/null", ctx->static_param ? ctx->static_param : "");
     aproc = aproc_new(ctx->editor, ctx->bview, &(ctx->bview->aproc), cmd, 0, _cmd_aproc_bview_passthru_cb);
     free(cmd);
@@ -664,20 +664,20 @@ int cmd_browse(cmd_context_t* ctx) {
 }
 
 // Save-as file
-int cmd_save_as(cmd_context_t* ctx) {
+int cmd_save_as(cmd_context_t *ctx) {
     _cmd_save(ctx->editor, ctx->bview, 1);
     return MLE_OK;
 }
 
 // Save file
-int cmd_save(cmd_context_t* ctx) {
+int cmd_save(cmd_context_t *ctx) {
     _cmd_save(ctx->editor, ctx->bview, 0);
     return MLE_OK;
 }
 
 // Open file in a new bview
-int cmd_open_file(cmd_context_t* ctx) {
-    char* path;
+int cmd_open_file(cmd_context_t *ctx) {
+    char *path;
     editor_prompt(ctx->editor, "new_open: File?", NULL, &path);
     if (!path) return MLE_OK;
     editor_open_bview(ctx->editor, NULL, MLE_BVIEW_TYPE_EDIT, path, strlen(path), 1, 0, 0, NULL, NULL);
@@ -686,14 +686,14 @@ int cmd_open_file(cmd_context_t* ctx) {
 }
 
 // Open empty buffer in a new bview
-int cmd_open_new(cmd_context_t* ctx) {
+int cmd_open_new(cmd_context_t *ctx) {
     editor_open_bview(ctx->editor, NULL, MLE_BVIEW_TYPE_EDIT, NULL, 0, 1, 0, 0, NULL, NULL);
     return MLE_OK;
 }
 
 // Open file into current bview
-int cmd_open_replace_file(cmd_context_t* ctx) {
-    char* path;
+int cmd_open_replace_file(cmd_context_t *ctx) {
+    char *path;
     if (_cmd_pre_close(ctx->editor, ctx->bview) == MLE_ERR) return MLE_OK;
     path = NULL;
     editor_prompt(ctx->editor, "replace_open: Path?", NULL, &path);
@@ -704,14 +704,14 @@ int cmd_open_replace_file(cmd_context_t* ctx) {
 }
 
 // Open empty buffer into current bview
-int cmd_open_replace_new(cmd_context_t* ctx) {
+int cmd_open_replace_new(cmd_context_t *ctx) {
     if (_cmd_pre_close(ctx->editor, ctx->bview) == MLE_ERR) return MLE_OK;
     bview_open(ctx->bview, NULL, 0);
     return MLE_OK;
 }
 
 // Close bview
-int cmd_close(cmd_context_t* ctx) {
+int cmd_close(cmd_context_t *ctx) {
     int num_open;
     int num_closed;
     if (_cmd_pre_close(ctx->editor, ctx->bview) == MLE_ERR) return MLE_OK;
@@ -722,9 +722,9 @@ int cmd_close(cmd_context_t* ctx) {
 }
 
 // Quit editor
-int cmd_quit(cmd_context_t* ctx) {
-    bview_t* bview;
-    bview_t* tmp;
+int cmd_quit(cmd_context_t *ctx) {
+    bview_t *bview;
+    bview_t *tmp;
     if (ctx->editor->loop_depth > 1) return MLE_OK;
     DL_FOREACH_SAFE2(ctx->editor->top_bviews, bview, tmp, top_next) {
         if (!MLE_BVIEW_IS_EDIT(bview)) {
@@ -738,14 +738,14 @@ int cmd_quit(cmd_context_t* ctx) {
 }
 
 // Quit editor without saving
-int cmd_quit_without_saving(cmd_context_t* ctx) {
+int cmd_quit_without_saving(cmd_context_t *ctx) {
     ctx->loop_ctx->should_exit = 1;
     return MLE_OK;
 }
 
 // Apply a macro with single-char name
-int cmd_apply_macro_by(cmd_context_t* ctx) {
-    kmacro_t* macro;
+int cmd_apply_macro_by(cmd_context_t *ctx) {
+    kmacro_t *macro;
     uint32_t ch;
     char name[6] = { 0 };
     if (ctx->editor->macro_apply) MLE_RETURN_ERR(ctx->editor, "Cannot nest macros%s", "");
@@ -761,9 +761,9 @@ int cmd_apply_macro_by(cmd_context_t* ctx) {
 
 
 // Apply a macro
-int cmd_apply_macro(cmd_context_t* ctx) {
-    char* name;
-    kmacro_t* macro;
+int cmd_apply_macro(cmd_context_t *ctx) {
+    char *name;
+    kmacro_t *macro;
     if (ctx->editor->macro_apply) MLE_RETURN_ERR(ctx->editor, "Cannot nest macros%s", "");
     editor_prompt(ctx->editor, "apply_macro: Name?", NULL, &name);
     if (!name) return MLE_OK;
@@ -776,13 +776,13 @@ int cmd_apply_macro(cmd_context_t* ctx) {
 }
 
 // No-op
-int cmd_noop(cmd_context_t* ctx) {
+int cmd_noop(cmd_context_t *ctx) {
     (void)ctx;
     return MLE_OK;
 }
 
 // Move forward til a certain char
-int cmd_move_until_forward(cmd_context_t* ctx) {
+int cmd_move_until_forward(cmd_context_t *ctx) {
     uint32_t ch;
     char str[6] = { 0 };
     ch = MLE_PARAM_WILDCARD(ctx, 0);
@@ -794,7 +794,7 @@ int cmd_move_until_forward(cmd_context_t* ctx) {
 }
 
 // Move back til a certain char
-int cmd_move_until_back(cmd_context_t* ctx) {
+int cmd_move_until_back(cmd_context_t *ctx) {
     uint32_t ch;
     char str[6] = { 0 };
     ch = MLE_PARAM_WILDCARD(ctx, 0);
@@ -806,31 +806,31 @@ int cmd_move_until_back(cmd_context_t* ctx) {
 }
 
 // Undo
-int cmd_undo(cmd_context_t* ctx) {
+int cmd_undo(cmd_context_t *ctx) {
     buffer_undo(ctx->bview->buffer);
     return MLE_OK;
 }
 
 // Redo
-int cmd_redo(cmd_context_t* ctx) {
+int cmd_redo(cmd_context_t *ctx) {
     buffer_redo(ctx->bview->buffer);
     return MLE_OK;
 }
 
 // Indent line(s)
-int cmd_indent(cmd_context_t* ctx) {
+int cmd_indent(cmd_context_t *ctx) {
     return _cmd_indent(ctx, 0);
 }
 
 // Outdent line(s)
-int cmd_outdent(cmd_context_t* ctx) {
+int cmd_outdent(cmd_context_t *ctx) {
     return _cmd_indent(ctx, 1);
 }
 
 // Set option
-int cmd_set_opt(cmd_context_t* ctx) {
-    char* prompt;
-    char* val;
+int cmd_set_opt(cmd_context_t *ctx) {
+    char *prompt;
+    char *val;
     int vali;
     if (!ctx->static_param) return MLE_ERR;
     asprintf(&prompt, "set_opt: %s?", ctx->static_param);
@@ -853,8 +853,8 @@ int cmd_set_opt(cmd_context_t* ctx) {
 }
 
 // Shell
-int cmd_shell(cmd_context_t* ctx) {
-    char* cmd;
+int cmd_shell(cmd_context_t *ctx) {
+    char *cmd;
 
     // Get shell cmd
     if (ctx->static_param) {
@@ -872,10 +872,10 @@ int cmd_shell(cmd_context_t* ctx) {
 }
 
 // Perl
-int cmd_perl(cmd_context_t* ctx) {
-    char* code;
-    char* code_escaped;
-    char* cmd;
+int cmd_perl(cmd_context_t *ctx) {
+    char *code;
+    char *code_escaped;
+    char *cmd;
 
     // Get perl code
     if (ctx->static_param) {
@@ -901,13 +901,13 @@ int cmd_perl(cmd_context_t* ctx) {
 }
 
 // Jump to a `\S{2,}` on screen via `[a-z][a-z]`
-int cmd_jump(cmd_context_t* ctx) {
-    bline_t* bline;
+int cmd_jump(cmd_context_t *ctx) {
+    bline_t *bline;
     bint_t col;
     bint_t nchars;
     bint_t stop_line_index;
-    mark_t* mark;
-    mark_t* jumps;
+    mark_t *mark;
+    mark_t *jumps;
     int jumpi, jumpt, screen_x, screen_y;
     char jumpa[3];
     kinput_t ev[2];
@@ -966,7 +966,7 @@ int cmd_jump(cmd_context_t* ctx) {
 }
 
 // Force a redraw of the screen
-static void _cmd_force_redraw(cmd_context_t* ctx) {
+static void _cmd_force_redraw(cmd_context_t *ctx) {
     int w;
     int h;
     int x;
@@ -987,10 +987,10 @@ static void _cmd_force_redraw(cmd_context_t* ctx) {
 }
 
 // Indent or outdent line(s)
-static int _cmd_indent(cmd_context_t* ctx, int outdent) {
-    bline_t* start;
-    bline_t* end;
-    bline_t* cur;
+static int _cmd_indent(cmd_context_t *ctx, int outdent) {
+    bline_t *start;
+    bline_t *end;
+    bline_t *cur;
     int use_tabs;
     use_tabs = ctx->bview->tab_to_space ? 0 : 1;
     MLE_MULTI_CURSOR_CODE(ctx->cursor,
@@ -1016,9 +1016,9 @@ static int _cmd_indent(cmd_context_t* ctx, int outdent) {
 }
 
 // Push kmap
-int cmd_push_kmap(cmd_context_t* ctx) {
-    kmap_t* kmap;
-    char* kmap_name;
+int cmd_push_kmap(cmd_context_t *ctx) {
+    kmap_t *kmap;
+    char *kmap_name;
     int rv;
 
     // Get kmap name
@@ -1049,16 +1049,16 @@ int cmd_push_kmap(cmd_context_t* ctx) {
 }
 
 // Pop kmap
-int cmd_pop_kmap(cmd_context_t* ctx) {
+int cmd_pop_kmap(cmd_context_t *ctx) {
     bview_pop_kmap(ctx->bview, NULL);
     return MLE_OK;
 }
 
 // Hacky as hell less integration
-int cmd_less(cmd_context_t* ctx) {
+int cmd_less(cmd_context_t *ctx) {
     int rc;
-    char* sh_fmt;
-    char* sh;
+    char *sh_fmt;
+    char *sh;
     char out[32];
     int screen_x;
     int screen_y;
@@ -1130,14 +1130,14 @@ int cmd_less(cmd_context_t* ctx) {
 }
 
 // Show help
-int cmd_show_help(cmd_context_t* ctx) {
+int cmd_show_help(cmd_context_t *ctx) {
     str_t h = {0}; // help
-    kmap_t* kmap;
-    kmap_t* kmap_tmp;
-    kmap_node_t* kmap_node;
+    kmap_t *kmap;
+    kmap_t *kmap_tmp;
+    kmap_node_t *kmap_node;
     int kmap_node_depth;
     int i;
-    bview_t* bview;
+    bview_t *bview;
     char buf[1024];
 
     str_append(&h,
@@ -1196,9 +1196,9 @@ int cmd_show_help(cmd_context_t* ctx) {
 }
 
 // Recursively descend into kbinding trie to build help string
-static void _cmd_help_inner(char* buf, kbinding_t* trie, str_t* h) {
-    kbinding_t* binding;
-    kbinding_t* binding_tmp;
+static void _cmd_help_inner(char *buf, kbinding_t *trie, str_t *h) {
+    kbinding_t *binding;
+    kbinding_t *binding_tmp;
     HASH_ITER(hh, trie, binding, binding_tmp) {
         if (binding->children) {
             _cmd_help_inner(buf, binding->children, h);
@@ -1215,7 +1215,7 @@ static void _cmd_help_inner(char* buf, kbinding_t* trie, str_t* h) {
 }
 
 // Indent/outdent a line, optionally using tabs
-static int _cmd_indent_line(bline_t* bline, int use_tabs, int outdent) {
+static int _cmd_indent_line(bline_t *bline, int use_tabs, int outdent) {
     char tab_char;
     int num_chars;
     int num_to_del;
@@ -1247,7 +1247,7 @@ static int _cmd_indent_line(bline_t* bline, int use_tabs, int outdent) {
 
 // Recursively close bviews, prompting to save unsaved changes. Return MLE_OK if
 // it's OK to continue closing, or MLE_ERR if the action was cancelled.
-static int _cmd_quit_inner(editor_t* editor, bview_t* bview) {
+static int _cmd_quit_inner(editor_t *editor, bview_t *bview) {
     if (bview->split_child && _cmd_quit_inner(editor, bview->split_child) == MLE_ERR) {
         return MLE_ERR;
     } else if (_cmd_pre_close(editor, bview) == MLE_ERR) {
@@ -1259,8 +1259,8 @@ static int _cmd_quit_inner(editor_t* editor, bview_t* bview) {
 
 // Prompt to save unsaved changes on close. Return MLE_OK if it's OK to continue
 // closing the bview, or MLE_ERR if the action was cancelled.
-static int _cmd_pre_close(editor_t* editor, bview_t* bview) {
-    char* yn;
+static int _cmd_pre_close(editor_t *editor, bview_t *bview) {
+    char *yn;
 
     if (!MLE_BVIEW_IS_EDIT(bview)) {
         MLE_RETURN_ERR(editor, "Cannot close non-edit bview %p", (void*)bview);
@@ -1288,10 +1288,10 @@ static int _cmd_pre_close(editor_t* editor, bview_t* bview) {
 
 // Prompt to save changes. Return MLE_OK if file was saved or MLE_ERR if the action
 // was cancelled.
-static int _cmd_save(editor_t* editor, bview_t* bview, int save_as) {
+static int _cmd_save(editor_t *editor, bview_t *bview, int save_as) {
     int rc;
-    char* path;
-    char* yn;
+    char *path;
+    char *yn;
     int fname_changed;
     struct stat st;
     bint_t nbytes;
@@ -1351,7 +1351,7 @@ static int _cmd_save(editor_t* editor, bview_t* bview, int save_as) {
 
 // Move cursor to next occurrence of term, wrap if necessary. Return MLE_OK if
 // there was a match, or MLE_ERR if no match.
-static int _cmd_search_next(bview_t* bview, cursor_t* cursor, mark_t* search_mark, char* regex, int regex_len) {
+static int _cmd_search_next(bview_t *bview, cursor_t *cursor, mark_t *search_mark, char *regex, int regex_len) {
     int rc;
     rc = MLE_ERR;
 
@@ -1380,11 +1380,11 @@ static int _cmd_search_next(bview_t* bview, cursor_t* cursor, mark_t* search_mar
 }
 
 // Aproc callback that writes buf to bview buffer
-static void _cmd_aproc_bview_passthru_cb(aproc_t* aproc, char* buf, size_t buf_len) {
-    mark_t* active_mark;
-    mark_t* ins_mark;
+static void _cmd_aproc_bview_passthru_cb(aproc_t *aproc, char *buf, size_t buf_len) {
+    mark_t *active_mark;
+    mark_t *ins_mark;
     int is_cursor_at_zero;
-    bview_t* bview;
+    bview_t *bview;
 
     if (!buf || buf_len < 1) return;
 
@@ -1404,9 +1404,9 @@ static void _cmd_aproc_bview_passthru_cb(aproc_t* aproc, char* buf, size_t buf_l
 }
 
 // Incremental search prompt callback
-static void _cmd_isearch_prompt_cb(bview_t* bview_prompt, baction_t* action, void* udata) {
-    bview_t* bview;
-    char* regex;
+static void _cmd_isearch_prompt_cb(bview_t *bview_prompt, baction_t *action, void *udata) {
+    bview_t *bview;
+    char *regex;
     int regex_len;
     (void)action;
     (void)udata;
@@ -1433,10 +1433,10 @@ static void _cmd_isearch_prompt_cb(bview_t* bview_prompt, baction_t* action, voi
 }
 
 // Callback from cmd_grep
-static int _cmd_menu_grep_cb(cmd_context_t* ctx) {
+static int _cmd_menu_grep_cb(cmd_context_t *ctx) {
     bint_t linenum;
-    char* line;
-    char* colon;
+    char *line;
+    char *colon;
     line = strndup(ctx->bview->active_cursor->mark->bline->data, ctx->bview->active_cursor->mark->bline->data_len);
     colon = strchr(line, ':');
     if (colon == NULL) {
@@ -1455,17 +1455,17 @@ static int _cmd_menu_grep_cb(cmd_context_t* ctx) {
 }
 
 // Callback from cmd_ctag
-static int _cmd_menu_ctag_cb(cmd_context_t* ctx) {
-    char* line;
-    char* tok;
-    char* fname;
-    char* re;
-    char* qre;
-    char* qre2;
+static int _cmd_menu_ctag_cb(cmd_context_t *ctx) {
+    char *line;
+    char *tok;
+    char *fname;
+    char *re;
+    char *qre;
+    char *qre2;
     int re_len;
     int qre_len;
     int i;
-    bview_t* bview;
+    bview_t *bview;
     line = strndup(ctx->bview->active_cursor->mark->bline->data, ctx->bview->active_cursor->mark->bline->data_len);
     i = 0;
     fname = NULL;
@@ -1503,12 +1503,12 @@ static int _cmd_menu_ctag_cb(cmd_context_t* ctx) {
 }
 
 // Callback from cmd_browse
-static int _cmd_menu_browse_cb(cmd_context_t* ctx) {
-    char* line;
-    char* path;
+static int _cmd_menu_browse_cb(cmd_context_t *ctx) {
+    char *line;
+    char *path;
     char cwd[PATH_MAX];
-    char* corrected_path;
-    bview_t* new_bview;
+    char *corrected_path;
+    bview_t *new_bview;
 
     // Get path from tree output
     line = strndup(ctx->bview->active_cursor->mark->bline->data, ctx->bview->active_cursor->mark->bline->data_len);
@@ -1555,13 +1555,13 @@ static int _cmd_menu_browse_cb(cmd_context_t* ctx) {
 }
 
 // Insert newline when auto_indent is enabled (preserves or increases indent)
-static void _cmd_insert_auto_indent_newline(cmd_context_t* ctx) {
-    bline_t* prev_bline;
-    char* prev_line = NULL;
+static void _cmd_insert_auto_indent_newline(cmd_context_t *ctx) {
+    bline_t *prev_bline;
+    char *prev_line = NULL;
     bint_t prev_line_len;
-    char* indent;
+    char *indent;
     int indent_len;
-    char* tmp;
+    char *tmp;
     mark_insert_before(ctx->cursor->mark, "\n", 1);
     prev_bline = ctx->cursor->mark->bline->prev;
     prev_line = strndup(prev_bline->data, prev_bline->data_len);
@@ -1599,11 +1599,11 @@ static void _cmd_insert_auto_indent_newline(cmd_context_t* ctx) {
 }
 
 // Insert closing curly bracket when auto_indent is enabled (decreases indent)
-static void _cmd_insert_auto_indent_closing_bracket(cmd_context_t* ctx) {
-    char* this_line = NULL;
-    char* this_ws;
-    char* prev_line = NULL;
-    char* prev_ws;
+static void _cmd_insert_auto_indent_closing_bracket(cmd_context_t *ctx) {
+    char *this_line = NULL;
+    char *this_ws;
+    char *prev_line = NULL;
+    char *prev_ws;
     int this_line_len;
     int this_ws_len;
     int prev_line_len;
@@ -1642,10 +1642,10 @@ static void _cmd_insert_auto_indent_closing_bracket(cmd_context_t* ctx) {
 }
 
 // Apply cmd for each cursor
-static void _cmd_shell_apply_cmd(cmd_context_t* ctx, char* cmd) {
-    char* input;
+static void _cmd_shell_apply_cmd(cmd_context_t *ctx, char *cmd) {
+    char *input;
     bint_t input_len;
-    char* output;
+    char *output;
     size_t output_len;
 
     // Loop for each cursor
@@ -1676,7 +1676,7 @@ static void _cmd_shell_apply_cmd(cmd_context_t* ctx, char* cmd) {
 }
 
 // Get one kinput_t, saving original input on cmd_context_t
-static void _cmd_get_input(cmd_context_t* ctx, kinput_t* ret_input) {
+static void _cmd_get_input(cmd_context_t *ctx, kinput_t *ret_input) {
     kinput_t oinput;
     oinput = ctx->input;
     memset(ret_input, 0, sizeof(kinput_t));
diff --git a/cursor.c b/cursor.c
index 2192415..8050b11 100644
--- a/cursor.c
+++ b/cursor.c
@@ -3,8 +3,8 @@
 #include "mle.h"
 
 // Clone cursor
-int cursor_clone(cursor_t* cursor, int use_srules, cursor_t** ret_clone) {
-    cursor_t* clone;
+int cursor_clone(cursor_t *cursor, int use_srules, cursor_t **ret_clone) {
+    cursor_t *clone;
     bview_add_cursor(cursor->bview, cursor->mark->bline, cursor->mark->col, &clone);
     if (cursor->is_anchored) {
         cursor_toggle_anchor(clone, use_srules);
@@ -15,12 +15,12 @@ int cursor_clone(cursor_t* cursor, int use_srules, cursor_t** ret_clone) {
 }
 
 // Remove cursor
-int cursor_destroy(cursor_t* cursor) {
+int cursor_destroy(cursor_t *cursor) {
     return bview_remove_cursor(cursor->bview, cursor);
 }
 
 // Select by mark
-int cursor_select_between(cursor_t* cursor, mark_t* a, mark_t* b, int use_srules) {
+int cursor_select_between(cursor_t *cursor, mark_t *a, mark_t *b, int use_srules) {
     cursor_drop_anchor(cursor, use_srules);
     if (mark_is_lt(a, b)) {
         mark_join(cursor->mark, a);
@@ -33,7 +33,7 @@ int cursor_select_between(cursor_t* cursor, mark_t* a, mark_t* b, int use_srules
 }
 
 // Toggle cursor anchor
-int cursor_toggle_anchor(cursor_t* cursor, int use_srules) {
+int cursor_toggle_anchor(cursor_t *cursor, int use_srules) {
     if (!cursor->is_anchored) {
         mark_clone(cursor->mark, &(cursor->anchor));
         if (use_srules) {
@@ -54,19 +54,19 @@ int cursor_toggle_anchor(cursor_t* cursor, int use_srules) {
 }
 
 // Drop cursor anchor
-int cursor_drop_anchor(cursor_t* cursor, int use_srules) {
+int cursor_drop_anchor(cursor_t *cursor, int use_srules) {
     if (cursor->is_anchored) return MLE_OK;
     return cursor_toggle_anchor(cursor, use_srules);
 }
 
 // Lift cursor anchor
-int cursor_lift_anchor(cursor_t* cursor) {
+int cursor_lift_anchor(cursor_t *cursor) {
     if (!cursor->is_anchored) return MLE_OK;
     return cursor_toggle_anchor(cursor, cursor->sel_rule ? 1 : 0);
 }
 
 // Get lo and hi marks in a is_anchored=1 cursor
-int cursor_get_lo_hi(cursor_t* cursor, mark_t** ret_lo, mark_t** ret_hi) {
+int cursor_get_lo_hi(cursor_t *cursor, mark_t **ret_lo, mark_t **ret_hi) {
     if (!cursor->is_anchored) {
         return MLE_ERR;
     }
@@ -81,19 +81,19 @@ int cursor_get_lo_hi(cursor_t* cursor, mark_t** ret_lo, mark_t** ret_hi) {
 }
 
 // Get mark
-int cursor_get_mark(cursor_t* cursor, mark_t** ret_mark) {
+int cursor_get_mark(cursor_t *cursor, mark_t **ret_mark) {
     *ret_mark = cursor->mark;
     return MLE_OK;
 }
 
 // Get anchor if anchored
-int cursor_get_anchor(cursor_t* cursor, mark_t** ret_anchor) {
+int cursor_get_anchor(cursor_t *cursor, mark_t **ret_anchor) {
     *ret_anchor = cursor->is_anchored ? cursor->anchor : NULL;
     return MLE_OK;
 }
 
 // Make selection by strat
-int cursor_select_by(cursor_t* cursor, const char* strat) {
+int cursor_select_by(cursor_t *cursor, const char *strat) {
     if (cursor->is_anchored) {
         return MLE_ERR;
     }
@@ -120,8 +120,8 @@ int cursor_select_by(cursor_t* cursor, const char* strat) {
 }
 
 // Select by bracket
-int cursor_select_by_bracket(cursor_t* cursor) {
-    mark_t* orig;
+int cursor_select_by_bracket(cursor_t *cursor) {
+    mark_t *orig;
     mark_clone(cursor->mark, &orig);
     if (mark_move_bracket_top(cursor->mark, MLE_BRACKET_PAIR_MAX_SEARCH) != MLBUF_OK) {
         mark_destroy(orig);
@@ -140,7 +140,7 @@ int cursor_select_by_bracket(cursor_t* cursor) {
 }
 
 // Select by word-back
-int cursor_select_by_word_back(cursor_t* cursor) {
+int cursor_select_by_word_back(cursor_t *cursor) {
     if (mark_is_at_word_bound(cursor->mark, -1)) return MLE_ERR;
     cursor_toggle_anchor(cursor, 0);
     mark_move_prev_re(cursor->mark, MLE_RE_WORD_BACK, sizeof(MLE_RE_WORD_BACK)-1);
@@ -148,7 +148,7 @@ int cursor_select_by_word_back(cursor_t* cursor) {
 }
 
 // Select by word-forward
-int cursor_select_by_word_forward(cursor_t* cursor) {
+int cursor_select_by_word_forward(cursor_t *cursor) {
     if (mark_is_at_word_bound(cursor->mark, 1)) return MLE_ERR;
     cursor_toggle_anchor(cursor, 0);
     mark_move_next_re(cursor->mark, MLE_RE_WORD_FORWARD, sizeof(MLE_RE_WORD_FORWARD)-1);
@@ -156,10 +156,10 @@ int cursor_select_by_word_forward(cursor_t* cursor) {
 }
 
 // Select by string
-int cursor_select_by_string(cursor_t* cursor) {
-    mark_t* orig;
+int cursor_select_by_string(cursor_t *cursor) {
+    mark_t *orig;
     uint32_t qchar;
-    char* qre;
+    char *qre;
     mark_clone(cursor->mark, &orig);
     if (mark_move_prev_re(cursor->mark, "(?<!\\\\)[`'\"]", strlen("(?<!\\\\)[`'\"]")) != MLBUF_OK) {
         mark_destroy(orig);
@@ -186,7 +186,7 @@ int cursor_select_by_string(cursor_t* cursor) {
 }
 
 // Select by word
-int cursor_select_by_word(cursor_t* cursor) {
+int cursor_select_by_word(cursor_t *cursor) {
     uint32_t after;
     if (mark_is_at_eol(cursor->mark)) return MLE_ERR;
     mark_get_char_after(cursor->mark, &after);
@@ -200,8 +200,8 @@ int cursor_select_by_word(cursor_t* cursor) {
 }
 
 // Cut or copy text
-int cursor_cut_copy(cursor_t* cursor, int is_cut, int use_srules, int append) {
-    char* cutbuf;
+int cursor_cut_copy(cursor_t *cursor, int is_cut, int use_srules, int append) {
+    char *cutbuf;
     bint_t cutbuf_len;
     bint_t cur_len;
     if (!append && cursor->cut_buffer) {
@@ -234,8 +234,8 @@ int cursor_cut_copy(cursor_t* cursor, int is_cut, int use_srules, int append) {
 }
 
 // Uncut (paste) text
-int cursor_uncut(cursor_t* cursor) {
-    char* cut_buffer;
+int cursor_uncut(cursor_t *cursor) {
+    char *cut_buffer;
     cut_buffer = cursor->cut_buffer ? cursor->cut_buffer : cursor->bview->editor->cut_buffer;
     if (!cut_buffer) return MLE_ERR;
     mark_insert_before(cursor->mark, cut_buffer, strlen(cut_buffer));
@@ -243,20 +243,20 @@ int cursor_uncut(cursor_t* cursor) {
 }
 
 // Regex search and replace
-int cursor_replace(cursor_t* cursor, int interactive, char* opt_regex, char* opt_replacement) {
-    char* regex;
-    char* replacement;
+int cursor_replace(cursor_t *cursor, int interactive, char *opt_regex, char *opt_replacement) {
+    char *regex;
+    char *replacement;
     int wrapped;
     int all;
-    char* yn;
-    mark_t* lo_mark;
-    mark_t* hi_mark;
-    mark_t* orig_mark;
-    mark_t* search_mark;
-    mark_t* search_mark_end;
+    char *yn;
+    mark_t *lo_mark;
+    mark_t *hi_mark;
+    mark_t *orig_mark;
+    mark_t *search_mark;
+    mark_t *search_mark_end;
     int anchored_before;
-    srule_t* highlight;
-    bline_t* bline;
+    srule_t *highlight;
+    bline_t *bline;
     bint_t col;
     bint_t char_count;
     bint_t orig_viewport_y;
diff --git a/editor.c b/editor.c
index 1efa398..3efbf78 100644
--- a/editor.c
+++ b/editor.c
@@ -7,76 +7,76 @@
 #include "mle.h"
 #include "mlbuf.h"
 
-static int _editor_set_macro_toggle_key(editor_t* editor, char* key);
-static int _editor_bview_exists(editor_t* editor, bview_t* bview);
-static int _editor_register_cmd_fn(editor_t* editor, char* name, int (*func)(cmd_context_t* ctx));
-static int _editor_should_skip_rc(char** argv);
-static int _editor_close_bview_inner(editor_t* editor, bview_t* bview, int *optret_num_closed);
-static int _editor_destroy_cmd(editor_t* editor, cmd_t* cmd);
-static int _editor_prompt_input_submit(cmd_context_t* ctx);
-static int _editor_prompt_input_complete(cmd_context_t* ctx);
-static prompt_history_t* _editor_prompt_find_or_add_history(cmd_context_t* ctx, prompt_hnode_t** optret_prompt_hnode);
-static int _editor_prompt_history_up(cmd_context_t* ctx);
-static int _editor_prompt_history_down(cmd_context_t* ctx);
-static int _editor_prompt_history_append(cmd_context_t* ctx, char* data);
-static int _editor_prompt_yna_all(cmd_context_t* ctx);
-static int _editor_prompt_yn_yes(cmd_context_t* ctx);
-static int _editor_prompt_yn_no(cmd_context_t* ctx);
-static int _editor_prompt_cancel(cmd_context_t* ctx);
-static int _editor_menu_submit(cmd_context_t* ctx);
-static int _editor_menu_cancel(cmd_context_t* ctx);
-static int _editor_prompt_menu_up(cmd_context_t* ctx);
-static int _editor_prompt_menu_down(cmd_context_t* ctx);
-static int _editor_prompt_menu_page_up(cmd_context_t* ctx);
-static int _editor_prompt_menu_page_down(cmd_context_t* ctx);
-static int _editor_prompt_isearch_drop_cursors(cmd_context_t* ctx);
-static int _editor_prompt_isearch_next(cmd_context_t* ctx);
-static int _editor_prompt_isearch_prev(cmd_context_t* ctx);
-static int _editor_prompt_isearch_viewport_down(cmd_context_t* ctx);
-static int _editor_prompt_isearch_viewport_up(cmd_context_t* ctx);
-static void _editor_loop(editor_t* editor, loop_context_t* loop_ctx);
-static void _editor_refresh_cmd_context(editor_t* editor, cmd_context_t* ctx);
-static void _editor_notify_cmd_observers(cmd_context_t* ctx, int is_before);
-static int _editor_maybe_toggle_macro(editor_t* editor, kinput_t* input);
-static void _editor_resize(editor_t* editor, int w, int h);
-static void _editor_draw_cursors(editor_t* editor, bview_t* bview);
-static void _editor_get_user_input(editor_t* editor, cmd_context_t* ctx);
-static void _editor_ingest_paste(editor_t* editor, cmd_context_t* ctx);
-static void _editor_record_macro_input(kmacro_t* macro, kinput_t* input);
-static cmd_t* _editor_get_command(editor_t* editor, cmd_context_t* ctx, kinput_t* opt_peek_input);
-static kbinding_t* _editor_get_kbinding_node(kbinding_t* node, kinput_t* input, loop_context_t* loop_ctx, int is_peek, int* ret_again);
-static cmd_t* _editor_resolve_cmd(editor_t* editor, cmd_t** rcmd, char* cmd_name);
-static int _editor_key_to_input(char* key, kinput_t* ret_input);
-static void _editor_init_signal_handlers(editor_t* editor);
+static int _editor_set_macro_toggle_key(editor_t *editor, char *key);
+static int _editor_bview_exists(editor_t *editor, bview_t *bview);
+static int _editor_register_cmd_fn(editor_t *editor, char *name, int (*func)(cmd_context_t *ctx));
+static int _editor_should_skip_rc(char **argv);
+static int _editor_close_bview_inner(editor_t *editor, bview_t *bview, int *optret_num_closed);
+static int _editor_destroy_cmd(editor_t *editor, cmd_t *cmd);
+static int _editor_prompt_input_submit(cmd_context_t *ctx);
+static int _editor_prompt_input_complete(cmd_context_t *ctx);
+static prompt_history_t *_editor_prompt_find_or_add_history(cmd_context_t *ctx, prompt_hnode_t **optret_prompt_hnode);
+static int _editor_prompt_history_up(cmd_context_t *ctx);
+static int _editor_prompt_history_down(cmd_context_t *ctx);
+static int _editor_prompt_history_append(cmd_context_t *ctx, char *data);
+static int _editor_prompt_yna_all(cmd_context_t *ctx);
+static int _editor_prompt_yn_yes(cmd_context_t *ctx);
+static int _editor_prompt_yn_no(cmd_context_t *ctx);
+static int _editor_prompt_cancel(cmd_context_t *ctx);
+static int _editor_menu_submit(cmd_context_t *ctx);
+static int _editor_menu_cancel(cmd_context_t *ctx);
+static int _editor_prompt_menu_up(cmd_context_t *ctx);
+static int _editor_prompt_menu_down(cmd_context_t *ctx);
+static int _editor_prompt_menu_page_up(cmd_context_t *ctx);
+static int _editor_prompt_menu_page_down(cmd_context_t *ctx);
+static int _editor_prompt_isearch_drop_cursors(cmd_context_t *ctx);
+static int _editor_prompt_isearch_next(cmd_context_t *ctx);
+static int _editor_prompt_isearch_prev(cmd_context_t *ctx);
+static int _editor_prompt_isearch_viewport_down(cmd_context_t *ctx);
+static int _editor_prompt_isearch_viewport_up(cmd_context_t *ctx);
+static void _editor_loop(editor_t *editor, loop_context_t *loop_ctx);
+static void _editor_refresh_cmd_context(editor_t *editor, cmd_context_t *ctx);
+static void _editor_notify_cmd_observers(cmd_context_t *ctx, int is_before);
+static int _editor_maybe_toggle_macro(editor_t *editor, kinput_t *input);
+static void _editor_resize(editor_t *editor, int w, int h);
+static void _editor_draw_cursors(editor_t *editor, bview_t *bview);
+static void _editor_get_user_input(editor_t *editor, cmd_context_t *ctx);
+static void _editor_ingest_paste(editor_t *editor, cmd_context_t *ctx);
+static void _editor_record_macro_input(kmacro_t *macro, kinput_t *input);
+static cmd_t *_editor_get_command(editor_t *editor, cmd_context_t *ctx, kinput_t *opt_peek_input);
+static kbinding_t *_editor_get_kbinding_node(kbinding_t *node, kinput_t *input, loop_context_t *loop_ctx, int is_peek, int *ret_again);
+static cmd_t *_editor_resolve_cmd(editor_t *editor, cmd_t **rcmd, char *cmd_name);
+static int _editor_key_to_input(char *key, kinput_t *ret_input);
+static void _editor_init_signal_handlers(editor_t *editor);
 static void _editor_graceful_exit(int signum);
-static void _editor_register_cmds(editor_t* editor);
-static void _editor_init_kmaps(editor_t* editor);
-static void _editor_init_kmap(editor_t* editor, kmap_t** ret_kmap, char* name, char* default_cmd_name, int allow_fallthru, kbinding_def_t* defs);
-static void _editor_init_kmap_add_binding(editor_t* editor, kmap_t* kmap, kbinding_def_t* binding_def);
-static int _editor_init_kmap_add_binding_to_trie(kbinding_t** trie, char* cmd_name, char* cur_key_patt, char* full_key_patt, char* static_param);
-static int _editor_init_kmap_by_str(editor_t* editor, kmap_t** ret_kmap, char* str);
-static int _editor_init_kmap_add_binding_by_str(editor_t* editor, kmap_t* kmap, char* str);
-static void _editor_destroy_kmap(kmap_t* kmap, kbinding_t* trie);
-static int _editor_add_macro_by_str(editor_t* editor, char* str);
-static void _editor_init_syntaxes(editor_t* editor);
-static void _editor_init_syntax(editor_t* editor, syntax_t** optret_syntax, char* name, char* path_pattern, int tab_width, int tab_to_space, srule_def_t* defs);
-static int _editor_init_syntax_by_str(editor_t* editor, syntax_t** ret_syntax, char* str);
-static void _editor_init_syntax_add_rule(syntax_t* syntax, srule_def_t* def);
-static int _editor_init_syntax_add_rule_by_str(syntax_t* syntax, char* str);
-static void _editor_destroy_syntax_map(syntax_t* map);
-static int _editor_init_from_rc_read(editor_t* editor, FILE* rc, char** ret_rc_data, size_t* ret_rc_data_len);
-static int _editor_init_from_rc_exec(editor_t* editor, char* rc_path, char** ret_rc_data, size_t* ret_rc_data_len);
-static int _editor_init_from_rc(editor_t* editor, FILE* rc, char* rc_path);
-static int _editor_init_from_args(editor_t* editor, int argc, char** argv);
-static void _editor_init_status(editor_t* editor);
-static void _editor_init_bviews(editor_t* editor, int argc, char** argv);
-static int _editor_init_headless_mode(editor_t* editor);
-static int _editor_init_startup_macro(editor_t* editor);
+static void _editor_register_cmds(editor_t *editor);
+static void _editor_init_kmaps(editor_t *editor);
+static void _editor_init_kmap(editor_t *editor, kmap_t **ret_kmap, char *name, char *default_cmd_name, int allow_fallthru, kbinding_def_t *defs);
+static void _editor_init_kmap_add_binding(editor_t *editor, kmap_t *kmap, kbinding_def_t *binding_def);
+static int _editor_init_kmap_add_binding_to_trie(kbinding_t **trie, char *cmd_name, char *cur_key_patt, char *full_key_patt, char *static_param);
+static int _editor_init_kmap_by_str(editor_t *editor, kmap_t **ret_kmap, char *str);
+static int _editor_init_kmap_add_binding_by_str(editor_t *editor, kmap_t *kmap, char *str);
+static void _editor_destroy_kmap(kmap_t *kmap, kbinding_t *trie);
+static int _editor_add_macro_by_str(editor_t *editor, char *str);
+static void _editor_init_syntaxes(editor_t *editor);
+static void _editor_init_syntax(editor_t *editor, syntax_t **optret_syntax, char *name, char *path_pattern, int tab_width, int tab_to_space, srule_def_t *defs);
+static int _editor_init_syntax_by_str(editor_t *editor, syntax_t **ret_syntax, char *str);
+static void _editor_init_syntax_add_rule(syntax_t *syntax, srule_def_t *def);
+static int _editor_init_syntax_add_rule_by_str(syntax_t *syntax, char *str);
+static void _editor_destroy_syntax_map(syntax_t *map);
+static int _editor_init_from_rc_read(editor_t *editor, FILE *rc, char **ret_rc_data, size_t *ret_rc_data_len);
+static int _editor_init_from_rc_exec(editor_t *editor, char *rc_path, char **ret_rc_data, size_t *ret_rc_data_len);
+static int _editor_init_from_rc(editor_t *editor, FILE *rc, char *rc_path);
+static int _editor_init_from_args(editor_t *editor, int argc, char **argv);
+static void _editor_init_status(editor_t *editor);
+static void _editor_init_bviews(editor_t *editor, int argc, char **argv);
+static int _editor_init_headless_mode(editor_t *editor);
+static int _editor_init_startup_macro(editor_t *editor);
 
 // Init editor from args
-int editor_init(editor_t* editor, int argc, char** argv) {
+int editor_init(editor_t *editor, int argc, char **argv) {
     int rv;
-    FILE* rc;
+    FILE *rc;
     char *home_rc;
     rv = MLE_OK;
     do {
@@ -149,7 +149,7 @@ int editor_init(editor_t* editor, int argc, char** argv) {
 }
 
 // Run editor
-int editor_run(editor_t* editor) {
+int editor_run(editor_t *editor) {
     loop_context_t loop_ctx;
     memset(&loop_ctx, 0, sizeof(loop_context_t));
     _editor_resize(editor, -1, -1);
@@ -158,23 +158,23 @@ int editor_run(editor_t* editor) {
 }
 
 // Deinit editor
-int editor_deinit(editor_t* editor) {
-    bview_t* bview;
-    bview_t* bview_tmp1;
-    bview_t* bview_tmp2;
-    kmap_t* kmap;
-    kmap_t* kmap_tmp;
-    kmacro_t* macro;
-    kmacro_t* macro_tmp;
-    cmd_t* cmd;
-    cmd_t* cmd_tmp;
-    prompt_history_t* prompt_history;
-    prompt_history_t* prompt_history_tmp;
-    prompt_hnode_t* prompt_hnode;
-    prompt_hnode_t* prompt_hnode_tmp1;
-    prompt_hnode_t* prompt_hnode_tmp2;
-    observer_t* observer;
-    observer_t* observer_tmp;
+int editor_deinit(editor_t *editor) {
+    bview_t *bview;
+    bview_t *bview_tmp1;
+    bview_t *bview_tmp2;
+    kmap_t *kmap;
+    kmap_t *kmap_tmp;
+    kmacro_t *macro;
+    kmacro_t *macro_tmp;
+    cmd_t *cmd;
+    cmd_t *cmd_tmp;
+    prompt_history_t *prompt_history;
+    prompt_history_t *prompt_history_tmp;
+    prompt_hnode_t *prompt_hnode;
+    prompt_hnode_t *prompt_hnode_tmp1;
+    prompt_hnode_t *prompt_hnode_tmp2;
+    observer_t *observer;
+    observer_t *observer_tmp;
     if (editor->status) bview_destroy(editor->status);
     CDL_FOREACH_SAFE2(editor->all_bviews, bview, bview_tmp1, bview_tmp2, all_prev, all_next) {
         CDL_DELETE2(editor->all_bviews, bview, all_prev, all_next);
@@ -225,8 +225,8 @@ int editor_deinit(editor_t* editor) {
 }
 
 // Prompt user for input
-int editor_prompt(editor_t* editor, char* prompt, editor_prompt_params_t* params, char** optret_answer) {
-    bview_t* bview_tmp;
+int editor_prompt(editor_t *editor, char *prompt, editor_prompt_params_t *params, char **optret_answer) {
+    bview_t *bview_tmp;
     loop_context_t loop_ctx;
     memset(&loop_ctx, 0, sizeof(loop_context_t));
 
@@ -274,8 +274,8 @@ int editor_prompt(editor_t* editor, char* prompt, editor_prompt_params_t* params
 }
 
 // Open dialog menu
-int editor_menu(editor_t* editor, cmd_func_t callback, char* opt_buf_data, int opt_buf_data_len, aproc_t* opt_aproc, bview_t** optret_menu) {
-    bview_t* menu;
+int editor_menu(editor_t *editor, cmd_func_t callback, char *opt_buf_data, int opt_buf_data_len, aproc_t *opt_aproc, bview_t **optret_menu) {
+    bview_t *menu;
     editor_open_bview(editor, NULL, MLE_BVIEW_TYPE_EDIT, NULL, 0, 1, 0, 0, NULL, &menu);
     menu->is_menu = 1;
     menu->menu_callback = callback;
@@ -291,9 +291,9 @@ int editor_menu(editor_t* editor, cmd_func_t callback, char* opt_buf_data, int o
 }
 
 // Open a bview
-int editor_open_bview(editor_t* editor, bview_t* opt_parent, int type, char* opt_path, int opt_path_len, int make_active, bint_t linenum, int skip_resize, buffer_t* opt_buffer, bview_t** optret_bview) {
-    bview_t* bview;
-    bview_rect_t* rect;
+int editor_open_bview(editor_t *editor, bview_t *opt_parent, int type, char *opt_path, int opt_path_len, int make_active, bint_t linenum, int skip_resize, buffer_t *opt_buffer, bview_t **optret_bview) {
+    bview_t *bview;
+    bview_rect_t *rect;
     int found;
     found = 0;
     // Check if already open and not dirty
@@ -355,7 +355,7 @@ int editor_open_bview(editor_t* editor, bview_t* opt_parent, int type, char* opt
 }
 
 // Close a bview
-int editor_close_bview(editor_t* editor, bview_t* bview, int* optret_num_closed) {
+int editor_close_bview(editor_t *editor, bview_t *bview, int *optret_num_closed) {
     int rc;
     if (optret_num_closed) *optret_num_closed = 0;
     if ((rc = _editor_close_bview_inner(editor, bview, optret_num_closed)) == MLE_OK) {
@@ -365,7 +365,7 @@ int editor_close_bview(editor_t* editor, bview_t* bview, int* optret_num_closed)
 }
 
 // Set the active bview
-int editor_set_active(editor_t* editor, bview_t* bview) {
+int editor_set_active(editor_t *editor, bview_t *bview) {
     if (!_editor_bview_exists(editor, bview)) {
         MLE_RETURN_ERR(editor, "No bview %p in editor->all_bviews", (void*)bview);
     } else if (editor->prompt) {
@@ -381,10 +381,10 @@ int editor_set_active(editor_t* editor, bview_t* bview) {
 }
 
 // Print debug info
-int editor_debug_dump(editor_t* editor, FILE* fp) {
-    bview_t* bview;
-    cursor_t* cursor;
-    buffer_t* buffer;
+int editor_debug_dump(editor_t *editor, FILE *fp) {
+    bview_t *bview;
+    cursor_t *cursor;
+    buffer_t *buffer;
     int bview_index;
     int cursor_index;
     bview_index = 0;
@@ -417,7 +417,7 @@ int editor_debug_dump(editor_t* editor, FILE* fp) {
 }
 
 // Given a kinput, put the key name in keybuf
-int editor_input_to_key(editor_t* editor, kinput_t* input, char* keybuf) {
+int editor_input_to_key(editor_t *editor, kinput_t *input, char *keybuf) {
     int nbytes;
     (void)editor;
     #define MLE_KEY_DEF(pckey, pmod, pch, pkey) \
@@ -438,13 +438,13 @@ int editor_input_to_key(editor_t* editor, kinput_t* input, char* keybuf) {
 }
 
 // Set macro toggle key
-static int _editor_set_macro_toggle_key(editor_t* editor, char* key) {
+static int _editor_set_macro_toggle_key(editor_t *editor, char *key) {
     return _editor_key_to_input(key, &editor->macro_toggle_key);
 }
 
 // Return 1 if bview exists in editor, else return 0
-static int _editor_bview_exists(editor_t* editor, bview_t* bview) {
-    bview_t* tmp;
+static int _editor_bview_exists(editor_t *editor, bview_t *bview) {
+    bview_t *tmp;
     CDL_FOREACH2(editor->all_bviews, tmp, all_next) {
         if (tmp == bview) return 1;
     }
@@ -452,9 +452,9 @@ static int _editor_bview_exists(editor_t* editor, bview_t* bview) {
 }
 
 // Return number of EDIT bviews open
-int editor_bview_edit_count(editor_t* editor) {
+int editor_bview_edit_count(editor_t *editor) {
     int count;
-    bview_t* bview;
+    bview_t *bview;
     count = 0;
     CDL_FOREACH2(editor->all_bviews, bview, all_next) {
         if (MLE_BVIEW_IS_EDIT(bview)) count += 1;
@@ -463,9 +463,9 @@ int editor_bview_edit_count(editor_t* editor) {
 }
 
 // Return number of bviews displaying buffer
-int editor_count_bviews_by_buffer(editor_t* editor, buffer_t* buffer) {
+int editor_count_bviews_by_buffer(editor_t *editor, buffer_t *buffer) {
     int count;
-    bview_t* bview;
+    bview_t *bview;
     count = 0;
     CDL_FOREACH2(editor->all_bviews, bview, all_next) {
         if (bview->buffer == buffer) count += 1;
@@ -474,7 +474,7 @@ int editor_count_bviews_by_buffer(editor_t* editor, buffer_t* buffer) {
 }
 
 // Register a command
-static int _editor_register_cmd_fn(editor_t* editor, char* name, int (*func)(cmd_context_t* ctx)) {
+static int _editor_register_cmd_fn(editor_t *editor, char *name, int (*func)(cmd_context_t *ctx)) {
     cmd_t cmd = {0};
     cmd.name = name;
     cmd.func = func;
@@ -482,9 +482,9 @@ static int _editor_register_cmd_fn(editor_t* editor, char* name, int (*func)(cmd
 }
 
 // Register a command (extended)
-int editor_register_cmd(editor_t* editor, cmd_t* cmd) {
-    cmd_t* existing_cmd;
-    cmd_t* new_cmd;
+int editor_register_cmd(editor_t *editor, cmd_t *cmd) {
+    cmd_t *existing_cmd;
+    cmd_t *new_cmd;
     HASH_FIND_STR(editor->cmd_map, cmd->name, existing_cmd);
     if (existing_cmd) return MLE_ERR;
     new_cmd = calloc(1, sizeof(cmd_t));
@@ -495,7 +495,7 @@ int editor_register_cmd(editor_t* editor, cmd_t* cmd) {
 }
 
 // Get input from either macro or user
-int editor_get_input(editor_t* editor, loop_context_t* loop_ctx, cmd_context_t* ctx) {
+int editor_get_input(editor_t *editor, loop_context_t *loop_ctx, cmd_context_t *ctx) {
     ctx->is_user_input = 0;
     if (editor->macro_apply
         && editor->macro_apply_input_index < editor->macro_apply->inputs_len
@@ -528,8 +528,8 @@ int editor_get_input(editor_t* editor, loop_context_t* loop_ctx, cmd_context_t*
 }
 
 // Display the editor
-int editor_display(editor_t* editor) {
-    bview_t* bview;
+int editor_display(editor_t *editor) {
+    bview_t *bview;
     if (editor->headless_mode) return MLE_OK;
     tb_clear();
     bview_draw(editor->active_edit_root);
@@ -543,8 +543,8 @@ int editor_display(editor_t* editor) {
 }
 
 // Register a cmd observer
-int editor_register_observer(editor_t* editor, char* event_name, void* udata, observer_func_t fn_callback, observer_t** optret_observer) {
-    observer_t* observer;
+int editor_register_observer(editor_t *editor, char *event_name, void *udata, observer_func_t fn_callback, observer_t **optret_observer) {
+    observer_t *observer;
     observer = calloc(1, sizeof(observer_t));
     observer->event_name = strdup(event_name);
     observer->callback = fn_callback;
@@ -555,7 +555,7 @@ int editor_register_observer(editor_t* editor, char* event_name, void* udata, ob
 }
 
 // Register a cmd observer
-int editor_destroy_observer(editor_t* editor, observer_t* observer) {
+int editor_destroy_observer(editor_t *editor, observer_t *observer) {
     DL_DELETE(editor->observers, observer);
     free(observer->event_name);
     free(observer);
@@ -563,7 +563,7 @@ int editor_destroy_observer(editor_t* editor, observer_t* observer) {
 }
 
 // Return 1 if we should skip reading rc files
-static int _editor_should_skip_rc(char** argv) {
+static int _editor_should_skip_rc(char **argv) {
     int skip = 0;
     while (*argv) {
         if (strcmp("-h", *argv) == 0 || strcmp("-N", *argv) == 0) {
@@ -576,7 +576,7 @@ static int _editor_should_skip_rc(char** argv) {
 }
 
 // Close a bview
-static int _editor_close_bview_inner(editor_t* editor, bview_t* bview, int *optret_num_closed) {
+static int _editor_close_bview_inner(editor_t *editor, bview_t *bview, int *optret_num_closed) {
     if (!_editor_bview_exists(editor, bview)) {
         MLE_RETURN_ERR(editor, "No bview %p in editor->all_bviews", (void*)bview);
     }
@@ -605,7 +605,7 @@ static int _editor_close_bview_inner(editor_t* editor, bview_t* bview, int *optr
 }
 
 // Destroy a command
-static int _editor_destroy_cmd(editor_t* editor, cmd_t* cmd) {
+static int _editor_destroy_cmd(editor_t *editor, cmd_t *cmd) {
     (void)editor;
     free(cmd->name);
     free(cmd);
@@ -613,9 +613,9 @@ static int _editor_destroy_cmd(editor_t* editor, cmd_t* cmd) {
 }
 
 // Invoked when user hits enter in a prompt_input
-static int _editor_prompt_input_submit(cmd_context_t* ctx) {
+static int _editor_prompt_input_submit(cmd_context_t *ctx) {
     bint_t answer_len;
-    char* answer;
+    char *answer;
     buffer_get(ctx->bview->buffer, &answer, &answer_len);
     ctx->loop_ctx->prompt_answer = strndup(answer, answer_len);
     _editor_prompt_history_append(ctx, ctx->loop_ctx->prompt_answer);
@@ -624,15 +624,15 @@ static int _editor_prompt_input_submit(cmd_context_t* ctx) {
 }
 
 // Invoke when user hits tab in a prompt_input
-static int _editor_prompt_input_complete(cmd_context_t* ctx) {
-    loop_context_t* loop_ctx;
+static int _editor_prompt_input_complete(cmd_context_t *ctx) {
+    loop_context_t *loop_ctx;
     loop_ctx = ctx->loop_ctx;
-    char* cmd;
-    char* cmd_arg;
-    char* terms;
+    char *cmd;
+    char *cmd_arg;
+    char *terms;
     size_t terms_len;
     int num_terms;
-    char* term;
+    char *term;
     int term_index;
 
     // Update tab_complete_term and tab_complete_index
@@ -701,8 +701,8 @@ static int _editor_prompt_input_complete(cmd_context_t* ctx) {
 }
 
 // Find or add a prompt history entry for the current prompt
-static prompt_history_t* _editor_prompt_find_or_add_history(cmd_context_t* ctx, prompt_hnode_t** optret_prompt_hnode) {
-    prompt_history_t* prompt_history;
+static prompt_history_t *_editor_prompt_find_or_add_history(cmd_context_t *ctx, prompt_hnode_t **optret_prompt_hnode) {
+    prompt_history_t *prompt_history;
     HASH_FIND_STR(ctx->editor->prompt_history, ctx->bview->prompt_str, prompt_history);
     if (!prompt_history) {
         prompt_history = calloc(1, sizeof(prompt_history_t));
@@ -721,8 +721,8 @@ static prompt_history_t* _editor_prompt_find_or_add_history(cmd_context_t* ctx,
 }
 
 // Prompt history up
-static int _editor_prompt_history_up(cmd_context_t* ctx) {
-    prompt_hnode_t* prompt_hnode;
+static int _editor_prompt_history_up(cmd_context_t *ctx) {
+    prompt_hnode_t *prompt_hnode;
     _editor_prompt_find_or_add_history(ctx, &prompt_hnode);
     if (prompt_hnode) {
         ctx->loop_ctx->prompt_hnode = prompt_hnode->prev;
@@ -732,8 +732,8 @@ static int _editor_prompt_history_up(cmd_context_t* ctx) {
 }
 
 // Prompt history down
-static int _editor_prompt_history_down(cmd_context_t* ctx) {
-    prompt_hnode_t* prompt_hnode;
+static int _editor_prompt_history_down(cmd_context_t *ctx) {
+    prompt_hnode_t *prompt_hnode;
     _editor_prompt_find_or_add_history(ctx, &prompt_hnode);
     if (prompt_hnode) {
         ctx->loop_ctx->prompt_hnode = prompt_hnode->next;
@@ -743,9 +743,9 @@ static int _editor_prompt_history_down(cmd_context_t* ctx) {
 }
 
 // Prompt history append
-static int _editor_prompt_history_append(cmd_context_t* ctx, char* data) {
-    prompt_history_t* prompt_history;
-    prompt_hnode_t* prompt_hnode;
+static int _editor_prompt_history_append(cmd_context_t *ctx, char *data) {
+    prompt_history_t *prompt_history;
+    prompt_hnode_t *prompt_hnode;
     prompt_history = _editor_prompt_find_or_add_history(ctx, NULL);
     prompt_hnode = calloc(1, sizeof(prompt_hnode_t));
     prompt_hnode->data = strdup(data);
@@ -755,75 +755,75 @@ static int _editor_prompt_history_append(cmd_context_t* ctx, char* data) {
 }
 
 // Invoked when user hits a in a prompt_yna
-static int _editor_prompt_yna_all(cmd_context_t* ctx) {
+static int _editor_prompt_yna_all(cmd_context_t *ctx) {
     ctx->loop_ctx->prompt_answer = MLE_PROMPT_ALL;
     ctx->loop_ctx->should_exit = 1;
     return MLE_OK;
 }
 
 // Invoked when user hits y in a prompt_yn(a)
-static int _editor_prompt_yn_yes(cmd_context_t* ctx) {
+static int _editor_prompt_yn_yes(cmd_context_t *ctx) {
     ctx->loop_ctx->prompt_answer = MLE_PROMPT_YES;
     ctx->loop_ctx->should_exit = 1;
     return MLE_OK;
 }
 
 // Invoked when user hits n in a prompt_yn(a)
-static int _editor_prompt_yn_no(cmd_context_t* ctx) {
+static int _editor_prompt_yn_no(cmd_context_t *ctx) {
     ctx->loop_ctx->prompt_answer = MLE_PROMPT_NO;
     ctx->loop_ctx->should_exit = 1;
     return MLE_OK;
 }
 
 // Invoked when user cancels (Ctrl-C) a prompt_(input|yn), or hits any key in a prompt_ok
-static int _editor_prompt_cancel(cmd_context_t* ctx) {
+static int _editor_prompt_cancel(cmd_context_t *ctx) {
     ctx->loop_ctx->prompt_answer = NULL;
     ctx->loop_ctx->should_exit = 1;
     return MLE_OK;
 }
 
 // Invoked when user hits enter in a menu
-static int _editor_menu_submit(cmd_context_t* ctx) {
+static int _editor_menu_submit(cmd_context_t *ctx) {
     if (ctx->bview->menu_callback) return ctx->bview->menu_callback(ctx);
     return MLE_OK;
 }
 
 // Invoked when user hits C-c in a menu
-static int _editor_menu_cancel(cmd_context_t* ctx) {
+static int _editor_menu_cancel(cmd_context_t *ctx) {
     if (ctx->bview->aproc) aproc_destroy(ctx->bview->aproc, 1);
     return MLE_OK;
 }
 
 // Invoked when user hits up in a prompt_menu
-static int _editor_prompt_menu_up(cmd_context_t* ctx) {
+static int _editor_prompt_menu_up(cmd_context_t *ctx) {
     mark_move_vert(ctx->editor->active_edit->active_cursor->mark, -1);
     bview_rectify_viewport(ctx->editor->active_edit);
     return MLE_OK;
 }
 
 // Invoked when user hits down in a prompt_menu
-static int _editor_prompt_menu_down(cmd_context_t* ctx) {
+static int _editor_prompt_menu_down(cmd_context_t *ctx) {
     mark_move_vert(ctx->editor->active_edit->active_cursor->mark, 1);
     bview_rectify_viewport(ctx->editor->active_edit);
     return MLE_OK;
 }
 
 // Invoked when user hits page-up in a prompt_menu
-static int _editor_prompt_menu_page_up(cmd_context_t* ctx) {
+static int _editor_prompt_menu_page_up(cmd_context_t *ctx) {
     mark_move_vert(ctx->editor->active_edit->active_cursor->mark, -1 * ctx->editor->active_edit->rect_buffer.h);
     bview_zero_viewport_y(ctx->editor->active_edit);
     return MLE_OK;
 }
 
 // Invoked when user hits page-down in a prompt_menu
-static int _editor_prompt_menu_page_down(cmd_context_t* ctx) {
+static int _editor_prompt_menu_page_down(cmd_context_t *ctx) {
     mark_move_vert(ctx->editor->active_edit->active_cursor->mark, ctx->editor->active_edit->rect_buffer.h);
     bview_zero_viewport_y(ctx->editor->active_edit);
     return MLE_OK;
 }
 
 // Invoked when user hits down in a prompt_isearch
-static int _editor_prompt_isearch_next(cmd_context_t* ctx) {
+static int _editor_prompt_isearch_next(cmd_context_t *ctx) {
     if (ctx->editor->active_edit->isearch_rule) {
         mark_move_next_cre_nudge(ctx->editor->active_edit->active_cursor->mark, ctx->editor->active_edit->isearch_rule->cre);
         bview_center_viewport_y(ctx->editor->active_edit);
@@ -832,7 +832,7 @@ static int _editor_prompt_isearch_next(cmd_context_t* ctx) {
 }
 
 // Invoked when user hits up in a prompt_isearch
-static int _editor_prompt_isearch_prev(cmd_context_t* ctx) {
+static int _editor_prompt_isearch_prev(cmd_context_t *ctx) {
     if (ctx->editor->active_edit->isearch_rule) {
         mark_move_prev_cre(ctx->editor->active_edit->active_cursor->mark, ctx->editor->active_edit->isearch_rule->cre);
         bview_center_viewport_y(ctx->editor->active_edit);
@@ -841,22 +841,22 @@ static int _editor_prompt_isearch_prev(cmd_context_t* ctx) {
 }
 
 // Invoked when user hits up in a prompt_isearch
-static int _editor_prompt_isearch_viewport_up(cmd_context_t* ctx) {
+static int _editor_prompt_isearch_viewport_up(cmd_context_t *ctx) {
     return bview_set_viewport_y(ctx->editor->active_edit, ctx->editor->active_edit->viewport_y - 5, 0);
 }
 
 // Invoked when user hits up in a prompt_isearch
-static int _editor_prompt_isearch_viewport_down(cmd_context_t* ctx) {
+static int _editor_prompt_isearch_viewport_down(cmd_context_t *ctx) {
     return bview_set_viewport_y(ctx->editor->active_edit, ctx->editor->active_edit->viewport_y + 5, 0);
 }
 
 // Drops a cursor on each isearch match
-static int _editor_prompt_isearch_drop_cursors(cmd_context_t* ctx) {
-    bview_t* bview;
-    mark_t* mark;
-    pcre* cre;
-    cursor_t* orig_cursor;
-    cursor_t* last_cursor;
+static int _editor_prompt_isearch_drop_cursors(cmd_context_t *ctx) {
+    bview_t *bview;
+    mark_t *mark;
+    pcre *cre;
+    cursor_t *orig_cursor;
+    cursor_t *last_cursor;
     bint_t nchars;
     bview = ctx->editor->active_edit;
     if (!bview->isearch_rule) return MLE_OK;
@@ -881,8 +881,8 @@ static int _editor_prompt_isearch_drop_cursors(cmd_context_t* ctx) {
 }
 
 // Run editor loop
-static void _editor_loop(editor_t* editor, loop_context_t* loop_ctx) {
-    cmd_t* cmd;
+static void _editor_loop(editor_t *editor, loop_context_t *loop_ctx) {
+    cmd_t *cmd;
     cmd_context_t cmd_ctx;
 
     // Increment loop_depth
@@ -964,15 +964,15 @@ static void _editor_loop(editor_t* editor, loop_context_t* loop_ctx) {
 }
 
 // Set fresh values on cmd_context
-static void _editor_refresh_cmd_context(editor_t* editor, cmd_context_t* cmd_ctx) {
+static void _editor_refresh_cmd_context(editor_t *editor, cmd_context_t *cmd_ctx) {
     cmd_ctx->cursor = editor->active->active_cursor;
     cmd_ctx->bview = cmd_ctx->cursor->bview;
     cmd_ctx->buffer = cmd_ctx->bview->buffer;
 }
 
 // Notify cmd observers
-static void _editor_notify_cmd_observers(cmd_context_t* ctx, int is_before) {
-    char* event_name;
+static void _editor_notify_cmd_observers(cmd_context_t *ctx, int is_before) {
+    char *event_name;
     asprintf(&event_name, "cmd:%s:%s", ctx->cmd->name, is_before ? "before" : "after");
     _editor_refresh_cmd_context(ctx->editor, ctx);
     editor_notify_observers(ctx->editor, event_name, (void*)ctx);
@@ -980,8 +980,8 @@ static void _editor_notify_cmd_observers(cmd_context_t* ctx, int is_before) {
 }
 
 // Notify observers
-int editor_notify_observers(editor_t* editor, char* event_name, void* event_data) {
-    observer_t* observer;
+int editor_notify_observers(editor_t *editor, char *event_name, void *event_data) {
+    observer_t *observer;
     // TODO implement as hash lookup
     DL_FOREACH(editor->observers, observer) {
         if (strcmp(event_name, observer->event_name) == 0) {
@@ -993,8 +993,8 @@ int editor_notify_observers(editor_t* editor, char* event_name, void* event_data
 
 // If input == editor->macro_toggle_key, toggle macro mode and return 1. Else
 // return 0.
-static int _editor_maybe_toggle_macro(editor_t* editor, kinput_t* input) {
-    char* name;
+static int _editor_maybe_toggle_macro(editor_t *editor, kinput_t *input) {
+    char *name;
     if (memcmp(input, &editor->macro_toggle_key, sizeof(kinput_t)) != 0) {
         return 0;
     }
@@ -1019,9 +1019,9 @@ static int _editor_maybe_toggle_macro(editor_t* editor, kinput_t* input) {
 }
 
 // Resize the editor
-static void _editor_resize(editor_t* editor, int w, int h) {
-    bview_t* bview;
-    bview_rect_t* bounds;
+static void _editor_resize(editor_t *editor, int w, int h) {
+    bview_t *bview;
+    bview_rect_t *bounds;
 
     editor->w = w >= 0 ? w : tb_width();
     editor->h = h >= 0 ? h : tb_height();
@@ -1055,7 +1055,7 @@ static void _editor_resize(editor_t* editor, int w, int h) {
 }
 
 // Draw bviews cursors recursively
-static void _editor_draw_cursors(editor_t* editor, bview_t* bview) {
+static void _editor_draw_cursors(editor_t *editor, bview_t *bview) {
     if (MLE_BVIEW_IS_EDIT(bview) && bview_get_split_root(bview) != editor->active_edit_root) {
         return;
     }
@@ -1066,7 +1066,7 @@ static void _editor_draw_cursors(editor_t* editor, bview_t* bview) {
 }
 
 // Get user input
-static void _editor_get_user_input(editor_t* editor, cmd_context_t* ctx) {
+static void _editor_get_user_input(editor_t *editor, cmd_context_t *ctx) {
     int rc;
     tb_event_t ev;
 
@@ -1097,11 +1097,11 @@ static void _editor_get_user_input(editor_t* editor, cmd_context_t* ctx) {
 }
 
 // Ingest available input until non-cmd_insert_data
-static void _editor_ingest_paste(editor_t* editor, cmd_context_t* ctx) {
+static void _editor_ingest_paste(editor_t *editor, cmd_context_t *ctx) {
     int rc;
     tb_event_t ev;
     kinput_t input;
-    cmd_t* cmd;
+    cmd_t *cmd;
     memset(&input, 0, sizeof(kinput_t));
 
     // Reset pastebuf
@@ -1143,7 +1143,7 @@ static void _editor_ingest_paste(editor_t* editor, cmd_context_t* ctx) {
 }
 
 // Copy input into macro buffer
-static void _editor_record_macro_input(kmacro_t* macro, kinput_t* input) {
+static void _editor_record_macro_input(kmacro_t *macro, kinput_t *input) {
     if (!macro->inputs) {
         macro->inputs = calloc(8, sizeof(kinput_t));
         macro->inputs_len = 0;
@@ -1157,12 +1157,12 @@ static void _editor_record_macro_input(kmacro_t* macro, kinput_t* input) {
 }
 
 // Return command for input
-static cmd_t* _editor_get_command(editor_t* editor, cmd_context_t* ctx, kinput_t* opt_peek_input) {
-    loop_context_t* loop_ctx;
-    kinput_t* input;
-    kbinding_t* node;
-    kbinding_t* binding;
-    kmap_node_t* kmap_node;
+static cmd_t *_editor_get_command(editor_t *editor, cmd_context_t *ctx, kinput_t *opt_peek_input) {
+    loop_context_t *loop_ctx;
+    kinput_t *input;
+    kbinding_t *node;
+    kbinding_t *binding;
+    kmap_node_t *kmap_node;
     int is_top;
     int is_peek;
     int again;
@@ -1232,8 +1232,8 @@ static cmd_t* _editor_get_command(editor_t* editor, cmd_context_t* ctx, kinput_t
 }
 
 // Find binding by input in trie, taking into account numeric and wildcards patterns
-static kbinding_t* _editor_get_kbinding_node(kbinding_t* node, kinput_t* input, loop_context_t* loop_ctx, int is_peek, int* ret_again) {
-    kbinding_t* binding;
+static kbinding_t *_editor_get_kbinding_node(kbinding_t *node, kinput_t *input, loop_context_t *loop_ctx, int is_peek, int *ret_again) {
+    kbinding_t *binding;
     kinput_t input_tmp;
     memset(&input_tmp, 0, sizeof(kinput_t));
 
@@ -1298,9 +1298,9 @@ static kbinding_t* _editor_get_kbinding_node(kbinding_t* node, kinput_t* input,
 }
 
 // Resolve a potentially unresolved cmd by name
-static cmd_t* _editor_resolve_cmd(editor_t* editor, cmd_t** rcmd, char* cmd_name) {
-    cmd_t* tcmd;
-    cmd_t* cmd;
+static cmd_t *_editor_resolve_cmd(editor_t *editor, cmd_t **rcmd, char *cmd_name) {
+    cmd_t *tcmd;
+    cmd_t *cmd;
     cmd = NULL;
     if ((*rcmd)) {
         cmd = *rcmd;
@@ -1315,7 +1315,7 @@ static cmd_t* _editor_resolve_cmd(editor_t* editor, cmd_t** rcmd, char* cmd_name
 }
 
 // Return a kinput_t given a key name
-static int _editor_key_to_input(char* key, kinput_t* ret_input) {
+static int _editor_key_to_input(char *key, kinput_t *ret_input) {
     int keylen;
     int mod;
     uint32_t ch;
@@ -1352,7 +1352,7 @@ static int _editor_key_to_input(char* key, kinput_t* ret_input) {
 }
 
 // Init signal handlers
-static void _editor_init_signal_handlers(editor_t* editor) {
+static void _editor_init_signal_handlers(editor_t *editor) {
     struct sigaction action;
     (void)editor;
     memset(&action, 0, sizeof(struct sigaction));
@@ -1366,7 +1366,7 @@ static void _editor_init_signal_handlers(editor_t* editor) {
 
 // Gracefully exit
 static void _editor_graceful_exit(int signum) {
-    bview_t* bview;
+    bview_t *bview;
     char path[64];
     int bview_num;
     (void)signum;
@@ -1384,7 +1384,7 @@ static void _editor_graceful_exit(int signum) {
 }
 
 // Register built-in commands
-static void _editor_register_cmds(editor_t* editor) {
+static void _editor_register_cmds(editor_t *editor) {
     _editor_register_cmd_fn(editor, "cmd_apply_macro_by", cmd_apply_macro_by);
     _editor_register_cmd_fn(editor, "cmd_apply_macro", cmd_apply_macro);
     _editor_register_cmd_fn(editor, "cmd_browse", cmd_browse);
@@ -1483,7 +1483,7 @@ static void _editor_register_cmds(editor_t* editor) {
 }
 
 // Init built-in kmaps
-static void _editor_init_kmaps(editor_t* editor) {
+static void _editor_init_kmaps(editor_t *editor) {
     _editor_init_kmap(editor, &editor->kmap_normal, "mle_normal", "cmd_insert_data", 0, (kbinding_def_t[]){
         MLE_KBINDING_DEF("cmd_show_help", "F2"),
         MLE_KBINDING_DEF("cmd_delete_before", "backspace"),
@@ -1643,8 +1643,8 @@ static void _editor_init_kmaps(editor_t* editor) {
 }
 
 // Init a single kmap
-static void _editor_init_kmap(editor_t* editor, kmap_t** ret_kmap, char* name, char* default_cmd_name, int allow_fallthru, kbinding_def_t* defs) {
-    kmap_t* kmap;
+static void _editor_init_kmap(editor_t *editor, kmap_t **ret_kmap, char *name, char *default_cmd_name, int allow_fallthru, kbinding_def_t *defs) {
+    kmap_t *kmap;
 
     kmap = calloc(1, sizeof(kmap_t));
     kmap->name = strdup(name);
@@ -1664,8 +1664,8 @@ static void _editor_init_kmap(editor_t* editor, kmap_t** ret_kmap, char* name, c
 }
 
 // Add a binding to a kmap
-static void _editor_init_kmap_add_binding(editor_t* editor, kmap_t* kmap, kbinding_def_t* binding_def) {
-    char* cur_key_patt;
+static void _editor_init_kmap_add_binding(editor_t *editor, kmap_t *kmap, kbinding_def_t *binding_def) {
+    char *cur_key_patt;
     cur_key_patt = strdup(binding_def->key_patt);
     _editor_init_kmap_add_binding_to_trie(&kmap->bindings->children, binding_def->cmd_name, cur_key_patt, binding_def->key_patt, binding_def->static_param);
     if (strcmp(binding_def->cmd_name, "cmd_show_help") == 0) {
@@ -1676,9 +1676,9 @@ static void _editor_init_kmap_add_binding(editor_t* editor, kmap_t* kmap, kbindi
 }
 
 // Add a binding to a kmap trie
-static int _editor_init_kmap_add_binding_to_trie(kbinding_t** trie, char* cmd_name, char* cur_key_patt, char* full_key_patt, char* static_param) {
-    char* next_key_patt;
-    kbinding_t* node;
+static int _editor_init_kmap_add_binding_to_trie(kbinding_t **trie, char *cmd_name, char *cur_key_patt, char *full_key_patt, char *static_param) {
+    char *next_key_patt;
+    kbinding_t *node;
     kinput_t input;
 
     // Find next_key_patt and add null-char to cur_key_patt
@@ -1729,8 +1729,8 @@ static int _editor_init_kmap_add_binding_to_trie(kbinding_t** trie, char* cmd_na
 }
 
 // Proxy for _editor_init_kmap with str in format '<name>,<default_cmd>,<allow_fallthru>'
-static int _editor_init_kmap_by_str(editor_t* editor, kmap_t** ret_kmap, char* str) {
-    char* args[3];
+static int _editor_init_kmap_by_str(editor_t *editor, kmap_t **ret_kmap, char *str) {
+    char *args[3];
     args[0] = strtok(str,  ","); if (!args[0]) return MLE_ERR;
     args[1] = strtok(NULL, ","); if (!args[1]) return MLE_ERR;
     args[2] = strtok(NULL, ",");
@@ -1739,8 +1739,8 @@ static int _editor_init_kmap_by_str(editor_t* editor, kmap_t** ret_kmap, char* s
 }
 
 // Proxy for _editor_init_kmap_add_binding with str in format '<cmd>,<key>,<param>'
-static int _editor_init_kmap_add_binding_by_str(editor_t* editor, kmap_t* kmap, char* str) {
-    char* args[3];
+static int _editor_init_kmap_add_binding_by_str(editor_t *editor, kmap_t *kmap, char *str) {
+    char *args[3];
     args[0] = strtok(str,  ","); if (!args[0]) return MLE_ERR;
     args[1] = strtok(NULL, ","); if (!args[1]) return MLE_ERR;
     args[2] = strtok(NULL, ",");
@@ -1749,9 +1749,9 @@ static int _editor_init_kmap_add_binding_by_str(editor_t* editor, kmap_t* kmap,
 }
 
 // Destroy a kmap
-static void _editor_destroy_kmap(kmap_t* kmap, kbinding_t* trie) {
-    kbinding_t* binding;
-    kbinding_t* binding_tmp;
+static void _editor_destroy_kmap(kmap_t *kmap, kbinding_t *trie) {
+    kbinding_t *binding;
+    kbinding_t *binding_tmp;
     int is_top;
     is_top = (trie == kmap->bindings ? 1 : 0);
     HASH_ITER(hh, trie, binding, binding_tmp) {
@@ -1771,10 +1771,10 @@ static void _editor_destroy_kmap(kmap_t* kmap, kbinding_t* trie) {
 }
 
 // Add a macro by str with format '<name> <key1> <key2> ... <keyN>'
-static int _editor_add_macro_by_str(editor_t* editor, char* str) {
+static int _editor_add_macro_by_str(editor_t *editor, char *str) {
     int has_input;
-    char* token;
-    kmacro_t* macro;
+    char *token;
+    kmacro_t *macro;
     kinput_t input = { 0, 0, 0 };
 
     has_input = 0;
@@ -1817,7 +1817,7 @@ static int _editor_add_macro_by_str(editor_t* editor, char* str) {
 }
 
 // Init built-in syntax map
-static void _editor_init_syntaxes(editor_t* editor) {
+static void _editor_init_syntaxes(editor_t *editor) {
     _editor_init_syntax(editor, NULL, "syn_generic", "\\.(c|cc|cpp|h|hpp|php|py|rb|erb|sh|pl|go|js|java|jsp|lua|rs)$", -1, -1, (srule_def_t[]){
         { "(?<![\\w%@$])("
           "abstract|alias|alignas|alignof|and|and_eq|arguments|array|as|asm|"
@@ -1862,8 +1862,8 @@ static void _editor_init_syntaxes(editor_t* editor) {
 }
 
 // Init a single syntax
-static void _editor_init_syntax(editor_t* editor, syntax_t** optret_syntax, char* name, char* path_pattern, int tab_width, int tab_to_space, srule_def_t* defs) {
-    syntax_t* syntax;
+static void _editor_init_syntax(editor_t *editor, syntax_t **optret_syntax, char *name, char *path_pattern, int tab_width, int tab_to_space, srule_def_t *defs) {
+    syntax_t *syntax;
 
     syntax = calloc(1, sizeof(syntax_t));
     syntax->name = strdup(name);
@@ -1881,8 +1881,8 @@ static void _editor_init_syntax(editor_t* editor, syntax_t** optret_syntax, char
 }
 
 // Proxy for _editor_init_syntax with str in format '<name>,<path_pattern>,<tab_width>,<tab_to_space>'
-static int _editor_init_syntax_by_str(editor_t* editor, syntax_t** ret_syntax, char* str) {
-    char* args[4];
+static int _editor_init_syntax_by_str(editor_t *editor, syntax_t **ret_syntax, char *str) {
+    char *args[4];
     args[0] = strtok(str,  ","); if (!args[0]) return MLE_ERR;
     args[1] = strtok(NULL, ","); if (!args[1]) return MLE_ERR;
     args[2] = strtok(NULL, ","); if (!args[2]) return MLE_ERR;
@@ -1892,8 +1892,8 @@ static int _editor_init_syntax_by_str(editor_t* editor, syntax_t** ret_syntax, c
 }
 
 // Add rule to syntax
-static void _editor_init_syntax_add_rule(syntax_t* syntax, srule_def_t* def) {
-    srule_node_t* node;
+static void _editor_init_syntax_add_rule(syntax_t *syntax, srule_def_t *def) {
+    srule_node_t *node;
     node = calloc(1, sizeof(srule_node_t));
     if (def->re_end) {
         node->srule = srule_new_multi(def->re, strlen(def->re), def->re_end, strlen(def->re_end), def->fg, def->bg);
@@ -1904,8 +1904,8 @@ static void _editor_init_syntax_add_rule(syntax_t* syntax, srule_def_t* def) {
 }
 
 // Proxy for _editor_init_syntax_add_rule with str in format '<start>,<end>,<fg>,<bg>' or '<regex>,<fg>,<bg>'
-static int _editor_init_syntax_add_rule_by_str(syntax_t* syntax, char* str) {
-    char* args[4];
+static int _editor_init_syntax_add_rule_by_str(syntax_t *syntax, char *str) {
+    char *args[4];
     int style_i;
     args[0] = strtok(str,  ","); if (!args[0]) return MLE_ERR;
     args[1] = strtok(NULL, ","); if (!args[1]) return MLE_ERR;
@@ -1917,11 +1917,11 @@ static int _editor_init_syntax_add_rule_by_str(syntax_t* syntax, char* str) {
 }
 
 // Destroy a syntax
-static void _editor_destroy_syntax_map(syntax_t* map) {
-    syntax_t* syntax;
-    syntax_t* syntax_tmp;
-    srule_node_t* srule;
-    srule_node_t* srule_tmp;
+static void _editor_destroy_syntax_map(syntax_t *map) {
+    syntax_t *syntax;
+    syntax_t *syntax_tmp;
+    srule_node_t *srule;
+    srule_node_t *srule_tmp;
     HASH_ITER(hh, map, syntax, syntax_tmp) {
         HASH_DELETE(hh, map, syntax);
         DL_FOREACH_SAFE(syntax->srules, srule, srule_tmp) {
@@ -1936,7 +1936,7 @@ static void _editor_destroy_syntax_map(syntax_t* map) {
 }
 
 // Read rc file
-static int _editor_init_from_rc_read(editor_t* editor, FILE* rc, char** ret_rc_data, size_t* ret_rc_data_len) {
+static int _editor_init_from_rc_read(editor_t *editor, FILE *rc, char **ret_rc_data, size_t *ret_rc_data_len) {
     (void)editor;
     fseek(rc, 0L, SEEK_END);
     *ret_rc_data_len = (size_t)ftell(rc);
@@ -1948,13 +1948,13 @@ static int _editor_init_from_rc_read(editor_t* editor, FILE* rc, char** ret_rc_d
 }
 
 // Exec rc file, read stdout
-static int _editor_init_from_rc_exec(editor_t* editor, char* rc_path, char** ret_rc_data, size_t* ret_rc_data_len) {
+static int _editor_init_from_rc_exec(editor_t *editor, char *rc_path, char **ret_rc_data, size_t *ret_rc_data_len) {
     char buf[512];
     size_t nbytes;
-    char* data;
+    char *data;
     size_t data_len;
     size_t data_cap;
-    FILE* fp;
+    FILE *fp;
 
     // Popen rc file
     if ((fp = popen(rc_path, "r")) == NULL) {
@@ -1989,15 +1989,15 @@ static int _editor_init_from_rc_exec(editor_t* editor, char* rc_path, char** ret
 }
 
 // Parse rc file
-static int _editor_init_from_rc(editor_t* editor, FILE* rc, char* rc_path) {
+static int _editor_init_from_rc(editor_t *editor, FILE *rc, char *rc_path) {
     int rv;
     size_t rc_data_len;
     char *rc_data;
     char *rc_data_stop;
-    char* eol;
-    char* bol;
+    char *eol;
+    char *bol;
     int fargc;
-    char** fargv;
+    char **fargv;
     struct stat statbuf;
     rv = MLE_OK;
     rc_data = NULL;
@@ -2049,11 +2049,11 @@ static int _editor_init_from_rc(editor_t* editor, FILE* rc, char* rc_path) {
 }
 
 // Parse cli args
-static int _editor_init_from_args(editor_t* editor, int argc, char** argv) {
+static int _editor_init_from_args(editor_t *editor, int argc, char **argv) {
     int rv;
-    kmap_t* cur_kmap;
-    syntax_t* cur_syntax;
-    uscript_t* uscript;
+    kmap_t *cur_kmap;
+    syntax_t *cur_syntax;
+    uscript_t *uscript;
     int c;
     rv = MLE_OK;
 
@@ -2215,7 +2215,7 @@ static int _editor_init_from_args(editor_t* editor, int argc, char** argv) {
 }
 
 // Init status bar
-static void _editor_init_status(editor_t* editor) {
+static void _editor_init_status(editor_t *editor) {
     editor->status = bview_new(editor, NULL, 0, NULL);
     editor->status->type = MLE_BVIEW_TYPE_STATUS;
     editor->rect_status.fg = TB_WHITE;
@@ -2223,7 +2223,7 @@ static void _editor_init_status(editor_t* editor) {
 }
 
 // Init bviews
-static void _editor_init_bviews(editor_t* editor, int argc, char** argv) {
+static void _editor_init_bviews(editor_t *editor, int argc, char **argv) {
     int i;
     char *path;
     int path_len;
@@ -2243,11 +2243,11 @@ static void _editor_init_bviews(editor_t* editor, int argc, char** argv) {
 }
 
 // Init headless mode
-static int _editor_init_headless_mode(editor_t* editor) {
+static int _editor_init_headless_mode(editor_t *editor) {
     fd_set readfds;
     ssize_t nbytes;
     char buf[1024];
-    bview_t* bview;
+    bview_t *bview;
     int stdin_is_a_pipe;
 
     // Check if stdin is a pipe
@@ -2285,8 +2285,8 @@ static int _editor_init_headless_mode(editor_t* editor) {
 }
 
 // Init startup macro if present
-static int _editor_init_startup_macro(editor_t* editor) {
-    kmacro_t* macro;
+static int _editor_init_startup_macro(editor_t *editor) {
+    kmacro_t *macro;
     if (!editor->startup_macro_name) return MLE_OK;
     macro = NULL;
     HASH_FIND_STR(editor->macro_map, editor->startup_macro_name, macro);
diff --git a/main.c b/main.c
index 6ed832a..0dbadce 100644
--- a/main.c
+++ b/main.c
@@ -9,7 +9,7 @@
 
 editor_t _editor;
 
-int main(int argc, char** argv) {
+int main(int argc, char **argv) {
     memset(&_editor, 0, sizeof(editor_t));
     setlocale(LC_ALL, "");
     if (editor_init(&_editor, argc, argv) == MLE_OK) {
diff --git a/mark.c b/mark.c
index 5f1b99a..d9f0963 100644
--- a/mark.c
+++ b/mark.c
@@ -4,18 +4,18 @@
 #include <pcre.h>
 #include "mlbuf.h"
 
-typedef char* (*mark_find_match_fn)(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* u1, void* u2, bint_t* ret_needle_len);
-static int mark_find_match(mark_t* self, mark_find_match_fn matchfn, void* u1, void* u2, int reverse, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars);
-static int mark_find_re(mark_t* self, char* re, bint_t re_len, int reverse, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars);
-static char* mark_find_match_prev(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, mark_find_match_fn matchfn, void* u1, void* u2);
-static char* mark_find_next_str_matchfn(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* needle, void* needle_len, bint_t* ret_needle_len);
-static char* mark_find_prev_str_matchfn(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* needle, void* needle_len, bint_t* ret_needle_len);
-static char* mark_find_next_cre_matchfn(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* cre, void* unused, bint_t* ret_needle_len);
-static char* mark_find_prev_cre_matchfn(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* cre, void* unused, bint_t* ret_needle_len);
-
-static int* pcre_ovector = NULL;
+typedef char* (*mark_find_match_fn)(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *u1, void *u2, bint_t *ret_needle_len);
+static int mark_find_match(mark_t *self, mark_find_match_fn matchfn, void *u1, void *u2, int reverse, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars);
+static int mark_find_re(mark_t *self, char *re, bint_t re_len, int reverse, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars);
+static char *mark_find_match_prev(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, mark_find_match_fn matchfn, void *u1, void *u2);
+static char *mark_find_next_str_matchfn(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *needle, void *needle_len, bint_t *ret_needle_len);
+static char *mark_find_prev_str_matchfn(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *needle, void *needle_len, bint_t *ret_needle_len);
+static char *mark_find_next_cre_matchfn(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *cre, void *unused, bint_t *ret_needle_len);
+static char *mark_find_prev_cre_matchfn(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *cre, void *unused, bint_t *ret_needle_len);
+
+static int *pcre_ovector = NULL;
 static int pcre_ovector_size = 0;
-static int* pcre_rc;
+static int *pcre_rc;
 static char bracket_pairs[8] = {
     '[', ']',
     '(', ')',
@@ -23,24 +23,24 @@ static char bracket_pairs[8] = {
 };
 
 // Return a clone (same position) of an existing mark
-int mark_clone(mark_t* self, mark_t** ret_mark) {
+int mark_clone(mark_t *self, mark_t **ret_mark) {
     *ret_mark = buffer_add_mark(self->bline->buffer, self->bline, self->col);
     return MLBUF_OK;
 }
 
 // Return a lettered clone (same position) of an existing mark
-int mark_clone_w_letter(mark_t* self, char letter, mark_t** ret_mark) {
+int mark_clone_w_letter(mark_t *self, char letter, mark_t **ret_mark) {
     *ret_mark = buffer_add_mark_ex(self->bline->buffer, letter, self->bline, self->col);
     return MLBUF_OK;
 }
 
 // Insert data before mark
-int mark_insert_before(mark_t* self, char* data, bint_t data_len) {
+int mark_insert_before(mark_t *self, char *data, bint_t data_len) {
     return bline_insert(self->bline, self->col, data, data_len, NULL);
 }
 
 // Insert data after mark
-int mark_insert_after(mark_t* self, char* data, bint_t data_len) {
+int mark_insert_after(mark_t *self, char *data, bint_t data_len) {
     int rc;
     bint_t num_chars;
     if ((rc = bline_insert(self->bline, self->col, data, data_len, &num_chars)) == MLBUF_OK) {
@@ -50,12 +50,12 @@ int mark_insert_after(mark_t* self, char* data, bint_t data_len) {
 }
 
 // Delete data after mark
-int mark_delete_after(mark_t* self, bint_t num_chars) {
+int mark_delete_after(mark_t *self, bint_t num_chars) {
     return bline_delete(self->bline, self->col, num_chars);
 }
 
 // Delete data before mark
-int mark_delete_before(mark_t* self, bint_t num_chars) {
+int mark_delete_before(mark_t *self, bint_t num_chars) {
     int rc;
     if ((rc = mark_move_by(self, -1 * num_chars)) == MLBUF_OK) {
         rc = mark_delete_after(self, num_chars);
@@ -64,12 +64,12 @@ int mark_delete_before(mark_t* self, bint_t num_chars) {
 }
 
 // Replace data
-int mark_replace(mark_t* self, bint_t num_chars, char* data, bint_t data_len) {
+int mark_replace(mark_t *self, bint_t num_chars, char *data, bint_t data_len) {
     return bline_replace(self->bline, self->col, num_chars, data, data_len);
 }
 
 // Replace data between marks
-int mark_replace_between_mark(mark_t* self, mark_t* other, char* data, bint_t data_len) {
+int mark_replace_between_mark(mark_t *self, mark_t *other, char *data, bint_t data_len) {
     bint_t offset_a;
     bint_t offset_b;
     buffer_get_offset(self->bline->buffer, self->bline, self->col, &offset_a);
@@ -81,35 +81,35 @@ int mark_replace_between_mark(mark_t* self, mark_t* other, char* data, bint_t da
 }
 
 // Move mark to bline:col
-int mark_move_to_w_bline(mark_t* self, bline_t* bline, bint_t col) {
+int mark_move_to_w_bline(mark_t *self, bline_t *bline, bint_t col) {
     _mark_mark_move_inner(self, bline, col, 1, 1);
     return MLBUF_OK;
 }
 
 // Move mark to line_index:col
-int mark_move_to(mark_t* self, bint_t line_index, bint_t col) {
-    bline_t* bline;
+int mark_move_to(mark_t *self, bint_t line_index, bint_t col) {
+    bline_t *bline;
     buffer_get_bline(self->bline->buffer, line_index, &bline);
     _mark_mark_move_inner(self, bline, col, 1, 1);
     return MLBUF_OK;
 }
 
 // Move mark by a character delta
-int mark_move_by(mark_t* self, bint_t char_delta) {
+int mark_move_by(mark_t *self, bint_t char_delta) {
     bint_t offset;
     buffer_get_offset(self->bline->buffer, self->bline, self->col, &offset);
     return mark_move_offset(self, offset + char_delta);
 }
 
 // Get mark offset
-int mark_get_offset(mark_t* self, bint_t* ret_offset) {
+int mark_get_offset(mark_t *self, bint_t *ret_offset) {
     return buffer_get_offset(self->bline->buffer, self->bline, self->col, ret_offset);
 }
 
 // Move mark by line delta
-int mark_move_vert(mark_t* self, bint_t line_delta) {
-    bline_t* cur_line;
-    bline_t* tmp_line;
+int mark_move_vert(mark_t *self, bint_t line_delta) {
+    bline_t *cur_line;
+    bline_t *tmp_line;
     cur_line = self->bline;
     while (line_delta != 0) {
         tmp_line = line_delta > 0 ? cur_line->next : cur_line->prev;
@@ -127,40 +127,40 @@ int mark_move_vert(mark_t* self, bint_t line_delta) {
 }
 
 // Move mark to beginning of line
-int mark_move_bol(mark_t* self) {
+int mark_move_bol(mark_t *self) {
     _mark_mark_move_inner(self, self->bline, 0, 1, 1);
     return MLBUF_OK;
 }
 
 // Move mark to end of line
-int mark_move_eol(mark_t* self) {
+int mark_move_eol(mark_t *self) {
     MLBUF_BLINE_ENSURE_CHARS(self->bline);
     _mark_mark_move_inner(self, self->bline, self->bline->char_count, 1, 1);
     return MLBUF_OK;
 }
 
 // Move mark to a column on the current line
-int mark_move_col(mark_t* self, bint_t col) {
+int mark_move_col(mark_t *self, bint_t col) {
     _mark_mark_move_inner(self, self->bline, col, 1, 1);
     return MLBUF_OK;
 }
 
 // Move mark to beginning of buffer
-int mark_move_beginning(mark_t* self) {
+int mark_move_beginning(mark_t *self) {
     _mark_mark_move_inner(self, self->bline->buffer->first_line, 0, 1, 1);
     return MLBUF_OK;
 }
 
 // Move mark to end of buffer
-int mark_move_end(mark_t* self) {
+int mark_move_end(mark_t *self) {
     MLBUF_BLINE_ENSURE_CHARS(self->bline->buffer->last_line);
     _mark_mark_move_inner(self, self->bline->buffer->last_line, self->bline->buffer->last_line->char_count, 1, 1);
     return MLBUF_OK;
 }
 
 // Move mark to a particular offset
-int mark_move_offset(mark_t* self, bint_t offset) {
-    bline_t* dest_line;
+int mark_move_offset(mark_t *self, bint_t offset) {
+    bline_t *dest_line;
     bint_t dest_col;
     buffer_get_bline_col(self->bline->buffer, offset, &dest_line, &dest_col);
     _mark_mark_move_inner(self, dest_line, dest_col, 1, 1);
@@ -168,37 +168,37 @@ int mark_move_offset(mark_t* self, bint_t offset) {
 }
 
 // Find next occurrence of string from mark
-int mark_find_next_str(mark_t* self, char* str, bint_t str_len, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars) {
+int mark_find_next_str(mark_t *self, char *str, bint_t str_len, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars) {
     return mark_find_match(self, mark_find_next_str_matchfn, (void*)str, (void*)&str_len, 0, ret_line, ret_col, ret_num_chars);
 }
 
 // Find prev occurrence of string from mark
-int mark_find_prev_str(mark_t* self, char* str, bint_t str_len, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars) {
+int mark_find_prev_str(mark_t *self, char *str, bint_t str_len, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars) {
     return mark_find_match(self, mark_find_prev_str_matchfn, (void*)str, (void*)&str_len, 1, ret_line, ret_col, ret_num_chars);
 }
 
 // Find next occurence of regex from mark
-int mark_find_next_cre(mark_t* self, pcre* cre, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars) {
+int mark_find_next_cre(mark_t *self, pcre *cre, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars) {
     return mark_find_match(self, mark_find_next_cre_matchfn, (void*)cre, NULL, 0, ret_line, ret_col, ret_num_chars);
 }
 
 // Find prev occurence of regex from mark
-int mark_find_prev_cre(mark_t* self, pcre* cre, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars) {
+int mark_find_prev_cre(mark_t *self, pcre *cre, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars) {
     return mark_find_match(self, mark_find_prev_cre_matchfn, (void*)cre, NULL, 1, ret_line, ret_col, ret_num_chars);
 }
 
 // Find next occurence of uncompiled regex str from mark
-int mark_find_next_re(mark_t* self, char* re, bint_t re_len, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars) {
+int mark_find_next_re(mark_t *self, char *re, bint_t re_len, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars) {
     return mark_find_re(self, re, re_len, 0, ret_line, ret_col, ret_num_chars);
 }
 
 // Find prev occurence of uncompiled regex str from mark
-int mark_find_prev_re(mark_t* self, char* re, bint_t re_len, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars) {
+int mark_find_prev_re(mark_t *self, char *re, bint_t re_len, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars) {
     return mark_find_re(self, re, re_len, 1, ret_line, ret_col, ret_num_chars);
 }
 
 // Return 1 if self is before other, otherwise return 0
-int mark_is_lt(mark_t* self, mark_t* other) {
+int mark_is_lt(mark_t *self, mark_t *other) {
     if (self->bline->line_index == other->bline->line_index) {
         return self->col < other->col ? 1 : 0;
     } else if (self->bline->line_index < other->bline->line_index) {
@@ -208,7 +208,7 @@ int mark_is_lt(mark_t* self, mark_t* other) {
 }
 
 // Return 1 if self is past other, otherwise return 0
-int mark_is_gt(mark_t* self, mark_t* other) {
+int mark_is_gt(mark_t *self, mark_t *other) {
     if (self->bline->line_index == other->bline->line_index) {
         return self->col > other->col ? 1 : 0;
     } else if (self->bline->line_index > other->bline->line_index) {
@@ -218,7 +218,7 @@ int mark_is_gt(mark_t* self, mark_t* other) {
 }
 
 // Return 1 if self is at same position as other, otherwise return 0
-int mark_is_eq(mark_t* self, mark_t* other) {
+int mark_is_eq(mark_t *self, mark_t *other) {
     if (self->bline->line_index == other->bline->line_index) {
         return self->col == other->col ? 1 : 0;
     }
@@ -226,20 +226,20 @@ int mark_is_eq(mark_t* self, mark_t* other) {
 }
 
 // Return 1 if self >= other
-int mark_is_gte(mark_t* self, mark_t* other) {
+int mark_is_gte(mark_t *self, mark_t *other) {
     return !mark_is_lt(self, other);
 }
 
 // Return 1 if self <= other
-int mark_is_lte(mark_t* self, mark_t* other) {
+int mark_is_lte(mark_t *self, mark_t *other) {
     return !mark_is_gt(self, other);
 }
 
 // Find top-level bracket to the left examining no more than max_chars
-int mark_find_bracket_top(mark_t* self, bint_t max_chars, bline_t** ret_line, bint_t* ret_col, bint_t* ret_brkt) {
-    bline_t* cur_line;
+int mark_find_bracket_top(mark_t *self, bint_t max_chars, bline_t **ret_line, bint_t *ret_col, bint_t *ret_brkt) {
+    bline_t *cur_line;
     bint_t col;
-    int* stacks;
+    int *stacks;
     int found;
     int i;
     int i_left;
@@ -276,7 +276,7 @@ int mark_find_bracket_top(mark_t* self, bint_t max_chars, bline_t** ret_line, bi
 
 // Find the matching bracket character under the mark, examining no more than
 // max_chars.
-int mark_find_bracket_pair(mark_t* self, bint_t max_chars, bline_t** ret_line, bint_t* ret_col, bint_t* ret_brkt) {
+int mark_find_bracket_pair(mark_t *self, bint_t max_chars, bline_t **ret_line, bint_t *ret_col, bint_t *ret_brkt) {
     char brkt;
     char targ;
     char cur;
@@ -285,7 +285,7 @@ int mark_find_bracket_pair(mark_t* self, bint_t max_chars, bline_t** ret_line, b
     int nest;
     bint_t col;
     bint_t nchars;
-    bline_t* cur_line;
+    bline_t *cur_line;
     MLBUF_BLINE_ENSURE_CHARS(self->bline);
 
     // If we're at eol, there's nothing to match
@@ -353,7 +353,7 @@ int mark_find_bracket_pair(mark_t* self, bint_t max_chars, bline_t** ret_line, b
 }
 
 // Delete data between self and other
-int mark_delete_between_mark(mark_t* self, mark_t* other) {
+int mark_delete_between_mark(mark_t *self, mark_t *other) {
     bint_t offset_a;
     bint_t offset_b;
     buffer_get_offset(self->bline->buffer, self->bline, self->col, &offset_a);
@@ -367,7 +367,7 @@ int mark_delete_between_mark(mark_t* self, mark_t* other) {
 }
 
 // Return data between self and other
-int mark_get_between_mark(mark_t* self, mark_t* other, char** ret_str, bint_t* ret_str_len) {
+int mark_get_between_mark(mark_t *self, mark_t *other, char **ret_str, bint_t *ret_str_len) {
     bint_t ig;
     if (mark_is_gt(self, other)) {
         return buffer_substr(
@@ -390,13 +390,13 @@ int mark_get_between_mark(mark_t* self, mark_t* other, char** ret_str, bint_t* r
 }
 
 // Move self to other
-int mark_join(mark_t* self, mark_t* other) {
+int mark_join(mark_t *self, mark_t *other) {
     _mark_mark_move_inner(self, other->bline, other->col, 1, 1);
     return MLBUF_OK;
 }
 
 // Swap positions of self and other
-int mark_swap_with_mark(mark_t* self, mark_t* other) {
+int mark_swap_with_mark(mark_t *self, mark_t *other) {
     mark_t tmp_mark;
     tmp_mark.bline = other->bline;
     tmp_mark.col = other->col;
@@ -406,24 +406,24 @@ int mark_swap_with_mark(mark_t* self, mark_t* other) {
 }
 
 // Return 1 if mark is at eol, else return 0
-int mark_is_at_eol(mark_t* self) {
+int mark_is_at_eol(mark_t *self) {
     MLBUF_BLINE_ENSURE_CHARS(self->bline);
     return self->col >= self->bline->char_count ? 1 : 0;
 }
 
 // Return 1 if mark is at bol, else return 0
-int mark_is_at_bol(mark_t* self) {
+int mark_is_at_bol(mark_t *self) {
     return self->col <= 0;
 }
 
 // Destroy a mark
-int mark_destroy(mark_t* self) {
+int mark_destroy(mark_t *self) {
     return buffer_destroy_mark(self->bline->buffer, self);
 }
 
 #define MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(mark, findfn, ...) do { \
     int rc; \
-    bline_t* line = NULL; \
+    bline_t *line = NULL; \
     bint_t col = 0; \
     bint_t char_count = 0; \
     if ((rc = (findfn)((mark), __VA_ARGS__, &line, &col, &char_count)) == MLBUF_OK) { \
@@ -438,7 +438,7 @@ int mark_destroy(mark_t* self) {
 
 #define MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(mark, findfn, ...) do { \
     int rc; \
-    bline_t* line = NULL; \
+    bline_t *line = NULL; \
     bint_t col = 0; \
     bint_t char_count = 0; \
     if ((rc = (findfn)((mark), __VA_ARGS__, &line, &col, &char_count)) == MLBUF_OK) { \
@@ -449,10 +449,10 @@ int mark_destroy(mark_t* self) {
 
 #define MLBUF_MARK_IMPLEMENT_NUDGE_VIA_FIND(mark, findfn, ...) do { \
     int rc; \
-    bline_t* line = NULL; \
+    bline_t *line = NULL; \
     bint_t col = 0; \
     bint_t char_count = 0; \
-    mark_t* tmark = NULL; \
+    mark_t *tmark = NULL; \
     mark_clone((mark), &tmark); \
     mark_move_by(tmark, 1); \
     if ((rc = (findfn)(tmark, __VA_ARGS__, &line, &col, &char_count)) == MLBUF_OK) { \
@@ -462,86 +462,86 @@ int mark_destroy(mark_t* self) {
     return rc; \
 } while(0)
 
-int mark_move_next_str(mark_t* self, char* str, bint_t str_len) {
+int mark_move_next_str(mark_t *self, char *str, bint_t str_len) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(self, mark_find_next_str, str, str_len);
 }
 
-int mark_move_prev_str(mark_t* self, char* str, bint_t str_len) {
+int mark_move_prev_str(mark_t *self, char *str, bint_t str_len) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(self, mark_find_prev_str, str, str_len);
 }
 
-int mark_move_next_cre(mark_t* self, pcre* cre) {
+int mark_move_next_cre(mark_t *self, pcre *cre) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(self, mark_find_next_cre, cre);
 }
 
-int mark_move_prev_cre(mark_t* self, pcre* cre) {
+int mark_move_prev_cre(mark_t *self, pcre *cre) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(self, mark_find_prev_cre, cre);
 }
 
-int mark_move_next_re(mark_t* self, char* re, bint_t re_len) {
+int mark_move_next_re(mark_t *self, char *re, bint_t re_len) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(self, mark_find_next_re, re, re_len);
 }
 
-int mark_move_prev_re(mark_t* self, char* re, bint_t re_len) {
+int mark_move_prev_re(mark_t *self, char *re, bint_t re_len) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(self, mark_find_prev_re, re, re_len);
 }
 
-int mark_move_next_str_nudge(mark_t* self, char* str, bint_t str_len) {
+int mark_move_next_str_nudge(mark_t *self, char *str, bint_t str_len) {
     MLBUF_MARK_IMPLEMENT_NUDGE_VIA_FIND(self, mark_find_next_str, str, str_len);
 }
 
-int mark_move_next_cre_nudge(mark_t* self, pcre* cre) {
+int mark_move_next_cre_nudge(mark_t *self, pcre *cre) {
     MLBUF_MARK_IMPLEMENT_NUDGE_VIA_FIND(self, mark_find_next_cre, cre);
 }
 
-int mark_move_next_re_nudge(mark_t* self, char* re, bint_t re_len) {
+int mark_move_next_re_nudge(mark_t *self, char *re, bint_t re_len) {
     MLBUF_MARK_IMPLEMENT_NUDGE_VIA_FIND(self, mark_find_next_re, re, re_len);
 }
 
-int mark_move_bracket_pair(mark_t* self, bint_t max_chars) {
+int mark_move_bracket_pair(mark_t *self, bint_t max_chars) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(self, mark_find_bracket_pair, max_chars);
 }
 
-int mark_move_bracket_top(mark_t* self, bint_t max_chars) {
+int mark_move_bracket_top(mark_t *self, bint_t max_chars) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND(self, mark_find_bracket_top, max_chars);
 }
 
-int mark_move_next_str_ex(mark_t* self, char* str, bint_t str_len, bline_t** optret_line, bint_t* optret_col, bint_t* optret_char_count) {
+int mark_move_next_str_ex(mark_t *self, char *str, bint_t str_len, bline_t **optret_line, bint_t *optret_col, bint_t *optret_char_count) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(self, mark_find_next_str, str, str_len);
 }
 
-int mark_move_prev_str_ex(mark_t* self, char* str, bint_t str_len, bline_t** optret_line, bint_t* optret_col, bint_t* optret_char_count) {
+int mark_move_prev_str_ex(mark_t *self, char *str, bint_t str_len, bline_t **optret_line, bint_t *optret_col, bint_t *optret_char_count) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(self, mark_find_prev_str, str, str_len);
 }
 
-int mark_move_next_cre_ex(mark_t* self, pcre* cre, bline_t** optret_line, bint_t* optret_col, bint_t* optret_char_count) {
+int mark_move_next_cre_ex(mark_t *self, pcre *cre, bline_t **optret_line, bint_t *optret_col, bint_t *optret_char_count) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(self, mark_find_next_cre, cre);
 }
 
-int mark_move_prev_cre_ex(mark_t* self, pcre* cre, bline_t** optret_line, bint_t* optret_col, bint_t* optret_char_count) {
+int mark_move_prev_cre_ex(mark_t *self, pcre *cre, bline_t **optret_line, bint_t *optret_col, bint_t *optret_char_count) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(self, mark_find_prev_cre, cre);
 }
 
-int mark_move_next_re_ex(mark_t* self, char* re, bint_t re_len, bline_t** optret_line, bint_t* optret_col, bint_t* optret_char_count) {
+int mark_move_next_re_ex(mark_t *self, char *re, bint_t re_len, bline_t **optret_line, bint_t *optret_col, bint_t *optret_char_count) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(self, mark_find_next_re, re, re_len);
 }
 
-int mark_move_prev_re_ex(mark_t* self, char* re, bint_t re_len, bline_t** optret_line, bint_t* optret_col, bint_t* optret_char_count) {
+int mark_move_prev_re_ex(mark_t *self, char *re, bint_t re_len, bline_t **optret_line, bint_t *optret_col, bint_t *optret_char_count) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(self, mark_find_prev_re, re, re_len);
 }
 
-int mark_move_bracket_pair_ex(mark_t* self, bint_t max_chars, bline_t** optret_line, bint_t* optret_col, bint_t* optret_char_count) {
+int mark_move_bracket_pair_ex(mark_t *self, bint_t max_chars, bline_t **optret_line, bint_t *optret_col, bint_t *optret_char_count) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(self, mark_find_bracket_pair, max_chars);
 }
 
-int mark_move_bracket_top_ex(mark_t* self, bint_t max_chars, bline_t** optret_line, bint_t* optret_col, bint_t* optret_char_count) {
+int mark_move_bracket_top_ex(mark_t *self, bint_t max_chars, bline_t **optret_line, bint_t *optret_col, bint_t *optret_char_count) {
     MLBUF_MARK_IMPLEMENT_MOVE_VIA_FIND_EX(self, mark_find_bracket_top, max_chars);
 }
 
 // Return 1 if mark is at a word boundary. If side <= -1, return 1 only for
 // left word boundary (i.e., \W\w). If side >= 1, return 1 only for right word
 // boundary (i.e., \w\W). If side == 0, return 1 for either case.
-int mark_is_at_word_bound(mark_t* self, int side) {
+int mark_is_at_word_bound(mark_t *self, int side) {
     uint32_t before, after;
     MLBUF_BLINE_ENSURE_CHARS(self->bline);
     before = self->col > 0 && self->col - 1 < self->bline->char_count ? self->bline->chars[self->col - 1].ch : 0;
@@ -566,7 +566,7 @@ int mark_is_at_word_bound(mark_t* self, int side) {
 }
 
 // Set ovector for capturing substrs
-int mark_set_pcre_capture(int* rc, int* ovector, int ovector_size) {
+int mark_set_pcre_capture(int *rc, int *ovector, int ovector_size) {
     if (rc == NULL || ovector == NULL || ovector_size == 0) {
         rc = NULL;
         pcre_ovector = NULL;
@@ -585,7 +585,7 @@ int mark_set_pcre_capture(int* rc, int* ovector, int ovector_size) {
 }
 
 // Return char after mark, or 0 if at eol.
-int mark_get_char_after(mark_t* self, uint32_t* ret_char) {
+int mark_get_char_after(mark_t *self, uint32_t *ret_char) {
     if (mark_is_at_eol(self)) {
         *ret_char = 0;
     } else {
@@ -596,7 +596,7 @@ int mark_get_char_after(mark_t* self, uint32_t* ret_char) {
 }
 
 // Return char before mark, or 0 if at bol.
-int mark_get_char_before(mark_t* self, uint32_t* ret_char) {
+int mark_get_char_before(mark_t *self, uint32_t *ret_char) {
     if (mark_is_at_bol(self)) {
         *ret_char = 0;
     } else {
@@ -609,7 +609,7 @@ int mark_get_char_before(mark_t* self, uint32_t* ret_char) {
 // Return 1 if mark is after col, else 0. Lefty marks are considered 'after' col
 // if `mark->col > col`. Righty marks (the default) are considered 'after' col
 // if `mark->col >= col`.
-int mark_is_after_col_minus_lefties(mark_t* self, bint_t col) {
+int mark_is_after_col_minus_lefties(mark_t *self, bint_t col) {
     if (self->lefty) {
         return self->col > col ? 1 : 0;
     }
@@ -618,9 +618,9 @@ int mark_is_after_col_minus_lefties(mark_t* self, bint_t col) {
 
 // Find first occurrence of match according to matchfn. Search backwards if
 // reverse is truthy.
-static int mark_find_match(mark_t* self, mark_find_match_fn matchfn, void* u1, void* u2, int reverse, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars) {
-    bline_t* search_line = NULL;
-    char* match = NULL;
+static int mark_find_match(mark_t *self, mark_find_match_fn matchfn, void *u1, void *u2, int reverse, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars) {
+    bline_t *search_line = NULL;
+    char *match = NULL;
     bint_t look_offset = 0;
     bint_t match_col = 0;
     bint_t match_col_end = 0;
@@ -674,10 +674,10 @@ static int mark_find_match(mark_t* self, mark_find_match_fn matchfn, void* u1, v
 
 // Move mark to target:col, setting target_col if do_set_target is truthy,
 // restyling if do_style is truthy
-void _mark_mark_move_inner(mark_t* mark, bline_t* bline_target, bint_t col, int do_set_target, int do_style) {
-    bline_t* bline_orig;
+void _mark_mark_move_inner(mark_t *mark, bline_t *bline_target, bint_t col, int do_set_target, int do_style) {
+    bline_t *bline_orig;
     int is_changing_line;
-    bline_t* bline_restyle;
+    bline_t *bline_restyle;
     bint_t min_restylelines;
     do_style = do_style && mark->range_srule ? 1 : 0;
     is_changing_line = mark->bline != bline_target ? 1 : 0;
@@ -713,9 +713,9 @@ void _mark_mark_move_inner(mark_t* mark, bline_t* bline_target, bint_t col, int
 }
 
 // Return the last occurrence of a match given a forward-searching matchfn
-static char* mark_find_match_prev(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, mark_find_match_fn matchfn, void* u1, void* u2) {
-    char* match;
-    char* last_match;
+static char *mark_find_match_prev(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, mark_find_match_fn matchfn, void *u1, void *u2) {
+    char *match;
+    char *last_match;
     bint_t match_len;
     last_match = NULL;
     while (1) {
@@ -739,10 +739,10 @@ static char* mark_find_match_prev(char* haystack, bint_t haystack_len, bint_t lo
 }
 
 // Find uncompiled regex from mark. Search backwards if reverse is truthy.
-static int mark_find_re(mark_t* self, char* re, bint_t re_len, int reverse, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars) {
+static int mark_find_re(mark_t *self, char *re, bint_t re_len, int reverse, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars) {
     int rc;
-    char* regex;
-    pcre* cre;
+    char *regex;
+    pcre *cre;
     const char *error;
     int erroffset;
     MLBUF_MAKE_GT_EQ0(re_len);
@@ -764,21 +764,21 @@ static int mark_find_re(mark_t* self, char* re, bint_t re_len, int reverse, blin
     return rc;
 }
 
-static char* mark_find_next_str_matchfn(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* needle, void* needle_len, bint_t* ret_needle_len) {
+static char *mark_find_next_str_matchfn(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *needle, void *needle_len, bint_t *ret_needle_len) {
     if (ret_needle_len) *ret_needle_len = *((bint_t*)needle_len);
     if (look_offset >= haystack_len) return NULL;
     return memmem(haystack + look_offset, haystack_len - look_offset, needle, *((bint_t*)needle_len));
 }
 
-static char* mark_find_prev_str_matchfn(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* needle, void* needle_len, bint_t* ret_needle_len) {
+static char *mark_find_prev_str_matchfn(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *needle, void *needle_len, bint_t *ret_needle_len) {
     return mark_find_match_prev(haystack, haystack_len, look_offset, max_offset, mark_find_next_str_matchfn, needle, needle_len);
 }
 
-static char* mark_find_next_cre_matchfn(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* cre, void* unused, bint_t* ret_needle_len) {
+static char *mark_find_next_cre_matchfn(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *cre, void *unused, bint_t *ret_needle_len) {
     int rc;
     int substrs[3];
-    int* use_rc;
-    int* use_substrs;
+    int *use_rc;
+    int *use_substrs;
     int use_substrs_size;
     if (!haystack || haystack_len == 0) {
         haystack = "";
@@ -801,6 +801,6 @@ static char* mark_find_next_cre_matchfn(char* haystack, bint_t haystack_len, bin
     return NULL;
 }
 
-static char* mark_find_prev_cre_matchfn(char* haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void* cre, void* unused, bint_t* ret_needle_len) {
+static char *mark_find_prev_cre_matchfn(char *haystack, bint_t haystack_len, bint_t look_offset, bint_t max_offset, void *cre, void *unused, bint_t *ret_needle_len) {
     return mark_find_match_prev(haystack, haystack_len, look_offset, max_offset, mark_find_next_cre_matchfn, cre, unused);
 }
diff --git a/mlbuf.h b/mlbuf.h
index 7458caf..07f0c10 100644
--- a/mlbuf.h
+++ b/mlbuf.h
@@ -19,12 +19,12 @@ typedef struct srule_s srule_t; // A style rule
 typedef struct srule_node_s srule_node_t; // A node in a list of style rules
 typedef struct sblock_s sblock_t; // A style of a particular character
 typedef struct str_s str_t; // A dynamically resizeable string
-typedef void (*buffer_callback_t)(buffer_t* buffer, baction_t* action, void* udata);
+typedef void (*buffer_callback_t)(buffer_t *buffer, baction_t *action, void *udata);
 typedef intmax_t bint_t;
 
 // str_t
 struct str_s {
-    char* data;
+    char *data;
     size_t len;
     size_t cap;
     ssize_t inc;
@@ -32,18 +32,18 @@ struct str_s {
 
 // buffer_t
 struct buffer_s {
-    bline_t* first_line;
-    bline_t* last_line;
+    bline_t *first_line;
+    bline_t *last_line;
     bint_t byte_count;
     bint_t line_count;
-    srule_node_t* single_srules;
-    srule_node_t* multi_srules;
-    baction_t* actions;
-    baction_t* action_tail;
-    baction_t* action_undone;
+    srule_node_t *single_srules;
+    srule_node_t *multi_srules;
+    baction_t *actions;
+    baction_t *action_tail;
+    baction_t *action_undone;
     str_t registers[26];
-    mark_t* lettered_marks[26];
-    char* path;
+    mark_t *lettered_marks[26];
+    char *path;
     struct stat st;
     int is_unsaved;
     char *data;
@@ -52,12 +52,12 @@ struct buffer_s {
     int ref_count;
     int tab_width;
     buffer_callback_t callback;
-    void* callback_udata;
+    void *callback_udata;
     int mmap_fd;
-    char* mmap;
+    char *mmap;
     size_t mmap_len;
-    bline_char_t* slabbed_chars;
-    bline_t* slabbed_blines;
+    bline_char_t *slabbed_chars;
+    bline_t *slabbed_blines;
     int num_applied_srules;
     int is_in_open;
     int is_in_callback;
@@ -67,23 +67,23 @@ struct buffer_s {
 
 // bline_t
 struct bline_s {
-    buffer_t* buffer;
-    char* data;
+    buffer_t *buffer;
+    char *data;
     bint_t data_len;
     bint_t data_cap;
     bint_t line_index;
     bint_t char_count;
     bint_t char_vwidth;
-    bline_char_t* chars;
+    bline_char_t *chars;
     bint_t chars_cap;
-    mark_t* marks;
-    srule_t* bol_rule;
-    srule_t* eol_rule;
+    mark_t *marks;
+    srule_t *bol_rule;
+    srule_t *eol_rule;
     int is_chars_dirty;
     int is_slabbed;
     int is_data_slabbed;
-    bline_t* next;
-    bline_t* prev;
+    bline_t *next;
+    bline_t *prev;
 };
 
 // sblock_t
@@ -105,174 +105,174 @@ struct bline_char_s {
 // baction_t
 struct baction_s {
     int type; // MLBUF_BACTION_TYPE_*
-    buffer_t* buffer;
-    bline_t* start_line;
+    buffer_t *buffer;
+    bline_t *start_line;
     bint_t start_line_index;
     bint_t start_col;
-    bline_t* maybe_end_line;
+    bline_t *maybe_end_line;
     bint_t maybe_end_line_index;
     bint_t maybe_end_col;
     bint_t byte_delta;
     bint_t char_delta;
     bint_t line_delta;
-    char* data;
+    char *data;
     bint_t data_len;
-    baction_t* next;
-    baction_t* prev;
+    baction_t *next;
+    baction_t *prev;
 };
 
 // mark_t
 struct mark_s {
-    bline_t* bline;
+    bline_t *bline;
     bint_t col;
     bint_t target_col;
-    srule_t* range_srule;
+    srule_t *range_srule;
     char letter;
-    mark_t* next;
-    mark_t* prev;
+    mark_t *next;
+    mark_t *prev;
     int lefty;
 };
 
 // srule_t
 struct srule_s {
     int type; // MLBUF_SRULE_TYPE_*
-    char* re;
-    char* re_end;
-    pcre* cre;
-    pcre* cre_end;
-    pcre_extra* crex;
-    pcre_extra* crex_end;
-    mark_t* range_a;
-    mark_t* range_b;
+    char *re;
+    char *re_end;
+    pcre *cre;
+    pcre *cre_end;
+    pcre_extra *crex;
+    pcre_extra *crex_end;
+    mark_t *range_a;
+    mark_t *range_b;
     sblock_t style;
 };
 
 // srule_node_t
 struct srule_node_s {
-    srule_t* srule;
-    srule_node_t* next;
-    srule_node_t* prev;
+    srule_t *srule;
+    srule_node_t *next;
+    srule_node_t *prev;
 };
 
 // buffer functions
-buffer_t* buffer_new();
-buffer_t* buffer_new_open(char* path);
-mark_t* buffer_add_mark(buffer_t* self, bline_t* maybe_line, bint_t maybe_col);
-mark_t* buffer_add_mark_ex(buffer_t* self, char letter, bline_t* maybe_line, bint_t maybe_col);
-int buffer_get_lettered_mark(buffer_t* self, char letter, mark_t** ret_mark);
-int buffer_destroy_mark(buffer_t* self, mark_t* mark);
-int buffer_open(buffer_t* self, char* path);
-int buffer_save(buffer_t* self);
-int buffer_save_as(buffer_t* self, char* path, bint_t* optret_nbytes);
-int buffer_write_to_file(buffer_t* self, FILE* fp, size_t* optret_nbytes);
-int buffer_write_to_fd(buffer_t* self, int fd, size_t* optret_nbytes);
-int buffer_get(buffer_t* self, char** ret_data, bint_t* ret_data_len);
-int buffer_clear(buffer_t* self);
-int buffer_set(buffer_t* self, char* data, bint_t data_len);
-int buffer_set_mmapped(buffer_t* self, char* data, bint_t data_len);
-int buffer_substr(buffer_t* self, bline_t* start_line, bint_t start_col, bline_t* end_line, bint_t end_col, char** ret_data, bint_t* ret_data_len, bint_t* ret_nchars);
-int buffer_insert(buffer_t* self, bint_t offset, char* data, bint_t data_len, bint_t* optret_num_chars);
-int buffer_delete(buffer_t* self, bint_t offset, bint_t num_chars);
-int buffer_replace(buffer_t* self, bint_t offset, bint_t num_chars, char* data, bint_t data_len);
-int buffer_insert_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col, char* data, bint_t data_len, bint_t* optret_num_chars);
-int buffer_delete_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col, bint_t num_chars);
-int buffer_replace_w_bline(buffer_t* self, bline_t* start_line, bint_t start_col, bint_t num_chars, char* data, bint_t data_len);
-int buffer_get_bline(buffer_t* self, bint_t line_index, bline_t** ret_bline);
-int buffer_get_bline_col(buffer_t* self, bint_t offset, bline_t** ret_bline, bint_t* ret_col);
-int buffer_get_offset(buffer_t* self, bline_t* bline, bint_t col, bint_t* ret_offset);
-int buffer_undo(buffer_t* self);
-int buffer_redo(buffer_t* self);
-int buffer_add_srule(buffer_t* self, srule_t* srule);
-int buffer_remove_srule(buffer_t* self, srule_t* srule);
-int buffer_set_callback(buffer_t* self, buffer_callback_t fn_cb, void* udata);
-int buffer_set_tab_width(buffer_t* self, int tab_width);
-int buffer_set_styles_enabled(buffer_t* self, int is_enabled);
-int buffer_apply_styles(buffer_t* self, bline_t* start_line, bint_t line_delta);
-int buffer_register_set(buffer_t* self, char reg, char* data, size_t data_len);
-int buffer_register_append(buffer_t* self, char reg, char* data, size_t data_len);
-int buffer_register_prepend(buffer_t* self, char reg, char* data, size_t data_len);
-int buffer_register_clear(buffer_t* self, char reg);
-int buffer_register_get(buffer_t* self, char reg, int dup, char** ret_data, size_t* ret_data_len);
-int buffer_destroy(buffer_t* self);
+buffer_t *buffer_new();
+buffer_t *buffer_new_open(char *path);
+mark_t *buffer_add_mark(buffer_t *self, bline_t *maybe_line, bint_t maybe_col);
+mark_t *buffer_add_mark_ex(buffer_t *self, char letter, bline_t *maybe_line, bint_t maybe_col);
+int buffer_get_lettered_mark(buffer_t *self, char letter, mark_t **ret_mark);
+int buffer_destroy_mark(buffer_t *self, mark_t *mark);
+int buffer_open(buffer_t *self, char *path);
+int buffer_save(buffer_t *self);
+int buffer_save_as(buffer_t *self, char *path, bint_t *optret_nbytes);
+int buffer_write_to_file(buffer_t *self, FILE *fp, size_t *optret_nbytes);
+int buffer_write_to_fd(buffer_t *self, int fd, size_t *optret_nbytes);
+int buffer_get(buffer_t *self, char **ret_data, bint_t *ret_data_len);
+int buffer_clear(buffer_t *self);
+int buffer_set(buffer_t *self, char *data, bint_t data_len);
+int buffer_set_mmapped(buffer_t *self, char *data, bint_t data_len);
+int buffer_substr(buffer_t *self, bline_t *start_line, bint_t start_col, bline_t *end_line, bint_t end_col, char **ret_data, bint_t *ret_data_len, bint_t *ret_nchars);
+int buffer_insert(buffer_t *self, bint_t offset, char *data, bint_t data_len, bint_t *optret_num_chars);
+int buffer_delete(buffer_t *self, bint_t offset, bint_t num_chars);
+int buffer_replace(buffer_t *self, bint_t offset, bint_t num_chars, char *data, bint_t data_len);
+int buffer_insert_w_bline(buffer_t *self, bline_t *start_line, bint_t start_col, char *data, bint_t data_len, bint_t *optret_num_chars);
+int buffer_delete_w_bline(buffer_t *self, bline_t *start_line, bint_t start_col, bint_t num_chars);
+int buffer_replace_w_bline(buffer_t *self, bline_t *start_line, bint_t start_col, bint_t num_chars, char *data, bint_t data_len);
+int buffer_get_bline(buffer_t *self, bint_t line_index, bline_t **ret_bline);
+int buffer_get_bline_col(buffer_t *self, bint_t offset, bline_t **ret_bline, bint_t *ret_col);
+int buffer_get_offset(buffer_t *self, bline_t *bline, bint_t col, bint_t *ret_offset);
+int buffer_undo(buffer_t *self);
+int buffer_redo(buffer_t *self);
+int buffer_add_srule(buffer_t *self, srule_t *srule);
+int buffer_remove_srule(buffer_t *self, srule_t *srule);
+int buffer_set_callback(buffer_t *self, buffer_callback_t fn_cb, void *udata);
+int buffer_set_tab_width(buffer_t *self, int tab_width);
+int buffer_set_styles_enabled(buffer_t *self, int is_enabled);
+int buffer_apply_styles(buffer_t *self, bline_t *start_line, bint_t line_delta);
+int buffer_register_set(buffer_t *self, char reg, char *data, size_t data_len);
+int buffer_register_append(buffer_t *self, char reg, char *data, size_t data_len);
+int buffer_register_prepend(buffer_t *self, char reg, char *data, size_t data_len);
+int buffer_register_clear(buffer_t *self, char reg);
+int buffer_register_get(buffer_t *self, char reg, int dup, char **ret_data, size_t *ret_data_len);
+int buffer_destroy(buffer_t *self);
 
 // bline functions
-int bline_insert(bline_t* self, bint_t col, char* data, bint_t data_len, bint_t* ret_num_chars);
-int bline_delete(bline_t* self, bint_t col, bint_t num_chars);
-int bline_replace(bline_t* self, bint_t col, bint_t num_chars, char* data, bint_t data_len);
-int bline_get_col(bline_t* self, bint_t index, bint_t* ret_col);
-int bline_get_col_from_vcol(bline_t* self, bint_t vcol, bint_t* ret_col);
-int bline_count_chars(bline_t* bline);
+int bline_insert(bline_t *self, bint_t col, char *data, bint_t data_len, bint_t *ret_num_chars);
+int bline_delete(bline_t *self, bint_t col, bint_t num_chars);
+int bline_replace(bline_t *self, bint_t col, bint_t num_chars, char *data, bint_t data_len);
+int bline_get_col(bline_t *self, bint_t index, bint_t *ret_col);
+int bline_get_col_from_vcol(bline_t *self, bint_t vcol, bint_t *ret_col);
+int bline_count_chars(bline_t *bline);
 
 // mark functions
-int mark_clone(mark_t* self, mark_t** ret_mark);
-int mark_clone_w_letter(mark_t* self, char letter, mark_t** ret_mark);
-int mark_delete_after(mark_t* self, bint_t num_chars);
-int mark_delete_before(mark_t* self, bint_t num_chars);
-int mark_delete_between_mark(mark_t* self, mark_t* other);
-int mark_destroy(mark_t* self);
-int mark_find_bracket_pair(mark_t* self, bint_t max_chars, bline_t** ret_line, bint_t* ret_col, bint_t* ret_brkt);
-int mark_find_bracket_top(mark_t* self, bint_t max_chars, bline_t** ret_line, bint_t* ret_col, bint_t* ret_brkt);
-int mark_find_next_cre(mark_t* self, pcre* cre, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars);
-int mark_find_next_re(mark_t* self, char* re, bint_t re_len, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars);
-int mark_find_next_str(mark_t* self, char* str, bint_t str_len, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars);
-int mark_find_prev_cre(mark_t* self, pcre* cre, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars);
-int mark_find_prev_re(mark_t* self, char* re, bint_t re_len, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars);
-int mark_find_prev_str(mark_t* self, char* str, bint_t str_len, bline_t** ret_line, bint_t* ret_col, bint_t* ret_num_chars);
-int mark_get_between_mark(mark_t* self, mark_t* other, char** ret_str, bint_t* ret_str_len);
-int mark_get_char_after(mark_t* self, uint32_t* ret_char);
-int mark_get_char_before(mark_t* self, uint32_t* ret_char);
-int mark_get_offset(mark_t* self, bint_t* ret_offset);
-int mark_insert_after(mark_t* self, char* data, bint_t data_len);
-int mark_insert_before(mark_t* self, char* data, bint_t data_len);
-int mark_is_after_col_minus_lefties(mark_t* self, bint_t col);
-int mark_is_at_bol(mark_t* self);
-int mark_is_at_eol(mark_t* self);
-int mark_is_at_word_bound(mark_t* self, int side);
-int mark_is_eq(mark_t* self, mark_t* other);
-int mark_is_gte(mark_t* self, mark_t* other);
-int mark_is_gt(mark_t* self, mark_t* other);
-int mark_is_lte(mark_t* self, mark_t* other);
-int mark_is_lt(mark_t* self, mark_t* other);
-int mark_join(mark_t* self, mark_t* other);
-int mark_move_beginning(mark_t* self);
-int mark_move_bol(mark_t* self);
-int mark_move_bracket_pair_ex(mark_t* self, bint_t max_chars, bline_t** optret_line, bint_t* optret_col, bint_t* optret_num_chars);
-int mark_move_bracket_pair(mark_t* self, bint_t max_chars);
-int mark_move_bracket_top_ex(mark_t* self, bint_t max_chars, bline_t** optret_line, bint_t* optret_col, bint_t* optret_num_chars);
-int mark_move_bracket_top(mark_t* self, bint_t max_chars);
-int mark_move_by(mark_t* self, bint_t char_delta);
-int mark_move_col(mark_t* self, bint_t col);
-int mark_move_end(mark_t* self);
-int mark_move_eol(mark_t* self);
-int mark_move_next_cre_ex(mark_t* self, pcre* cre, bline_t** optret_line, bint_t* optret_col, bint_t* optret_num_chars);
-int mark_move_next_cre(mark_t* self, pcre* cre);
-int mark_move_next_cre_nudge(mark_t* self, pcre* cre);
-int mark_move_next_re_ex(mark_t* self, char* re, bint_t re_len, bline_t** optret_line, bint_t* optret_col, bint_t* optret_num_chars);
-int mark_move_next_re(mark_t* self, char* re, bint_t re_len);
-int mark_move_next_re_nudge(mark_t* self, char* re, bint_t re_len);
-int mark_move_next_str_ex(mark_t* self, char* str, bint_t str_len, bline_t** optret_line, bint_t* optret_col, bint_t* optret_num_chars);
-int mark_move_next_str(mark_t* self, char* str, bint_t str_len);
-int mark_move_next_str_nudge(mark_t* self, char* str, bint_t str_len);
-int mark_move_offset(mark_t* self, bint_t offset);
-int mark_move_prev_cre_ex(mark_t* self, pcre* cre, bline_t** optret_line, bint_t* optret_col, bint_t* optret_num_chars);
-int mark_move_prev_cre(mark_t* self, pcre* cre);
-int mark_move_prev_re_ex(mark_t* self, char* re, bint_t re_len, bline_t** optret_line, bint_t* optret_col, bint_t* optret_num_chars);
-int mark_move_prev_re(mark_t* self, char* re, bint_t re_len);
-int mark_move_prev_str_ex(mark_t* self, char* str, bint_t str_len, bline_t** optret_line, bint_t* optret_col, bint_t* optret_num_chars);
-int mark_move_prev_str(mark_t* self, char* str, bint_t str_len);
-int mark_move_to(mark_t* self, bint_t line_index, bint_t col);
-int mark_move_to_w_bline(mark_t* self, bline_t* bline, bint_t col);
-int mark_move_vert(mark_t* self, bint_t line_delta);
-int mark_replace_between_mark(mark_t* self, mark_t* other, char* data, bint_t data_len);
-int mark_replace(mark_t* self, bint_t num_chars, char* data, bint_t data_len);
-int mark_set_pcre_capture(int* rc, int* ovector, int ovector_size);
-int mark_swap_with_mark(mark_t* self, mark_t* other);
+int mark_clone(mark_t *self, mark_t **ret_mark);
+int mark_clone_w_letter(mark_t *self, char letter, mark_t **ret_mark);
+int mark_delete_after(mark_t *self, bint_t num_chars);
+int mark_delete_before(mark_t *self, bint_t num_chars);
+int mark_delete_between_mark(mark_t *self, mark_t *other);
+int mark_destroy(mark_t *self);
+int mark_find_bracket_pair(mark_t *self, bint_t max_chars, bline_t **ret_line, bint_t *ret_col, bint_t *ret_brkt);
+int mark_find_bracket_top(mark_t *self, bint_t max_chars, bline_t **ret_line, bint_t *ret_col, bint_t *ret_brkt);
+int mark_find_next_cre(mark_t *self, pcre *cre, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars);
+int mark_find_next_re(mark_t *self, char *re, bint_t re_len, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars);
+int mark_find_next_str(mark_t *self, char *str, bint_t str_len, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars);
+int mark_find_prev_cre(mark_t *self, pcre *cre, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars);
+int mark_find_prev_re(mark_t *self, char *re, bint_t re_len, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars);
+int mark_find_prev_str(mark_t *self, char *str, bint_t str_len, bline_t **ret_line, bint_t *ret_col, bint_t *ret_num_chars);
+int mark_get_between_mark(mark_t *self, mark_t *other, char **ret_str, bint_t *ret_str_len);
+int mark_get_char_after(mark_t *self, uint32_t *ret_char);
+int mark_get_char_before(mark_t *self, uint32_t *ret_char);
+int mark_get_offset(mark_t *self, bint_t *ret_offset);
+int mark_insert_after(mark_t *self, char *data, bint_t data_len);
+int mark_insert_before(mark_t *self, char *data, bint_t data_len);
+int mark_is_after_col_minus_lefties(mark_t *self, bint_t col);
+int mark_is_at_bol(mark_t *self);
+int mark_is_at_eol(mark_t *self);
+int mark_is_at_word_bound(mark_t *self, int side);
+int mark_is_eq(mark_t *self, mark_t *other);
+int mark_is_gte(mark_t *self, mark_t *other);
+int mark_is_gt(mark_t *self, mark_t *other);
+int mark_is_lte(mark_t *self, mark_t *other);
+int mark_is_lt(mark_t *self, mark_t *other);
+int mark_join(mark_t *self, mark_t *other);
+int mark_move_beginning(mark_t *self);
+int mark_move_bol(mark_t *self);
+int mark_move_bracket_pair_ex(mark_t *self, bint_t max_chars, bline_t **optret_line, bint_t *optret_col, bint_t *optret_num_chars);
+int mark_move_bracket_pair(mark_t *self, bint_t max_chars);
+int mark_move_bracket_top_ex(mark_t *self, bint_t max_chars, bline_t **optret_line, bint_t *optret_col, bint_t *optret_num_chars);
+int mark_move_bracket_top(mark_t *self, bint_t max_chars);
+int mark_move_by(mark_t *self, bint_t char_delta);
+int mark_move_col(mark_t *self, bint_t col);
+int mark_move_end(mark_t *self);
+int mark_move_eol(mark_t *self);
+int mark_move_next_cre_ex(mark_t *self, pcre *cre, bline_t **optret_line, bint_t *optret_col, bint_t *optret_num_chars);
+int mark_move_next_cre(mark_t *self, pcre *cre);
+int mark_move_next_cre_nudge(mark_t *self, pcre *cre);
+int mark_move_next_re_ex(mark_t *self, char *re, bint_t re_len, bline_t **optret_line, bint_t *optret_col, bint_t *optret_num_chars);
+int mark_move_next_re(mark_t *self, char *re, bint_t re_len);
+int mark_move_next_re_nudge(mark_t *self, char *re, bint_t re_len);
+int mark_move_next_str_ex(mark_t *self, char *str, bint_t str_len, bline_t **optret_line, bint_t *optret_col, bint_t *optret_num_chars);
+int mark_move_next_str(mark_t *self, char *str, bint_t str_len);
+int mark_move_next_str_nudge(mark_t *self, char *str, bint_t str_len);
+int mark_move_offset(mark_t *self, bint_t offset);
+int mark_move_prev_cre_ex(mark_t *self, pcre *cre, bline_t **optret_line, bint_t *optret_col, bint_t *optret_num_chars);
+int mark_move_prev_cre(mark_t *self, pcre *cre);
+int mark_move_prev_re_ex(mark_t *self, char *re, bint_t re_len, bline_t **optret_line, bint_t *optret_col, bint_t *optret_num_chars);
+int mark_move_prev_re(mark_t *self, char *re, bint_t re_len);
+int mark_move_prev_str_ex(mark_t *self, char *str, bint_t str_len, bline_t **optret_line, bint_t *optret_col, bint_t *optret_num_chars);
+int mark_move_prev_str(mark_t *self, char *str, bint_t str_len);
+int mark_move_to(mark_t *self, bint_t line_index, bint_t col);
+int mark_move_to_w_bline(mark_t *self, bline_t *bline, bint_t col);
+int mark_move_vert(mark_t *self, bint_t line_delta);
+int mark_replace_between_mark(mark_t *self, mark_t *other, char *data, bint_t data_len);
+int mark_replace(mark_t *self, bint_t num_chars, char *data, bint_t data_len);
+int mark_set_pcre_capture(int *rc, int *ovector, int ovector_size);
+int mark_swap_with_mark(mark_t *self, mark_t *other);
 
 // srule functions
-srule_t* srule_new_single(char* re, bint_t re_len, int caseless, uint16_t fg, uint16_t bg);
-srule_t* srule_new_multi(char* re, bint_t re_len, char* re_end, bint_t re_end_len, uint16_t fg, uint16_t bg);
-srule_t* srule_new_range(mark_t* range_a, mark_t* range_b, uint16_t fg, uint16_t bg);
-int srule_destroy(srule_t* srule);
+srule_t *srule_new_single(char *re, bint_t re_len, int caseless, uint16_t fg, uint16_t bg);
+srule_t *srule_new_multi(char *re, bint_t re_len, char *re_end, bint_t re_end_len, uint16_t fg, uint16_t bg);
+srule_t *srule_new_range(mark_t *range_a, mark_t *range_b, uint16_t fg, uint16_t bg);
+int srule_destroy(srule_t *srule);
 
 // utf8 functions
 int utf8_char_length(char c);
@@ -280,22 +280,22 @@ int utf8_char_to_unicode(uint32_t *out, const char *c, const char *stop);
 int utf8_unicode_to_char(char *out, uint32_t c);
 
 // util functions
-void* recalloc(void* ptr, size_t orig_num, size_t new_num, size_t el_size);
-void _mark_mark_move_inner(mark_t* mark, bline_t* bline_target, bint_t col, int do_set_target, int do_style);
-void str_append_stop(str_t* str, char* data, char* data_stop);
-void str_append(str_t* str, char* data);
-void str_append_char(str_t* str, char c);
-void str_append_len(str_t* str, char* data, size_t data_len);
-void str_prepend_stop(str_t* str, char* data, char* data_stop);
-void str_prepend(str_t* str, char* data);
-void str_prepend_len(str_t* str, char* data, size_t data_len);
-void str_set(str_t* str, char* data);
-void str_set_len(str_t* str, char* data, size_t data_len);
-void str_put_len(str_t* str, char* data, size_t data_len, int is_prepend);
-void str_ensure_cap(str_t* str, size_t cap);
-void str_clear(str_t* str);
-void str_free(str_t* str);
-void str_append_replace_with_backrefs(str_t* str, char* subj, char* repl, int pcre_rc, int* pcre_ovector, int pcre_ovecsize);
+void *recalloc(void *ptr, size_t orig_num, size_t new_num, size_t el_size);
+void _mark_mark_move_inner(mark_t *mark, bline_t *bline_target, bint_t col, int do_set_target, int do_style);
+void str_append_stop(str_t *str, char *data, char *data_stop);
+void str_append(str_t *str, char *data);
+void str_append_char(str_t *str, char c);
+void str_append_len(str_t *str, char *data, size_t data_len);
+void str_prepend_stop(str_t *str, char *data, char *data_stop);
+void str_prepend(str_t *str, char *data);
+void str_prepend_len(str_t *str, char *data, size_t data_len);
+void str_set(str_t *str, char *data);
+void str_set_len(str_t *str, char *data, size_t data_len);
+void str_put_len(str_t *str, char *data, size_t data_len, int is_prepend);
+void str_ensure_cap(str_t *str, size_t cap);
+void str_clear(str_t *str);
+void str_free(str_t *str);
+void str_append_replace_with_backrefs(str_t *str, char *subj, char *repl, int pcre_rc, int *pcre_ovector, int pcre_ovecsize);
 
 // Macros
 #define MLBUF_DEBUG 1
diff --git a/mle.h b/mle.h
index bf3772f..6a808e5 100644
--- a/mle.h
+++ b/mle.h
@@ -15,7 +15,7 @@ typedef struct editor_s editor_t; // A container for editor-wide globals
 typedef struct bview_s bview_t; // A view of a buffer
 typedef struct bview_rect_s bview_rect_t; // A rectangle in bview with a default styling
 typedef struct bview_listener_s bview_listener_t; // A listener to buffer events in a bview
-typedef void (*bview_listener_cb_t)(bview_t* bview, baction_t* action, void* udata); // A bview_listener_t callback
+typedef void (*bview_listener_cb_t)(bview_t *bview, baction_t *action, void *udata); // A bview_listener_t callback
 typedef struct cursor_s cursor_t; // A cursor (insertion mark + selection bound mark) in a buffer
 typedef struct loop_context_s loop_context_t; // Context for a single _editor_loop
 typedef struct cmd_s cmd_t; // A command definition
@@ -31,13 +31,13 @@ typedef struct syntax_s syntax_t; // A syntax definition
 typedef struct syntax_node_s syntax_node_t; // A node in a linked list of syntaxes
 typedef struct srule_def_s srule_def_t; // A definition of a syntax
 typedef struct aproc_s aproc_t; // An asynchronous process
-typedef void (*aproc_cb_t)(aproc_t* self, char* buf, size_t buf_len); // An aproc_t callback
+typedef void (*aproc_cb_t)(aproc_t *self, char *buf, size_t buf_len); // An aproc_t callback
 typedef struct editor_prompt_params_s editor_prompt_params_t; // Extra params for editor_prompt
 typedef struct tb_event tb_event_t; // A termbox event
 typedef struct prompt_history_s prompt_history_t; // A map of prompt histories keyed by prompt_str
 typedef struct prompt_hnode_s prompt_hnode_t; // A node in a linked list of prompt history
-typedef int (*cmd_func_t)(cmd_context_t* ctx); // A command function
-typedef int (*observer_func_t)(char* event_name, void* event_data, void* udata); // An event callback function
+typedef int (*cmd_func_t)(cmd_context_t *ctx); // A command function
+typedef int (*observer_func_t)(char *event_name, void *event_data, void *udata); // An event callback function
 typedef struct uscript_s uscript_t; // A userscript
 typedef struct uhandle_s uhandle_t; // A method handle in a uscript
 
@@ -62,44 +62,44 @@ struct bview_rect_s {
 struct editor_s {
     int w;
     int h;
-    bview_t* top_bviews;
-    bview_t* all_bviews;
-    bview_t* active;
-    bview_t* active_edit;
-    bview_t* active_edit_root;
-    bview_t* status;
-    bview_t* prompt;
+    bview_t *top_bviews;
+    bview_t *all_bviews;
+    bview_t *active;
+    bview_t *active_edit;
+    bview_t *active_edit_root;
+    bview_t *status;
+    bview_t *prompt;
     bview_rect_t rect_edit;
     bview_rect_t rect_status;
     bview_rect_t rect_prompt;
-    syntax_t* syntax_map;
+    syntax_t *syntax_map;
     int is_display_disabled;
-    kmacro_t* macro_map;
+    kmacro_t *macro_map;
     kinput_t macro_toggle_key;
-    kmacro_t* macro_record;
-    kmacro_t* macro_apply;
+    kmacro_t *macro_record;
+    kmacro_t *macro_apply;
     size_t macro_apply_input_index;
     int is_recording_macro;
-    char* startup_macro_name;
-    cmd_t* cmd_map;
-    kmap_t* kmap_map;
-    kmap_t* kmap_normal;
-    kmap_t* kmap_prompt_input;
-    kmap_t* kmap_prompt_yn;
-    kmap_t* kmap_prompt_yna;
-    kmap_t* kmap_prompt_ok;
-    kmap_t* kmap_prompt_isearch;
-    kmap_t* kmap_prompt_menu;
-    kmap_t* kmap_menu;
-    prompt_history_t* prompt_history;
-    char* kmap_init_name;
-    kmap_t* kmap_init;
-    aproc_t* aprocs;
-    uscript_t* uscripts;
-    observer_t* observers;
-    FILE* tty;
+    char *startup_macro_name;
+    cmd_t *cmd_map;
+    kmap_t *kmap_map;
+    kmap_t *kmap_normal;
+    kmap_t *kmap_prompt_input;
+    kmap_t *kmap_prompt_yn;
+    kmap_t *kmap_prompt_yna;
+    kmap_t *kmap_prompt_ok;
+    kmap_t *kmap_prompt_isearch;
+    kmap_t *kmap_prompt_menu;
+    kmap_t *kmap_menu;
+    prompt_history_t *prompt_history;
+    char *kmap_init_name;
+    kmap_t *kmap_init;
+    aproc_t *aprocs;
+    uscript_t *uscripts;
+    observer_t *observers;
+    FILE *tty;
     int ttyfd;
-    char* syntax_override;
+    char *syntax_override;
     int linenum_type;
     int tab_width;
     int tab_to_space;
@@ -112,12 +112,12 @@ struct editor_s {
     int viewport_scope_x; // TODO cli option
     int viewport_scope_y; // TODO cli option
     int headless_mode;
-    loop_context_t* loop_ctx;
+    loop_context_t *loop_ctx;
     int loop_depth;
     int is_in_init;
-    char* insertbuf;
+    char *insertbuf;
     size_t insertbuf_size;
-    char* cut_buffer;
+    char *cut_buffer;
     #define MLE_ERRSTR_SIZE 256
     char errstr[MLE_ERRSTR_SIZE];
     char infostr[MLE_ERRSTR_SIZE];
@@ -128,26 +128,26 @@ struct editor_s {
 
 // srule_def_t
 struct srule_def_s {
-    char* re;
-    char* re_end;
+    char *re;
+    char *re_end;
     uint16_t fg;
     uint16_t bg;
 };
 
 // syntax_node_t
 struct syntax_node_s {
-    srule_t* srule;
-    syntax_node_t* next;
-    syntax_node_t* prev;
+    srule_t *srule;
+    syntax_node_t *next;
+    syntax_node_t *prev;
 };
 
 // syntax_t
 struct syntax_s {
-    char* name;
-    char* path_pattern;
+    char *name;
+    char *path_pattern;
     int tab_width;
     int tab_to_space;
-    srule_node_t* srules;
+    srule_node_t *srules;
     UT_hash_handle hh;
 };
 
@@ -156,7 +156,7 @@ struct bview_s {
     #define MLE_BVIEW_TYPE_EDIT 0
     #define MLE_BVIEW_TYPE_STATUS 1
     #define MLE_BVIEW_TYPE_PROMPT 2
-    editor_t* editor;
+    editor_t *editor;
     int x;
     int y;
     int w;
@@ -171,65 +171,65 @@ struct bview_s {
     bview_rect_t rect_margin_left;
     bview_rect_t rect_buffer;
     bview_rect_t rect_margin_right;
-    buffer_t* buffer;
+    buffer_t *buffer;
     bint_t viewport_x;
     bint_t viewport_x_vcol;
     bint_t viewport_y;
-    bline_t* viewport_bline;
+    bline_t *viewport_bline;
     int viewport_scope_x;
     int viewport_scope_y;
-    bview_t* split_parent;
-    bview_t* split_child;
+    bview_t *split_parent;
+    bview_t *split_child;
     float split_factor;
     int split_is_vertical;
-    char* prompt_str;
-    char* path;
+    char *prompt_str;
+    char *path;
     bint_t startup_linenum;
-    kmap_node_t* kmap_stack;
-    kmap_node_t* kmap_tail;
-    cursor_t* cursors;
-    cursor_t* active_cursor;
-    char* last_search;
-    srule_t* isearch_rule;
+    kmap_node_t *kmap_stack;
+    kmap_node_t *kmap_tail;
+    cursor_t *cursors;
+    cursor_t *active_cursor;
+    char *last_search;
+    srule_t *isearch_rule;
     int tab_width;
     int tab_to_space;
-    syntax_t* syntax;
-    aproc_t* aproc;
+    syntax_t *syntax;
+    aproc_t *aproc;
     cmd_func_t menu_callback;
     int is_menu;
     char init_cwd[PATH_MAX + 1];
-    bview_listener_t* listeners;
-    bview_t* top_next;
-    bview_t* top_prev;
-    bview_t* all_next;
-    bview_t* all_prev;
+    bview_listener_t *listeners;
+    bview_t *top_next;
+    bview_t *top_prev;
+    bview_t *all_next;
+    bview_t *all_prev;
 };
 
 // bview_listener_t
 struct bview_listener_s {
     bview_listener_cb_t callback;
-    void* udata;
-    bview_listener_t* next;
-    bview_listener_t* prev;
+    void *udata;
+    bview_listener_t *next;
+    bview_listener_t *prev;
 };
 
 // cursor_t
 struct cursor_s {
-    bview_t* bview;
-    mark_t* mark;
-    mark_t* anchor;
+    bview_t *bview;
+    mark_t *mark;
+    mark_t *anchor;
     int is_anchored;
     int is_asleep;
-    srule_t* sel_rule;
-    char* cut_buffer;
-    cursor_t* next;
-    cursor_t* prev;
+    srule_t *sel_rule;
+    char *cut_buffer;
+    cursor_t *next;
+    cursor_t *prev;
 };
 
 // kmacro_t
 struct kmacro_s {
-    char* name;
-    kinput_t* inputs;
+    char *name;
+    kinput_t *inputs;
     size_t inputs_len;
     size_t inputs_cap;
     UT_hash_handle hh;
@@ -237,9 +237,9 @@ struct kmacro_s {
 
 // cmd_t
 struct cmd_s {
-    char* name;
+    char *name;
     cmd_func_t func;
-    void* udata;
+    void *udata;
     int is_resolved;
     UT_hash_handle hh;
 };
@@ -248,54 +248,54 @@ struct cmd_s {
 struct kbinding_def_s {
     #define MLE_KBINDING_DEF(pcmdname, pkeypatt)             { (pcmdname), (pkeypatt), NULL }
     #define MLE_KBINDING_DEF_EX(pcmdname, pkeypatt, pstatp)  { (pcmdname), (pkeypatt), (pstatp) }
-    char* cmd_name;
-    char* key_patt;
-    char* static_param;
+    char *cmd_name;
+    char *key_patt;
+    char *static_param;
 };
 
 // kbinding_t
 struct kbinding_s {
     kinput_t input;
-    char* cmd_name;
-    cmd_t* cmd;
-    char* static_param;
-    char* key_patt;
+    char *cmd_name;
+    cmd_t *cmd;
+    char *static_param;
+    char *key_patt;
     int is_leaf;
-    kbinding_t* children;
+    kbinding_t *children;
     UT_hash_handle hh;
 };
 
 // kmap_node_t
 struct kmap_node_s {
-    kmap_t* kmap;
-    bview_t* bview;
-    kmap_node_t* next;
-    kmap_node_t* prev;
+    kmap_t *kmap;
+    bview_t *bview;
+    kmap_node_t *next;
+    kmap_node_t *prev;
 };
 
 // kmap_t
 struct kmap_s {
-    char* name;
-    kbinding_t* bindings;
+    char *name;
+    kbinding_t *bindings;
     int allow_fallthru;
-    char* default_cmd_name;
-    cmd_t* default_cmd;
+    char *default_cmd_name;
+    cmd_t *default_cmd;
     UT_hash_handle hh;
 };
 
 // cmd_context_t
 struct cmd_context_s {
     #define MLE_PASTEBUF_INCR 1024
-    editor_t* editor;
-    loop_context_t* loop_ctx;
-    cmd_t* cmd;
-    buffer_t* buffer;
-    bview_t* bview;
-    cursor_t* cursor;
+    editor_t *editor;
+    loop_context_t *loop_ctx;
+    cmd_t *cmd;
+    buffer_t *buffer;
+    bview_t *bview;
+    cursor_t *cursor;
     kinput_t input;
-    char* static_param;
+    char *static_param;
     int is_user_input;
-    kinput_t* pastebuf;
+    kinput_t *pastebuf;
     size_t pastebuf_len;
     size_t pastebuf_size;
     int has_pastebuf_leftover;
@@ -304,11 +304,11 @@ struct cmd_context_s {
 
 // observer_t
 struct observer_s {
-    char* event_name;
+    char *event_name;
     observer_func_t callback;
-    void* udata;
-    observer_t* next;
-    observer_t* prev;
+    void *udata;
+    observer_t *next;
+    observer_t *prev;
 };
 
 // loop_context_t
@@ -317,261 +317,261 @@ struct loop_context_s {
     #define MLE_LOOP_CTX_MAX_NUMERIC_PARAMS 8
     #define MLE_LOOP_CTX_MAX_WILDCARD_PARAMS 8
     #define MLE_LOOP_CTX_MAX_COMPLETE_TERM_SIZE 256
-    bview_t* invoker;
+    bview_t *invoker;
     char numeric[MLE_LOOP_CTX_MAX_NUMERIC_LEN + 1];
-    kbinding_t* numeric_node;
+    kbinding_t *numeric_node;
     int numeric_len;
     uintmax_t numeric_params[MLE_LOOP_CTX_MAX_NUMERIC_PARAMS];
     int numeric_params_len;
     uint32_t wildcard_params[MLE_LOOP_CTX_MAX_WILDCARD_PARAMS];
     int wildcard_params_len;
-    kbinding_t* binding_node;
+    kbinding_t *binding_node;
     int need_more_input;
     int should_exit;
-    char* prompt_answer;
+    char *prompt_answer;
     cmd_func_t prompt_callack;
-    prompt_hnode_t* prompt_hnode;
+    prompt_hnode_t *prompt_hnode;
     int tab_complete_index;
     char tab_complete_term[MLE_LOOP_CTX_MAX_COMPLETE_TERM_SIZE];
-    cmd_t* last_cmd;
+    cmd_t *last_cmd;
     str_t last_insert;
 };
 
 // aproc_t
 struct aproc_s {
-    editor_t* editor;
-    void* owner;
-    aproc_t** owner_aproc;
-    FILE* rpipe;
-    FILE* wpipe;
+    editor_t *editor;
+    void *owner;
+    aproc_t **owner_aproc;
+    FILE *rpipe;
+    FILE *wpipe;
     pid_t pid;
     int rfd;
     int wfd;
     int is_done;
     aproc_cb_t callback;
-    aproc_t* next;
-    aproc_t* prev;
+    aproc_t *next;
+    aproc_t *prev;
 };
 
 // editor_prompt_params_t
 struct editor_prompt_params_s {
-    char* data;
+    char *data;
     int data_len;
-    kmap_t* kmap;
+    kmap_t *kmap;
     bview_listener_cb_t prompt_cb;
-    void* prompt_cb_udata;
+    void *prompt_cb_udata;
 };
 
 // prompt_history_t
 struct prompt_history_s {
-    char* prompt_str;
-    prompt_hnode_t* prompt_hlist;
+    char *prompt_str;
+    prompt_hnode_t *prompt_hlist;
     UT_hash_handle hh;
 };
 
 // prompt_hnode_t
 struct prompt_hnode_s {
-    char* data;
+    char *data;
     bint_t data_len;
-    prompt_hnode_t* prev;
-    prompt_hnode_t* next;
+    prompt_hnode_t *prev;
+    prompt_hnode_t *next;
 };
 
 // uscript_t
 struct uscript_s {
-    editor_t* editor;
-    lua_State* L;
-    uhandle_t* uhandles;
-    uscript_t* prev;
-    uscript_t* next;
+    editor_t *editor;
+    lua_State *L;
+    uhandle_t *uhandles;
+    uscript_t *prev;
+    uscript_t *next;
 };
 
 // uhandle_t
 struct uhandle_s {
-    uscript_t* uscript;
+    uscript_t *uscript;
     int callback_ref;
-    uhandle_t* next;
-    uhandle_t* prev;
+    uhandle_t *next;
+    uhandle_t *prev;
 };
 
 // editor functions
-int editor_init(editor_t* editor, int argc, char** argv);
-int editor_run(editor_t* editor);
-int editor_deinit(editor_t* editor);
-int editor_prompt(editor_t* editor, char* prompt, editor_prompt_params_t* params, char** optret_answer);
-int editor_menu(editor_t* editor, cmd_func_t fn_callback, char* opt_buf_data, int opt_buf_data_len, aproc_t* opt_aproc, bview_t** optret_menu);
-int editor_open_bview(editor_t* editor, bview_t* opt_parent, int type, char* opt_path, int opt_path_len, int make_active, bint_t linenum, int skip_resize, buffer_t* opt_buffer, bview_t** optret_bview);
-int editor_close_bview(editor_t* editor, bview_t* bview, int* optret_num_closed);
-int editor_set_active(editor_t* editor, bview_t* bview);
-int editor_bview_edit_count(editor_t* editor);
-int editor_count_bviews_by_buffer(editor_t* editor, buffer_t* buffer);
-int editor_register_cmd(editor_t* editor, cmd_t* cmd);
-int editor_register_observer(editor_t* editor, char* event_name, void* udata, observer_func_t fn_callback, observer_t** optret_observer);
-int editor_notify_observers(editor_t* editor, char* event_name, void* event_data);
-int editor_destroy_observer(editor_t* editor, observer_t* observer);
-int editor_get_input(editor_t* editor, loop_context_t* loop_ctx, cmd_context_t* ctx);
-int editor_display(editor_t* editor);
-int editor_debug_dump(editor_t* editor, FILE* fp);
-int editor_input_to_key(editor_t* editor, kinput_t* input, char* keybuf);
+int editor_init(editor_t *editor, int argc, char **argv);
+int editor_run(editor_t *editor);
+int editor_deinit(editor_t *editor);
+int editor_prompt(editor_t *editor, char *prompt, editor_prompt_params_t *params, char **optret_answer);
+int editor_menu(editor_t *editor, cmd_func_t fn_callback, char *opt_buf_data, int opt_buf_data_len, aproc_t *opt_aproc, bview_t **optret_menu);
+int editor_open_bview(editor_t *editor, bview_t *opt_parent, int type, char *opt_path, int opt_path_len, int make_active, bint_t linenum, int skip_resize, buffer_t *opt_buffer, bview_t **optret_bview);
+int editor_close_bview(editor_t *editor, bview_t *bview, int *optret_num_closed);
+int editor_set_active(editor_t *editor, bview_t *bview);
+int editor_bview_edit_count(editor_t *editor);
+int editor_count_bviews_by_buffer(editor_t *editor, buffer_t *buffer);
+int editor_register_cmd(editor_t *editor, cmd_t *cmd);
+int editor_register_observer(editor_t *editor, char *event_name, void *udata, observer_func_t fn_callback, observer_t **optret_observer);
+int editor_notify_observers(editor_t *editor, char *event_name, void *event_data);
+int editor_destroy_observer(editor_t *editor, observer_t *observer);
+int editor_get_input(editor_t *editor, loop_context_t *loop_ctx, cmd_context_t *ctx);
+int editor_display(editor_t *editor);
+int editor_debug_dump(editor_t *editor, FILE *fp);
+int editor_input_to_key(editor_t *editor, kinput_t *input, char *keybuf);
 
 // bview functions
-bview_t* bview_get_split_root(bview_t* self);
-bview_t* bview_new(editor_t* editor, char* opt_path, int opt_path_len, buffer_t* opt_buffer);
-int bview_add_cursor_asleep(bview_t* self, bline_t* opt_bline, bint_t opt_col, cursor_t** optret_cursor);
-int bview_add_cursor(bview_t* self, bline_t* opt_bline, bint_t opt_col, cursor_t** optret_cursor);
-int bview_add_listener(bview_t* self, bview_listener_cb_t fn_callback, void* udata);
-int bview_center_viewport_y(bview_t* self);
-int bview_destroy(bview_t* self);
-int bview_destroy_listener(bview_t* self, bview_listener_t* listener);
-int bview_draw(bview_t* self);
-int bview_draw_cursor(bview_t* self, int set_real_cursor);
-int bview_get_active_cursor_count(bview_t* self);
-int bview_get_screen_coords(bview_t* self, mark_t* mark, int* ret_x, int* ret_y, struct tb_cell** optret_cell);
-int bview_max_viewport_y(bview_t* self);
-int bview_open(bview_t* self, char* path, int path_len);
-int bview_pop_kmap(bview_t* bview, kmap_t** optret_kmap);
-int bview_push_kmap(bview_t* bview, kmap_t* kmap);
-int bview_rectify_viewport(bview_t* self);
-int bview_remove_cursor(bview_t* self, cursor_t* cursor);
-int bview_remove_cursors_except(bview_t* self, cursor_t* one);
-int bview_resize(bview_t* self, int x, int y, int w, int h);
-int bview_set_syntax(bview_t* self, char* opt_syntax);
-int bview_set_viewport_y(bview_t* self, bint_t y, int do_rectify);
-int bview_split(bview_t* self, int is_vertical, float factor, bview_t** optret_bview);
-int bview_wake_sleeping_cursors(bview_t* self);
-int bview_zero_viewport_y(bview_t* self);
+bview_t *bview_get_split_root(bview_t *self);
+bview_t *bview_new(editor_t *editor, char *opt_path, int opt_path_len, buffer_t *opt_buffer);
+int bview_add_cursor_asleep(bview_t *self, bline_t *opt_bline, bint_t opt_col, cursor_t **optret_cursor);
+int bview_add_cursor(bview_t *self, bline_t *opt_bline, bint_t opt_col, cursor_t **optret_cursor);
+int bview_add_listener(bview_t *self, bview_listener_cb_t fn_callback, void *udata);
+int bview_center_viewport_y(bview_t *self);
+int bview_destroy(bview_t *self);
+int bview_destroy_listener(bview_t *self, bview_listener_t *listener);
+int bview_draw(bview_t *self);
+int bview_draw_cursor(bview_t *self, int set_real_cursor);
+int bview_get_active_cursor_count(bview_t *self);
+int bview_get_screen_coords(bview_t *self, mark_t *mark, int *ret_x, int *ret_y, struct tb_cell **optret_cell);
+int bview_max_viewport_y(bview_t *self);
+int bview_open(bview_t *self, char *path, int path_len);
+int bview_pop_kmap(bview_t *bview, kmap_t **optret_kmap);
+int bview_push_kmap(bview_t *bview, kmap_t *kmap);
+int bview_rectify_viewport(bview_t *self);
+int bview_remove_cursor(bview_t *self, cursor_t *cursor);
+int bview_remove_cursors_except(bview_t *self, cursor_t *one);
+int bview_resize(bview_t *self, int x, int y, int w, int h);
+int bview_set_syntax(bview_t *self, char *opt_syntax);
+int bview_set_viewport_y(bview_t *self, bint_t y, int do_rectify);
+int bview_split(bview_t *self, int is_vertical, float factor, bview_t **optret_bview);
+int bview_wake_sleeping_cursors(bview_t *self);
+int bview_zero_viewport_y(bview_t *self);
 
 // cursor functions
-int cursor_clone(cursor_t* cursor, int use_srules, cursor_t** ret_clone);
-int cursor_cut_copy(cursor_t* cursor, int is_cut, int use_srules, int append);
-int cursor_destroy(cursor_t* cursor);
-int cursor_drop_anchor(cursor_t* cursor, int use_srules);
-int cursor_get_lo_hi(cursor_t* cursor, mark_t** ret_lo, mark_t** ret_hi);
-int cursor_get_mark(cursor_t* cursor, mark_t** ret_mark);
-int cursor_get_anchor(cursor_t* cursor, mark_t** ret_anchor);
-int cursor_lift_anchor(cursor_t* cursor);
-int cursor_replace(cursor_t* cursor, int interactive, char* opt_regex, char* opt_replacement);
-int cursor_select_between(cursor_t* cursor, mark_t* a, mark_t* b, int use_srules);
-int cursor_select_by(cursor_t* cursor, const char* strat);
-int cursor_select_by_bracket(cursor_t* cursor);
-int cursor_select_by_string(cursor_t* cursor);
-int cursor_select_by_word_back(cursor_t* cursor);
-int cursor_select_by_word(cursor_t* cursor);
-int cursor_select_by_word_forward(cursor_t* cursor);
-int cursor_toggle_anchor(cursor_t* cursor, int use_srules);
-int cursor_uncut(cursor_t* cursor);
+int cursor_clone(cursor_t *cursor, int use_srules, cursor_t **ret_clone);
+int cursor_cut_copy(cursor_t *cursor, int is_cut, int use_srules, int append);
+int cursor_destroy(cursor_t *cursor);
+int cursor_drop_anchor(cursor_t *cursor, int use_srules);
+int cursor_get_lo_hi(cursor_t *cursor, mark_t **ret_lo, mark_t **ret_hi);
+int cursor_get_mark(cursor_t *cursor, mark_t **ret_mark);
+int cursor_get_anchor(cursor_t *cursor, mark_t **ret_anchor);
+int cursor_lift_anchor(cursor_t *cursor);
+int cursor_replace(cursor_t *cursor, int interactive, char *opt_regex, char *opt_replacement);
+int cursor_select_between(cursor_t *cursor, mark_t *a, mark_t *b, int use_srules);
+int cursor_select_by(cursor_t *cursor, const char *strat);
+int cursor_select_by_bracket(cursor_t *cursor);
+int cursor_select_by_string(cursor_t *cursor);
+int cursor_select_by_word_back(cursor_t *cursor);
+int cursor_select_by_word(cursor_t *cursor);
+int cursor_select_by_word_forward(cursor_t *cursor);
+int cursor_toggle_anchor(cursor_t *cursor, int use_srules);
+int cursor_uncut(cursor_t *cursor);
 
 // cmd functions
-int cmd_apply_macro_by(cmd_context_t* ctx);
-int cmd_apply_macro(cmd_context_t* ctx);
-int cmd_browse(cmd_context_t* ctx);
-int cmd_close(cmd_context_t* ctx);
-int cmd_copy_by(cmd_context_t* ctx);
-int cmd_copy(cmd_context_t* ctx);
-int cmd_ctag(cmd_context_t* ctx);
-int cmd_cut_by(cmd_context_t* ctx);
-int cmd_cut(cmd_context_t* ctx);
-int cmd_delete_after(cmd_context_t* ctx);
-int cmd_delete_before(cmd_context_t* ctx);
-int cmd_delete_word_after(cmd_context_t* ctx);
-int cmd_delete_word_before(cmd_context_t* ctx);
-int cmd_drop_cursor_column(cmd_context_t* ctx);
-int cmd_drop_sleeping_cursor(cmd_context_t* ctx);
-int cmd_find_word(cmd_context_t* ctx);
-int cmd_fsearch(cmd_context_t* ctx);
-int cmd_grep(cmd_context_t* ctx);
-int cmd_indent(cmd_context_t* ctx);
-int cmd_insert_data(cmd_context_t* ctx);
-int cmd_insert_newline_above(cmd_context_t* ctx);
-int cmd_insert_newline(cmd_context_t* ctx);
-int cmd_insert_tab(cmd_context_t* ctx);
-int cmd_isearch(cmd_context_t* ctx);
-int cmd_jump(cmd_context_t* ctx);
-int cmd_less(cmd_context_t* ctx);
-int cmd_move_beginning(cmd_context_t* ctx);
-int cmd_move_bol(cmd_context_t* ctx);
-int cmd_move_bracket_back(cmd_context_t* ctx);
-int cmd_move_bracket_forward(cmd_context_t* ctx);
-int cmd_move_bracket_toggle(cmd_context_t* ctx);
-int cmd_move_down(cmd_context_t* ctx);
-int cmd_move_end(cmd_context_t* ctx);
-int cmd_move_eol(cmd_context_t* ctx);
-int cmd_move_left(cmd_context_t* ctx);
-int cmd_move_page_down(cmd_context_t* ctx);
-int cmd_move_page_up(cmd_context_t* ctx);
-int cmd_move_relative(cmd_context_t* ctx);
-int cmd_move_right(cmd_context_t* ctx);
-int cmd_move_to_line(cmd_context_t* ctx);
-int cmd_move_until_back(cmd_context_t* ctx);
-int cmd_move_until_forward(cmd_context_t* ctx);
-int cmd_move_up(cmd_context_t* ctx);
-int cmd_move_word_back(cmd_context_t* ctx);
-int cmd_move_word_forward(cmd_context_t* ctx);
-int cmd_next(cmd_context_t* ctx);
-int cmd_noop(cmd_context_t* ctx);
-int cmd_open_file(cmd_context_t* ctx);
-int cmd_open_new(cmd_context_t* ctx);
-int cmd_open_replace_file(cmd_context_t* ctx);
-int cmd_open_replace_new(cmd_context_t* ctx);
-int cmd_outdent(cmd_context_t* ctx);
-int cmd_perl(cmd_context_t* ctx);
-int cmd_pop_kmap(cmd_context_t* ctx);
-int cmd_prev(cmd_context_t* ctx);
-int cmd_push_kmap(cmd_context_t* ctx);
-int cmd_quit(cmd_context_t* ctx);
-int cmd_quit_without_saving(cmd_context_t* ctx);
-int cmd_redo(cmd_context_t* ctx);
-int cmd_redraw(cmd_context_t* ctx);
-int cmd_remove_extra_cursors(cmd_context_t* ctx);
-int cmd_replace(cmd_context_t* ctx);
-int cmd_save_as(cmd_context_t* ctx);
-int cmd_save(cmd_context_t* ctx);
-int cmd_search(cmd_context_t* ctx);
-int cmd_search_next(cmd_context_t* ctx);
-int cmd_set_opt(cmd_context_t* ctx);
-int cmd_shell(cmd_context_t* ctx);
-int cmd_show_help(cmd_context_t* ctx);
-int cmd_split_horizontal(cmd_context_t* ctx);
-int cmd_split_vertical(cmd_context_t* ctx);
-int cmd_toggle_anchor(cmd_context_t* ctx);
-int cmd_uncut(cmd_context_t* ctx);
-int cmd_undo(cmd_context_t* ctx);
-int cmd_viewport_bot(cmd_context_t* ctx);
-int cmd_viewport_mid(cmd_context_t* ctx);
-int cmd_viewport_toggle(cmd_context_t* ctx);
-int cmd_viewport_top(cmd_context_t* ctx);
-int cmd_wake_sleeping_cursors(cmd_context_t* ctx);
+int cmd_apply_macro_by(cmd_context_t *ctx);
+int cmd_apply_macro(cmd_context_t *ctx);
+int cmd_browse(cmd_context_t *ctx);
+int cmd_close(cmd_context_t *ctx);
+int cmd_copy_by(cmd_context_t *ctx);
+int cmd_copy(cmd_context_t *ctx);
+int cmd_ctag(cmd_context_t *ctx);
+int cmd_cut_by(cmd_context_t *ctx);
+int cmd_cut(cmd_context_t *ctx);
+int cmd_delete_after(cmd_context_t *ctx);
+int cmd_delete_before(cmd_context_t *ctx);
+int cmd_delete_word_after(cmd_context_t *ctx);
+int cmd_delete_word_before(cmd_context_t *ctx);
+int cmd_drop_cursor_column(cmd_context_t *ctx);
+int cmd_drop_sleeping_cursor(cmd_context_t *ctx);
+int cmd_find_word(cmd_context_t *ctx);
+int cmd_fsearch(cmd_context_t *ctx);
+int cmd_grep(cmd_context_t *ctx);
+int cmd_indent(cmd_context_t *ctx);
+int cmd_insert_data(cmd_context_t *ctx);
+int cmd_insert_newline_above(cmd_context_t *ctx);
+int cmd_insert_newline(cmd_context_t *ctx);
+int cmd_insert_tab(cmd_context_t *ctx);
+int cmd_isearch(cmd_context_t *ctx);
+int cmd_jump(cmd_context_t *ctx);
+int cmd_less(cmd_context_t *ctx);
+int cmd_move_beginning(cmd_context_t *ctx);
+int cmd_move_bol(cmd_context_t *ctx);
+int cmd_move_bracket_back(cmd_context_t *ctx);
+int cmd_move_bracket_forward(cmd_context_t *ctx);
+int cmd_move_bracket_toggle(cmd_context_t *ctx);
+int cmd_move_down(cmd_context_t *ctx);
+int cmd_move_end(cmd_context_t *ctx);
+int cmd_move_eol(cmd_context_t *ctx);
+int cmd_move_left(cmd_context_t *ctx);
+int cmd_move_page_down(cmd_context_t *ctx);
+int cmd_move_page_up(cmd_context_t *ctx);
+int cmd_move_relative(cmd_context_t *ctx);
+int cmd_move_right(cmd_context_t *ctx);
+int cmd_move_to_line(cmd_context_t *ctx);
+int cmd_move_until_back(cmd_context_t *ctx);
+int cmd_move_until_forward(cmd_context_t *ctx);
+int cmd_move_up(cmd_context_t *ctx);
+int cmd_move_word_back(cmd_context_t *ctx);
+int cmd_move_word_forward(cmd_context_t *ctx);
+int cmd_next(cmd_context_t *ctx);
+int cmd_noop(cmd_context_t *ctx);
+int cmd_open_file(cmd_context_t *ctx);
+int cmd_open_new(cmd_context_t *ctx);
+int cmd_open_replace_file(cmd_context_t *ctx);
+int cmd_open_replace_new(cmd_context_t *ctx);
+int cmd_outdent(cmd_context_t *ctx);
+int cmd_perl(cmd_context_t *ctx);
+int cmd_pop_kmap(cmd_context_t *ctx);
+int cmd_prev(cmd_context_t *ctx);
+int cmd_push_kmap(cmd_context_t *ctx);
+int cmd_quit(cmd_context_t *ctx);
+int cmd_quit_without_saving(cmd_context_t *ctx);
+int cmd_redo(cmd_context_t *ctx);
+int cmd_redraw(cmd_context_t *ctx);
+int cmd_remove_extra_cursors(cmd_context_t *ctx);
+int cmd_replace(cmd_context_t *ctx);
+int cmd_save_as(cmd_context_t *ctx);
+int cmd_save(cmd_context_t *ctx);
+int cmd_search(cmd_context_t *ctx);
+int cmd_search_next(cmd_context_t *ctx);
+int cmd_set_opt(cmd_context_t *ctx);
+int cmd_shell(cmd_context_t *ctx);
+int cmd_show_help(cmd_context_t *ctx);
+int cmd_split_horizontal(cmd_context_t *ctx);
+int cmd_split_vertical(cmd_context_t *ctx);
+int cmd_toggle_anchor(cmd_context_t *ctx);
+int cmd_uncut(cmd_context_t *ctx);
+int cmd_undo(cmd_context_t *ctx);
+int cmd_viewport_bot(cmd_context_t *ctx);
+int cmd_viewport_mid(cmd_context_t *ctx);
+int cmd_viewport_toggle(cmd_context_t *ctx);
+int cmd_viewport_top(cmd_context_t *ctx);
+int cmd_wake_sleeping_cursors(cmd_context_t *ctx);
 
 // async functions
-aproc_t* aproc_new(editor_t* editor, void* owner, aproc_t** owner_aproc, char* shell_cmd, int rw, aproc_cb_t fn_callback);
-int aproc_set_owner(aproc_t* aproc, void* owner, aproc_t** owner_aproc);
-int aproc_destroy(aproc_t* aproc, int preempt);
-int aproc_drain_all(aproc_t* aprocs, int* ttyfd);
+aproc_t *aproc_new(editor_t *editor, void *owner, aproc_t **owner_aproc, char *shell_cmd, int rw, aproc_cb_t fn_callback);
+int aproc_set_owner(aproc_t *aproc, void *owner, aproc_t **owner_aproc);
+int aproc_destroy(aproc_t *aproc, int preempt);
+int aproc_drain_all(aproc_t *aprocs, int *ttyfd);
 
 // uscript functions
-uscript_t* uscript_run(editor_t* editor, char* path);
-int uscript_destroy(uscript_t* uscript);
+uscript_t *uscript_run(editor_t *editor, char *path);
+int uscript_destroy(uscript_t *uscript);
 
 // util functions
-int util_shell_exec(editor_t* editor, char* cmd, long timeout_s, char* input, size_t input_len, int setsid, char* opt_shell, char** optret_output, size_t* optret_output_len);
-int util_popen2(char* cmd, int setsid, char* opt_shell, int* optret_fdread, int* optret_fdwrite, pid_t* optret_pid);
-int util_get_bracket_pair(uint32_t ch, int* optret_is_closing);
-int util_is_file(char* path, char* opt_mode, FILE** optret_file);
-int util_is_dir(char* path);
-int util_pcre_match(char* re, char* subject, int subject_len, char** optret_capture, int* optret_capture_len);
-int util_pcre_replace(char* re, char* subj, char* repl, char** ret_result, int* ret_result_len);
-int util_timeval_is_gt(struct timeval* a, struct timeval* b);
-char* util_escape_shell_arg(char* str, int l);
+int util_shell_exec(editor_t *editor, char *cmd, long timeout_s, char *input, size_t input_len, int setsid, char *opt_shell, char **optret_output, size_t *optret_output_len);
+int util_popen2(char *cmd, int setsid, char *opt_shell, int *optret_fdread, int *optret_fdwrite, pid_t *optret_pid);
+int util_get_bracket_pair(uint32_t ch, int *optret_is_closing);
+int util_is_file(char *path, char *opt_mode, FILE **optret_file);
+int util_is_dir(char *path);
+int util_pcre_match(char *re, char *subject, int subject_len, char **optret_capture, int *optret_capture_len);
+int util_pcre_replace(char *re, char *subj, char *repl, char **ret_result, int *ret_result_len);
+int util_timeval_is_gt(struct timeval *a, struct timeval *b);
+char *util_escape_shell_arg(char *str, int l);
 int tb_print(int x, int y, uint16_t fg, uint16_t bg, char *str);
 int tb_printf(bview_rect_t rect, int x, int y, uint16_t fg, uint16_t bg, const char *fmt, ...);
 int tb_printf_attr(bview_rect_t rect, int x, int y, const char *fmt, ...);
-void str_append_stop(str_t* str, char* data, char* data_stop);
-void str_append(str_t* str, char* data);
-void str_append_len(str_t* str, char* data, size_t data_len);
-void str_ensure_cap(str_t* str, size_t cap);
-void str_clear(str_t* str);
-void str_free(str_t* str);
-void str_append_replace_with_backrefs(str_t* str, char* subj, char* repl, int pcre_rc, int* pcre_ovector, int pcre_ovecsize);
+void str_append_stop(str_t *str, char *data, char *data_stop);
+void str_append(str_t *str, char *data);
+void str_append_len(str_t *str, char *data, size_t data_len);
+void str_ensure_cap(str_t *str, size_t cap);
+void str_clear(str_t *str);
+void str_free(str_t *str);
+void str_append_replace_with_backrefs(str_t *str, char *subj, char *repl, int pcre_rc, int *pcre_ovector, int pcre_ovecsize);
 
 // Globals
 extern editor_t _editor;
@@ -674,7 +674,7 @@ TODO BACKLOG
 [ ] investigate crash when M-e cat'ing huge files
 [ ] add mark stack (push, move around, pop to go back)
 [ ] add last cmd status indicator
-[ ] pass in (bline_t* opt_hint) to buffer_get_* and start from there instead of first_line
+[ ] pass in (bline_t *opt_hint) to buffer_get_ *and start from there instead of first_line
 [ ] check if buffer exists by inode instead of path
 [ ] review default key bindings
 [ ] review use of multi_cursor_code
diff --git a/tests/unit/test.h b/tests/unit/test.h
index 56e234b..07c260c 100644
--- a/tests/unit/test.h
+++ b/tests/unit/test.h
@@ -7,14 +7,14 @@
 #include "mlbuf.h"
 
 editor_t _editor;
-extern char* str;
-void test(buffer_t* buf, mark_t* cur);
+extern char *str;
+void test(buffer_t *buf, mark_t *cur);
 
 // TODO run each test with buffer_set_slabbed + buffer_insert
 
 int main(int argc, char **argv) {
-    buffer_t* buf;
-    mark_t* cur;
+    buffer_t *buf;
+    mark_t *cur;
     memset(&_editor, 0, sizeof(editor_t));
     setlocale(LC_ALL, "");
     buf = buffer_new();
diff --git a/tests/unit/test_bline_delete.c b/tests/unit/test_bline_delete.c
index 5e55559..ab3703a 100644
--- a/tests/unit/test_bline_delete.c
+++ b/tests/unit/test_bline_delete.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     char *data;
     bint_t data_len;
 
diff --git a/tests/unit/test_bline_get_col.c b/tests/unit/test_bline_get_col.c
index b477216..9091609 100644
--- a/tests/unit/test_bline_get_col.c
+++ b/tests/unit/test_bline_get_col.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "h\xc3\x85llo \xe4\xb8\x96\xe7\x95\x8c"; // "hallo ww"
+char *str = "h\xc3\x85llo \xe4\xb8\x96\xe7\x95\x8c"; // "hallo ww"
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
 //    01   2   34567   8   9   10  11  12
 //    01       23456           7
     bint_t col;
diff --git a/tests/unit/test_bline_insert.c b/tests/unit/test_bline_insert.c
index 3cb89b6..72b2b77 100644
--- a/tests/unit/test_bline_insert.c
+++ b/tests/unit/test_bline_insert.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     char *data;
     bint_t data_len;
 
diff --git a/tests/unit/test_buffer_add_mark.c b/tests/unit/test_buffer_add_mark.c
index f878604..8c0c9b0 100644
--- a/tests/unit/test_buffer_add_mark.c
+++ b/tests/unit/test_buffer_add_mark.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    mark_t* mark;
+void test(buffer_t *buf, mark_t *cur) {
+    mark_t *mark;
 
     mark = buffer_add_mark(buf, NULL, 0);
     ASSERT("mark0bline", 1, mark->bline == buf->first_line ? 1 : 0);
diff --git a/tests/unit/test_buffer_add_srule.c b/tests/unit/test_buffer_add_srule.c
index 1d607f6..fdb98a6 100644
--- a/tests/unit/test_buffer_add_srule.c
+++ b/tests/unit/test_buffer_add_srule.c
@@ -1,11 +1,11 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     bint_t i;
-    srule_t* srule1;
-    srule_t* srule2;
+    srule_t *srule1;
+    srule_t *srule2;
 
     srule1 = srule_new_single("world", sizeof("world")-1, 0, 1, 2);
     srule2 = srule_new_multi("lo", sizeof("lo")-1, "wo", sizeof("wo")-1, 3, 4);
diff --git a/tests/unit/test_buffer_delete.c b/tests/unit/test_buffer_delete.c
index 8c09b77..76bfded 100644
--- a/tests/unit/test_buffer_delete.c
+++ b/tests/unit/test_buffer_delete.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     char *data;
     bint_t data_len;
 
diff --git a/tests/unit/test_buffer_destroy.c b/tests/unit/test_buffer_destroy.c
index 1aee0e6..819b018 100644
--- a/tests/unit/test_buffer_destroy.c
+++ b/tests/unit/test_buffer_destroy.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     ASSERT("yes", 1, 1);
 }
 
diff --git a/tests/unit/test_buffer_get.c b/tests/unit/test_buffer_get.c
index 15857b1..e002a36 100644
--- a/tests/unit/test_buffer_get.c
+++ b/tests/unit/test_buffer_get.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* data;
+void test(buffer_t *buf, mark_t *cur) {
+    char *data;
     bint_t data_len;
 
     buffer_get(buf, &data, &data_len);
diff --git a/tests/unit/test_buffer_get_bline.c b/tests/unit/test_buffer_get_bline.c
index d374123..8db1e6d 100644
--- a/tests/unit/test_buffer_get_bline.c
+++ b/tests/unit/test_buffer_get_bline.c
@@ -1,11 +1,11 @@
 #include "test.h"
 
-char* str = "0\n1\n2\n3\n4\n";
+char *str = "0\n1\n2\n3\n4\n";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     bint_t i;
-    bline_t* line;
-    bline_t* line2;
+    bline_t *line;
+    bline_t *line2;
     for (line = buf->first_line, i = 0; line; line = line->next, i += 1) {
         buffer_get_bline(buf, i, &line2);
         ASSERT("line", line, line2);
diff --git a/tests/unit/test_buffer_get_bline_col.c b/tests/unit/test_buffer_get_bline_col.c
index 35639c4..4596296 100644
--- a/tests/unit/test_buffer_get_bline_col.c
+++ b/tests/unit/test_buffer_get_bline_col.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    bline_t* line;
+void test(buffer_t *buf, mark_t *cur) {
+    bline_t *line;
     bint_t col;
 
     buffer_get_bline_col(buf, 0, &line, &col);
diff --git a/tests/unit/test_buffer_get_offset.c b/tests/unit/test_buffer_get_offset.c
index d3ce54f..159fdf7 100644
--- a/tests/unit/test_buffer_get_offset.c
+++ b/tests/unit/test_buffer_get_offset.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     bint_t offset;
 
     buffer_get_offset(buf, buf->first_line, 0, &offset);
diff --git a/tests/unit/test_buffer_insert.c b/tests/unit/test_buffer_insert.c
index e2ffc58..b60143c 100644
--- a/tests/unit/test_buffer_insert.c
+++ b/tests/unit/test_buffer_insert.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     char *data;
     bint_t data_len;
     bint_t nchars;
diff --git a/tests/unit/test_buffer_new.c b/tests/unit/test_buffer_new.c
index 1aee0e6..819b018 100644
--- a/tests/unit/test_buffer_new.c
+++ b/tests/unit/test_buffer_new.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     ASSERT("yes", 1, 1);
 }
 
diff --git a/tests/unit/test_buffer_redo.c b/tests/unit/test_buffer_redo.c
index 8755590..9fb74de 100644
--- a/tests/unit/test_buffer_redo.c
+++ b/tests/unit/test_buffer_redo.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hi";
+char *str = "hi";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* data;
+void test(buffer_t *buf, mark_t *cur) {
+    char *data;
     bint_t data_len;
 
     buffer_delete(buf, 0, 1);
diff --git a/tests/unit/test_buffer_register.c b/tests/unit/test_buffer_register.c
index 08148a4..1b253f4 100644
--- a/tests/unit/test_buffer_register.c
+++ b/tests/unit/test_buffer_register.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hi";
+char *str = "hi";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* reg;
+void test(buffer_t *buf, mark_t *cur) {
+    char *reg;
     size_t reg_len;
 
     buffer_register_set(buf, 'a', "yo", 2);
diff --git a/tests/unit/test_buffer_remove_srule.c b/tests/unit/test_buffer_remove_srule.c
index d3c2771..e1b630d 100644
--- a/tests/unit/test_buffer_remove_srule.c
+++ b/tests/unit/test_buffer_remove_srule.c
@@ -1,10 +1,10 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     bint_t i;
-    srule_t* srule;
+    srule_t *srule;
     srule = srule_new_single("world", sizeof("world")-1, 0, 1, 2);
     buffer_add_srule(buf, srule);
     buffer_remove_srule(buf, srule);
diff --git a/tests/unit/test_buffer_replace.c b/tests/unit/test_buffer_replace.c
index e9a6ec0..02f22a3 100644
--- a/tests/unit/test_buffer_replace.c
+++ b/tests/unit/test_buffer_replace.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "lineA\n\nline2\nline3\n";
+char *str = "lineA\n\nline2\nline3\n";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     char *data;
     bint_t data_len;
 
diff --git a/tests/unit/test_buffer_set.c b/tests/unit/test_buffer_set.c
index 6008351..0e09d4a 100644
--- a/tests/unit/test_buffer_set.c
+++ b/tests/unit/test_buffer_set.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     char *data;
     bint_t data_len;
     buffer_set(buf, "goodbye\nvoid", 12);
diff --git a/tests/unit/test_buffer_set_callback.c b/tests/unit/test_buffer_set_callback.c
index dd063c5..92075b0 100644
--- a/tests/unit/test_buffer_set_callback.c
+++ b/tests/unit/test_buffer_set_callback.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-buffer_t* global_buf;
-int* global_udata;
+buffer_t *global_buf;
+int *global_udata;
 
-static void callback_fn(buffer_t* buf, baction_t* bac, void* udata) {
+static void callback_fn(buffer_t *buf, baction_t *bac, void *udata) {
     ASSERT("bufp", global_buf, buf);
     ASSERT("udata", (void*)global_udata, udata);
     ASSERT("bac_type", MLBUF_BACTION_TYPE_INSERT, bac->type);
@@ -20,9 +20,9 @@ static void callback_fn(buffer_t* buf, baction_t* bac, void* udata) {
     ASSERT("bac_data", 0, strncmp("te\nst", bac->data, bac->data_len));
 }
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     int udata;
     udata = 42;
     global_buf = buf;
diff --git a/tests/unit/test_buffer_set_tab_width.c b/tests/unit/test_buffer_set_tab_width.c
index 3a72ff9..f35b13b 100644
--- a/tests/unit/test_buffer_set_tab_width.c
+++ b/tests/unit/test_buffer_set_tab_width.c
@@ -2,9 +2,9 @@
 
 #define comma ,
 
-char* str = "he\tllo\t\t";
+char *str = "he\tllo\t\t";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     bint_t i;
     bint_t char_vcols_4[8] = {0 comma  1 comma  2 comma  4 comma  5 comma  6 comma  7 comma  8};
     bint_t char_vcols_2a[8] = {0 comma  1 comma  2 comma  4 comma  5 comma  6 comma  7 comma  8};
diff --git a/tests/unit/test_buffer_substr.c b/tests/unit/test_buffer_substr.c
index fdb0344..055b4b6 100644
--- a/tests/unit/test_buffer_substr.c
+++ b/tests/unit/test_buffer_substr.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     char *data;
     bint_t data_len;
     bint_t nchars;
diff --git a/tests/unit/test_buffer_undo.c b/tests/unit/test_buffer_undo.c
index 82a92af..7a411db 100644
--- a/tests/unit/test_buffer_undo.c
+++ b/tests/unit/test_buffer_undo.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hi";
+char *str = "hi";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* data;
+void test(buffer_t *buf, mark_t *cur) {
+    char *data;
     bint_t data_len;
 
     buffer_delete(buf, 0, 1);
diff --git a/tests/unit/test_mark_clone.c b/tests/unit/test_mark_clone.c
index 0a636b0..9b0107d 100644
--- a/tests/unit/test_mark_clone.c
+++ b/tests/unit/test_mark_clone.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    mark_t* other;
+void test(buffer_t *buf, mark_t *cur) {
+    mark_t *other;
     mark_clone(cur, &other);
     ASSERT("neq", 1, other != cur ? 1 : 0);
     ASSERT("next", 1, other == cur->next ? 1 : 0);
diff --git a/tests/unit/test_mark_delete_after.c b/tests/unit/test_mark_delete_after.c
index 2028227..186ea1a 100644
--- a/tests/unit/test_mark_delete_after.c
+++ b/tests/unit/test_mark_delete_after.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* data;
+void test(buffer_t *buf, mark_t *cur) {
+    char *data;
     bint_t data_len;
     mark_move_beginning(cur);
     mark_delete_after(cur, 1);
diff --git a/tests/unit/test_mark_delete_before.c b/tests/unit/test_mark_delete_before.c
index 45d0c2d..30f19a3 100644
--- a/tests/unit/test_mark_delete_before.c
+++ b/tests/unit/test_mark_delete_before.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* data;
+void test(buffer_t *buf, mark_t *cur) {
+    char *data;
     bint_t data_len;
     mark_move_end(cur);
     mark_delete_before(cur, 1);
diff --git a/tests/unit/test_mark_delete_between_mark.c b/tests/unit/test_mark_delete_between_mark.c
index 52ccf0f..66372a5 100644
--- a/tests/unit/test_mark_delete_between_mark.c
+++ b/tests/unit/test_mark_delete_between_mark.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    mark_t* other;
+void test(buffer_t *buf, mark_t *cur) {
+    mark_t *other;
     other = buffer_add_mark(buf, NULL, 0);
     mark_move_beginning(cur);
     mark_move_end(other);
diff --git a/tests/unit/test_mark_delete_between_mark_2.c b/tests/unit/test_mark_delete_between_mark_2.c
index 74c5d97..900968b 100644
--- a/tests/unit/test_mark_delete_between_mark_2.c
+++ b/tests/unit/test_mark_delete_between_mark_2.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "  hello {\n    world\n  }";
+char *str = "  hello {\n    world\n  }";
 
-void test(buffer_t* buf, mark_t* cur) {
-    mark_t* other;
+void test(buffer_t *buf, mark_t *cur) {
+    mark_t *other;
     other = buffer_add_mark(buf, NULL, 0);
     mark_move_next_str(cur, "{", 1);
     mark_move_by(cur, 1);
diff --git a/tests/unit/test_mark_find_bracket_pair.c b/tests/unit/test_mark_find_bracket_pair.c
index 59972ca..74e4f3f 100644
--- a/tests/unit/test_mark_find_bracket_pair.c
+++ b/tests/unit/test_mark_find_bracket_pair.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "[ bracket [ test ] ] xyz";
+char *str = "[ bracket [ test ] ] xyz";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur);
     mark_move_bracket_pair(cur, 1024);
     ASSERT("col1", 19, cur->col);
diff --git a/tests/unit/test_mark_get_between_mark.c b/tests/unit/test_mark_get_between_mark.c
index 598a4b6..f0bb6ca 100644
--- a/tests/unit/test_mark_get_between_mark.c
+++ b/tests/unit/test_mark_get_between_mark.c
@@ -1,11 +1,11 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* str;
+void test(buffer_t *buf, mark_t *cur) {
+    char *str;
     bint_t str_len;
-    mark_t* other;
+    mark_t *other;
     other = buffer_add_mark(buf, NULL, 0);
     mark_move_beginning(cur);
     mark_move_end(other);
diff --git a/tests/unit/test_mark_get_offset.c b/tests/unit/test_mark_get_offset.c
index 6bf9f3c..cc3e135 100644
--- a/tests/unit/test_mark_get_offset.c
+++ b/tests/unit/test_mark_get_offset.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     bint_t offset;
 
     mark_move_end(cur);
diff --git a/tests/unit/test_mark_insert_after.c b/tests/unit/test_mark_insert_after.c
index 8c482e6..fb97ed9 100644
--- a/tests/unit/test_mark_insert_after.c
+++ b/tests/unit/test_mark_insert_after.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* data;
+void test(buffer_t *buf, mark_t *cur) {
+    char *data;
     bint_t data_len;
     mark_move_beginning(cur);
     mark_insert_after(cur, "s", 1);
diff --git a/tests/unit/test_mark_insert_before.c b/tests/unit/test_mark_insert_before.c
index 11fdb8d..722fa3c 100644
--- a/tests/unit/test_mark_insert_before.c
+++ b/tests/unit/test_mark_insert_before.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    char* data;
+void test(buffer_t *buf, mark_t *cur) {
+    char *data;
     bint_t data_len;
     mark_move_beginning(cur);
     mark_insert_before(cur, "s", 1);
diff --git a/tests/unit/test_mark_is_at_word_bound.c b/tests/unit/test_mark_is_at_word_bound.c
index 722a9bb..f300414 100644
--- a/tests/unit/test_mark_is_at_word_bound.c
+++ b/tests/unit/test_mark_is_at_word_bound.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "obj->method() yes bob";
+char *str = "obj->method() yes bob";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur); // |obj->method() yes bob
     ASSERT("l_bol", 1, mark_is_at_word_bound(cur, -1));
     ASSERT("x_bol", 1, mark_is_at_word_bound(cur, 0));
diff --git a/tests/unit/test_mark_is_gt.c b/tests/unit/test_mark_is_gt.c
index f319a72..1f4c5df 100644
--- a/tests/unit/test_mark_is_gt.c
+++ b/tests/unit/test_mark_is_gt.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    mark_t* other;
+void test(buffer_t *buf, mark_t *cur) {
+    mark_t *other;
     other = buffer_add_mark(buf, NULL, 0);
 
     mark_move_beginning(cur);
diff --git a/tests/unit/test_mark_lettered.c b/tests/unit/test_mark_lettered.c
index 4890c5c..37fb034 100644
--- a/tests/unit/test_mark_lettered.c
+++ b/tests/unit/test_mark_lettered.c
@@ -1,11 +1,11 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    mark_t* lett1;
-    mark_t* lett2;
-    mark_t* lett3;
+void test(buffer_t *buf, mark_t *cur) {
+    mark_t *lett1;
+    mark_t *lett2;
+    mark_t *lett3;
 
     mark_clone_w_letter(cur, 'a', &lett1);
     ASSERT("neq1", 1, lett1 != cur ? 1 : 0);
diff --git a/tests/unit/test_mark_move_bol.c b/tests/unit/test_mark_move_bol.c
index 27d52ae..fd5d8b8 100644
--- a/tests/unit/test_mark_move_bol.c
+++ b/tests/unit/test_mark_move_bol.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_end(cur);
     mark_move_bol(cur);
     ASSERT("line", buf->first_line->next, cur->bline);
diff --git a/tests/unit/test_mark_move_bracket_pair.c b/tests/unit/test_mark_move_bracket_pair.c
index 59972ca..74e4f3f 100644
--- a/tests/unit/test_mark_move_bracket_pair.c
+++ b/tests/unit/test_mark_move_bracket_pair.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "[ bracket [ test ] ] xyz";
+char *str = "[ bracket [ test ] ] xyz";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur);
     mark_move_bracket_pair(cur, 1024);
     ASSERT("col1", 19, cur->col);
diff --git a/tests/unit/test_mark_move_by.c b/tests/unit/test_mark_move_by.c
index 20be25e..0a944f8 100644
--- a/tests/unit/test_mark_move_by.c
+++ b/tests/unit/test_mark_move_by.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur);
 
     mark_move_by(cur, 1);
diff --git a/tests/unit/test_mark_move_col.c b/tests/unit/test_mark_move_col.c
index eb1a189..4806d03 100644
--- a/tests/unit/test_mark_move_col.c
+++ b/tests/unit/test_mark_move_col.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur);
 
     mark_move_col(cur, 5);
diff --git a/tests/unit/test_mark_move_eol.c b/tests/unit/test_mark_move_eol.c
index 1751186..9cbfc58 100644
--- a/tests/unit/test_mark_move_eol.c
+++ b/tests/unit/test_mark_move_eol.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur);
     mark_move_eol(cur);
     ASSERT("line", buf->first_line, cur->bline);
diff --git a/tests/unit/test_mark_move_next_re.c b/tests/unit/test_mark_move_next_re.c
index e2e9af4..549b2f4 100644
--- a/tests/unit/test_mark_move_next_re.c
+++ b/tests/unit/test_mark_move_next_re.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hi\nanna\nbanana";
+char *str = "hi\nanna\nbanana";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur);
 
     mark_move_next_re(cur, "an+a", strlen("an+a"));
diff --git a/tests/unit/test_mark_move_next_str.c b/tests/unit/test_mark_move_next_str.c
index 6c1ae09..b9b4678 100644
--- a/tests/unit/test_mark_move_next_str.c
+++ b/tests/unit/test_mark_move_next_str.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hi\nana\nbanana";
+char *str = "hi\nana\nbanana";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur);
 
     mark_move_next_str(cur, "ana", strlen("ana"));
diff --git a/tests/unit/test_mark_move_offset.c b/tests/unit/test_mark_move_offset.c
index dcc193e..43ff528 100644
--- a/tests/unit/test_mark_move_offset.c
+++ b/tests/unit/test_mark_move_offset.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_offset(cur, 11);
     ASSERT("col1", 5, cur->col);
     ASSERT("line1", buf->first_line->next, cur->bline);
diff --git a/tests/unit/test_mark_move_prev_re.c b/tests/unit/test_mark_move_prev_re.c
index 5353a72..9c1892d 100644
--- a/tests/unit/test_mark_move_prev_re.c
+++ b/tests/unit/test_mark_move_prev_re.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hi\nanna\nbanana";
+char *str = "hi\nanna\nbanana";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_end(cur);
 
     mark_move_prev_re(cur, "an+a", strlen("an+a"));
diff --git a/tests/unit/test_mark_move_prev_str.c b/tests/unit/test_mark_move_prev_str.c
index 2467185..5949e86 100644
--- a/tests/unit/test_mark_move_prev_str.c
+++ b/tests/unit/test_mark_move_prev_str.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hi\nana\nbanana";
+char *str = "hi\nana\nbanana";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_end(cur);
 
     mark_move_prev_str(cur, "ana", strlen("ana"));
diff --git a/tests/unit/test_mark_move_to.c b/tests/unit/test_mark_move_to.c
index ff1a05b..674b45c 100644
--- a/tests/unit/test_mark_move_to.c
+++ b/tests/unit/test_mark_move_to.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_beginning(cur);
 
     mark_move_to(cur, 0, 0);
diff --git a/tests/unit/test_mark_move_vert.c b/tests/unit/test_mark_move_vert.c
index f152f0b..02fe56c 100644
--- a/tests/unit/test_mark_move_vert.c
+++ b/tests/unit/test_mark_move_vert.c
@@ -1,8 +1,8 @@
 #include "test.h"
 
-char* str = "hi\nworld";
+char *str = "hi\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     mark_move_end(cur);
 
     mark_move_vert(cur, 1);
diff --git a/tests/unit/test_mark_set_pcre_ovector.c b/tests/unit/test_mark_set_pcre_ovector.c
index af18325..48c05cc 100644
--- a/tests/unit/test_mark_set_pcre_ovector.c
+++ b/tests/unit/test_mark_set_pcre_ovector.c
@@ -1,11 +1,11 @@
 #include "test.h"
 
-char* str = "Ervin won gold at age 35!";
+char *str = "Ervin won gold at age 35!";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     int ovector[6] = {0};
     int rc = 0;
-    bline_t* bline;
+    bline_t *bline;
     bint_t col;
     bint_t nchars;
 
diff --git a/tests/unit/test_mark_swap_with_mark.c b/tests/unit/test_mark_swap_with_mark.c
index 0a0596a..a71a850 100644
--- a/tests/unit/test_mark_swap_with_mark.c
+++ b/tests/unit/test_mark_swap_with_mark.c
@@ -1,9 +1,9 @@
 #include "test.h"
 
-char* str = "hello\nworld";
+char *str = "hello\nworld";
 
-void test(buffer_t* buf, mark_t* cur) {
-    mark_t* other;
+void test(buffer_t *buf, mark_t *cur) {
+    mark_t *other;
     other = buffer_add_mark(buf, NULL, 0);
     mark_move_beginning(cur);
     mark_move_end(other);
diff --git a/tests/unit/test_recalloc.c b/tests/unit/test_recalloc.c
index 70ae56d..c0a329a 100644
--- a/tests/unit/test_recalloc.c
+++ b/tests/unit/test_recalloc.c
@@ -5,12 +5,12 @@ typedef struct {
     int b;
 } thing_t;
 
-char* str = "";
+char *str = "";
 
-void test(buffer_t* buf, mark_t* cur) {
+void test(buffer_t *buf, mark_t *cur) {
     int i;
     int is_all_zero;
-    thing_t* things;
+    thing_t *things;
     int nsize = 1024;
 
     things = calloc(1, sizeof(thing_t));
diff --git a/uscript.c b/uscript.c
index 69a4b54..c0a868e 100644
--- a/uscript.c
+++ b/uscript.c
@@ -21,39 +21,39 @@
     lua_settable((pL), -3); \
 } while (0)
 
-static int _uscript_panic(lua_State* L);
-static int _uscript_cmd_cb(cmd_context_t* ctx);
-static int _uscript_observer_cb(char* event_name, void* event_data, void* udata);
-static int _uscript_write(lua_State* L);
-static void _uscript_push_event_map(uscript_t* uscript, char* event_name, void* event_data);
-static void _uscript_push_cmd_map(lua_State* L, cmd_context_t* ctx);
-static void _uscript_push_baction_map(lua_State* L, baction_t* baction);
-static int _uscript_func_editor_prompt(lua_State* L);
-static int _uscript_func_editor_register_cmd(lua_State* L);
-static int _uscript_func_editor_register_observer(lua_State* L);
-static int _uscript_func_util_escape_shell_arg(lua_State* L);
-static int _uscript_func_util_shell_exec(lua_State* L);
-static int _uscript_func_editor_get_input(lua_State* L);
-static int _uscript_func_editor_menu(lua_State* L);
-static int _uscript_func_bview_pop_kmap(lua_State* L);
-static int _uscript_func_bview_push_kmap(lua_State* L);
-static int _uscript_func_buffer_set_callback(lua_State* L);
-static int _uscript_func_buffer_add_srule(lua_State* L);
-static int _uscript_func_buffer_remove_srule(lua_State* L);
-static int _uscript_func_buffer_write_to_file(lua_State* L);
-static int _uscript_func_editor_input_to_key(lua_State* L);
-static void* luaL_checkpointer(lua_State* L, int arg);
-static void* luaL_optpointer(lua_State* L, int arg, void* def);
-static void lua_pushpointer(lua_State* L, void* ptr);
-static int luaL_checkfunction(lua_State* L, int arg);
+static int _uscript_panic(lua_State *L);
+static int _uscript_cmd_cb(cmd_context_t *ctx);
+static int _uscript_observer_cb(char *event_name, void *event_data, void *udata);
+static int _uscript_write(lua_State *L);
+static void _uscript_push_event_map(uscript_t *uscript, char *event_name, void *event_data);
+static void _uscript_push_cmd_map(lua_State *L, cmd_context_t *ctx);
+static void _uscript_push_baction_map(lua_State *L, baction_t *baction);
+static int _uscript_func_editor_prompt(lua_State *L);
+static int _uscript_func_editor_register_cmd(lua_State *L);
+static int _uscript_func_editor_register_observer(lua_State *L);
+static int _uscript_func_util_escape_shell_arg(lua_State *L);
+static int _uscript_func_util_shell_exec(lua_State *L);
+static int _uscript_func_editor_get_input(lua_State *L);
+static int _uscript_func_editor_menu(lua_State *L);
+static int _uscript_func_bview_pop_kmap(lua_State *L);
+static int _uscript_func_bview_push_kmap(lua_State *L);
+static int _uscript_func_buffer_set_callback(lua_State *L);
+static int _uscript_func_buffer_add_srule(lua_State *L);
+static int _uscript_func_buffer_remove_srule(lua_State *L);
+static int _uscript_func_buffer_write_to_file(lua_State *L);
+static int _uscript_func_editor_input_to_key(lua_State *L);
+static void *luaL_checkpointer(lua_State *L, int arg);
+static void *luaL_optpointer(lua_State *L, int arg, void *def);
+static void lua_pushpointer(lua_State *L, void *ptr);
+static int luaL_checkfunction(lua_State *L, int arg);
 static int luaopen_mle(lua_State *L);
 
 #include "uscript.inc"
 
 // Run uscript
-uscript_t* uscript_run(editor_t* editor, char* path) {
-    lua_State* L;
-    uscript_t* uscript;
+uscript_t *uscript_run(editor_t *editor, char *path) {
+    lua_State *L;
+    uscript_t *uscript;
     L = luaL_newstate();
     luaL_openlibs(L);
     luaL_requiref(L, "mle", luaopen_mle, 1);
@@ -81,21 +81,21 @@ uscript_t* uscript_run(editor_t* editor, char* path) {
 }
 
 // Destroy uscript
-int uscript_destroy(uscript_t* uscript) {
+int uscript_destroy(uscript_t *uscript) {
     lua_close(uscript->L);
     return MLE_OK;
 }
 
-static int _uscript_panic(lua_State* L) {
+static int _uscript_panic(lua_State *L) {
    MLE_SET_ERR(&_editor, "uscript panic: %s", lua_tostring(L, -1));
    return 0;
 }
 
 // Invoke cmd in uscript
-static int _uscript_cmd_cb(cmd_context_t* ctx) {
+static int _uscript_cmd_cb(cmd_context_t *ctx) {
     int rv;
-    lua_State* L;
-    uhandle_t* uhandle;
+    lua_State *L;
+    uhandle_t *uhandle;
     int top;
 
     uhandle = (uhandle_t*)(ctx->cmd->udata);
@@ -117,10 +117,10 @@ static int _uscript_cmd_cb(cmd_context_t* ctx) {
     return rv;
 }
 
-static int _uscript_observer_cb(char* event_name, void* event_data, void* udata) {
+static int _uscript_observer_cb(char *event_name, void *event_data, void *udata) {
     int rv;
-    lua_State* L;
-    uhandle_t* uhandle;
+    lua_State *L;
+    uhandle_t *uhandle;
     uhandle = (uhandle_t*)(udata);
     L = uhandle->uscript->L;
 
@@ -140,10 +140,10 @@ static int _uscript_observer_cb(char* event_name, void* event_data, void* udata)
 }
 
 // Handle write from uscript
-static int _uscript_write(lua_State* L) {
-    uscript_t* uscript;
-    char* str;
-    mark_t* mark;
+static int _uscript_write(lua_State *L) {
+    uscript_t *uscript;
+    char *str;
+    mark_t *mark;
     int i, nargs;
     nargs = lua_gettop(L);
     MLE_USCRIPT_GET(L, uscript);
@@ -160,8 +160,8 @@ static int _uscript_write(lua_State* L) {
     return 0;
 }
 
-static void _uscript_push_event_map(uscript_t* uscript, char* event_name, void* event_data) {
-    lua_State* L;
+static void _uscript_push_event_map(uscript_t *uscript, char *event_name, void *event_data) {
+    lua_State *L;
     L = uscript->L;
     if (strcmp(event_name, "buffer:baction") == 0) {
         _uscript_push_baction_map(L, (baction_t*)event_data);
@@ -177,7 +177,7 @@ static void _uscript_push_event_map(uscript_t* uscript, char* event_name, void*
     lua_pushnil(uscript->L); // TODO
 }
 
-static void _uscript_push_cmd_map(lua_State* L, cmd_context_t* ctx) {
+static void _uscript_push_cmd_map(lua_State *L, cmd_context_t *ctx) {
     char input_str[16];
     editor_input_to_key(ctx->editor, &ctx->input, input_str);
     lua_createtable(L, 0, 1);
@@ -192,7 +192,7 @@ static void _uscript_push_cmd_map(lua_State* L, cmd_context_t* ctx) {
     luaL_pushkey(L, string,  "input",        (const char*)input_str);
 }
 
-static void _uscript_push_baction_map(lua_State* L, baction_t* baction) {
+static void _uscript_push_baction_map(lua_State *L, baction_t *baction) {
     lua_createtable(L, 0, 1);
     luaL_pushkey(L,  integer, "type",                 baction->type);
     luaL_pushkey(L,  pointer, "buffer",               (void*)baction->buffer);
@@ -207,10 +207,10 @@ static void _uscript_push_baction_map(lua_State* L, baction_t* baction) {
 }
 
 // foreign static string _uscript_func_editor_prompt(prompt)
-static int _uscript_func_editor_prompt(lua_State* L) {
-    uscript_t* uscript;
-    char* prompt;
-    char* answer = NULL;
+static int _uscript_func_editor_prompt(lua_State *L) {
+    uscript_t *uscript;
+    char *prompt;
+    char *answer = NULL;
     MLE_USCRIPT_GET(L, uscript);
     prompt = (char*)luaL_checkstring(L, 1);
     if (editor_prompt(uscript->editor, prompt, NULL, &answer) == MLE_OK && answer) {
@@ -222,14 +222,14 @@ static int _uscript_func_editor_prompt(lua_State* L) {
     return 1;
 }
 
-int editor_register_cmd(editor_t* editor, cmd_t* cmd);
+int editor_register_cmd(editor_t *editor, cmd_t *cmd);
 
 // foreign static int _uscript_func_editor_register_cmd(cmd_name, fn_callback)
-static int _uscript_func_editor_register_cmd(lua_State* L) {
-    uscript_t* uscript;
-    uhandle_t* uhandle;
+static int _uscript_func_editor_register_cmd(lua_State *L) {
+    uscript_t *uscript;
+    uhandle_t *uhandle;
     int rv;
-    char* cmd_name;
+    char *cmd_name;
     int fn_callback;
     cmd_t cmd = {0};
     MLE_USCRIPT_GET(L, uscript);
@@ -254,12 +254,12 @@ static int _uscript_func_editor_register_cmd(lua_State* L) {
 }
 
 // foreign static int _uscript_func_editor_register_observer(event_name, fn_callback)
-static int _uscript_func_editor_register_observer(lua_State* L) {
+static int _uscript_func_editor_register_observer(lua_State *L) {
     int rv;
-    char* event_name;
+    char *event_name;
     int fn_callback;
-    uscript_t* uscript;
-    uhandle_t* uhandle;
+    uscript_t *uscript;
+    uhandle_t *uhandle;
     MLE_USCRIPT_GET(L, uscript);
 
     event_name = (char*)luaL_checkstring(L, 1);
@@ -279,18 +279,18 @@ static int _uscript_func_editor_register_observer(lua_State* L) {
 }
 
 // foreign static int _uscript_func_util_escape_shell_arg(arg)
-static int _uscript_func_util_escape_shell_arg(lua_State* L) {
+static int _uscript_func_util_escape_shell_arg(lua_State *L) {
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_util_shell_exec(cmd, timeout_s)
-static int _uscript_func_util_shell_exec(lua_State* L) {
+static int _uscript_func_util_shell_exec(lua_State *L) {
     int rv;
-    char* cmd;
+    char *cmd;
     long timeout_s;
-    uscript_t* uscript;
-    char* output;
+    uscript_t *uscript;
+    char *output;
     size_t output_len;
     MLE_USCRIPT_GET(L, uscript);
 
@@ -309,75 +309,75 @@ static int _uscript_func_util_shell_exec(lua_State* L) {
 }
 
 // foreign static int _uscript_func_editor_get_input(x, y, z)
-static int _uscript_func_editor_get_input(lua_State* L) {
+static int _uscript_func_editor_get_input(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_editor_menu(x, y, z)
-static int _uscript_func_editor_menu(lua_State* L) {
+static int _uscript_func_editor_menu(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_bview_pop_kmap(x, y, z)
-static int _uscript_func_bview_pop_kmap(lua_State* L) {
+static int _uscript_func_bview_pop_kmap(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_bview_push_kmap(x, y, z)
-static int _uscript_func_bview_push_kmap(lua_State* L) {
+static int _uscript_func_bview_push_kmap(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_buffer_set_callback(x, y, z)
-static int _uscript_func_buffer_set_callback(lua_State* L) {
+static int _uscript_func_buffer_set_callback(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_buffer_add_srule(x, y, z)
-static int _uscript_func_buffer_add_srule(lua_State* L) {
+static int _uscript_func_buffer_add_srule(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_buffer_remove_srule(x, y, z)
-static int _uscript_func_buffer_remove_srule(lua_State* L) {
+static int _uscript_func_buffer_remove_srule(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_buffer_write_to_file(x, y, z)
-static int _uscript_func_buffer_write_to_file(lua_State* L) {
+static int _uscript_func_buffer_write_to_file(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
 // foreign static int _uscript_func_editor_input_to_key(x, y, z)
-static int _uscript_func_editor_input_to_key(lua_State* L) {
+static int _uscript_func_editor_input_to_key(lua_State *L) {
     // TODO
     (void)L;
     return 0;
 }
 
-static void* luaL_checkpointer(lua_State* L, int arg) {
+static void *luaL_checkpointer(lua_State *L, int arg) {
     luaL_checktype(L, arg, LUA_TSTRING);
     return luaL_optpointer(L, arg, NULL);
 }
 
-static void* luaL_optpointer(lua_State* L, int arg, void* def) {
-    const char* ptr;
+static void *luaL_optpointer(lua_State *L, int arg, void *def) {
+    const char *ptr;
     uintptr_t ptr_as_int;
     ptr = luaL_optstring(L, arg, NULL);
     if (ptr && strlen(ptr) > 0) {
@@ -387,7 +387,7 @@ static void* luaL_optpointer(lua_State* L, int arg, void* def) {
     return def;
 }
 
-static void lua_pushpointer(lua_State* L, void* ptr) {
+static void lua_pushpointer(lua_State *L, void *ptr) {
     char ptrbuf[32];
     if (ptr == NULL) {
         lua_pushnil(L);
@@ -397,7 +397,7 @@ static void lua_pushpointer(lua_State* L, void* ptr) {
     }
 }
 
-static int luaL_checkfunction(lua_State* L, int arg) {
+static int luaL_checkfunction(lua_State *L, int arg) {
     luaL_checktype(L, arg, LUA_TFUNCTION);
     lua_pushvalue(L, arg);
     return luaL_ref(L, LUA_REGISTRYINDEX);
diff --git a/uscript.inc b/uscript.inc
index 0b6abbf..a4cea2f 100644
--- a/uscript.inc
+++ b/uscript.inc
@@ -1,10 +1,10 @@
-static int _uscript_func_buffer_add_mark(lua_State* L) {
-    mark_t* rv;
-    buffer_t* self;
-    bline_t* maybe_line;
+static int _uscript_func_buffer_add_mark(lua_State *L) {
+    mark_t *rv;
+    buffer_t *self;
+    bline_t *maybe_line;
     bint_t maybe_col;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    maybe_line = (bline_t*)luaL_checkpointer(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    maybe_line = (bline_t *)luaL_checkpointer(L, 2);
     maybe_col = (bint_t)luaL_checkinteger(L, 3);
     rv = buffer_add_mark(self, maybe_line, maybe_col);
     lua_createtable(L, 0, 1);
@@ -15,15 +15,15 @@ static int _uscript_func_buffer_add_mark(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_add_mark_ex(lua_State* L) {
-    mark_t* rv;
-    buffer_t* self;
+static int _uscript_func_buffer_add_mark_ex(lua_State *L) {
+    mark_t *rv;
+    buffer_t *self;
     char letter;
-    bline_t* maybe_line;
+    bline_t *maybe_line;
     bint_t maybe_col;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     letter = (char)luaL_checkinteger(L, 2);
-    maybe_line = (bline_t*)luaL_checkpointer(L, 3);
+    maybe_line = (bline_t *)luaL_checkpointer(L, 3);
     maybe_col = (bint_t)luaL_checkinteger(L, 4);
     rv = buffer_add_mark_ex(self, letter, maybe_line, maybe_col);
     lua_createtable(L, 0, 1);
@@ -34,16 +34,16 @@ static int _uscript_func_buffer_add_mark_ex(lua_State* L) {
     return 1;
 }
 
-// static int _uscript_func_buffer_add_srule(lua_State* L) {
+// static int _uscript_func_buffer_add_srule(lua_State *L) {
 // }
 
-static int _uscript_func_buffer_apply_styles(lua_State* L) {
+static int _uscript_func_buffer_apply_styles(lua_State *L) {
     int rv;
-    buffer_t* self;
-    bline_t* start_line;
+    buffer_t *self;
+    bline_t *start_line;
     bint_t line_delta;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    start_line = (bline_t*)luaL_checkpointer(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    start_line = (bline_t *)luaL_checkpointer(L, 2);
     line_delta = (bint_t)luaL_checkinteger(L, 3);
     rv = buffer_apply_styles(self, start_line, line_delta);
     lua_createtable(L, 0, 1);
@@ -54,10 +54,10 @@ static int _uscript_func_buffer_apply_styles(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_clear(lua_State* L) {
+static int _uscript_func_buffer_clear(lua_State *L) {
     int rv;
-    buffer_t* self;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    buffer_t *self;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     rv = buffer_clear(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -67,12 +67,12 @@ static int _uscript_func_buffer_clear(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_delete(lua_State* L) {
+static int _uscript_func_buffer_delete(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     bint_t offset;
     bint_t num_chars;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     offset = (bint_t)luaL_checkinteger(L, 2);
     num_chars = (bint_t)luaL_checkinteger(L, 3);
     rv = buffer_delete(self, offset, num_chars);
@@ -84,14 +84,14 @@ static int _uscript_func_buffer_delete(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_delete_w_bline(lua_State* L) {
+static int _uscript_func_buffer_delete_w_bline(lua_State *L) {
     int rv;
-    buffer_t* self;
-    bline_t* start_line;
+    buffer_t *self;
+    bline_t *start_line;
     bint_t start_col;
     bint_t num_chars;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    start_line = (bline_t*)luaL_checkpointer(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    start_line = (bline_t *)luaL_checkpointer(L, 2);
     start_col = (bint_t)luaL_checkinteger(L, 3);
     num_chars = (bint_t)luaL_checkinteger(L, 4);
     rv = buffer_delete_w_bline(self, start_line, start_col, num_chars);
@@ -103,10 +103,10 @@ static int _uscript_func_buffer_delete_w_bline(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_destroy(lua_State* L) {
+static int _uscript_func_buffer_destroy(lua_State *L) {
     int rv;
-    buffer_t* self;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    buffer_t *self;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     rv = buffer_destroy(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -116,12 +116,12 @@ static int _uscript_func_buffer_destroy(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_destroy_mark(lua_State* L) {
+static int _uscript_func_buffer_destroy_mark(lua_State *L) {
     int rv;
-    buffer_t* self;
-    mark_t* mark;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    mark = (mark_t*)luaL_checkpointer(L, 2);
+    buffer_t *self;
+    mark_t *mark;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    mark = (mark_t *)luaL_checkpointer(L, 2);
     rv = buffer_destroy_mark(self, mark);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -131,12 +131,12 @@ static int _uscript_func_buffer_destroy_mark(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_get(lua_State* L) {
+static int _uscript_func_buffer_get(lua_State *L) {
     int rv;
-    buffer_t* self;
-    char* ret_data = NULL;
+    buffer_t *self;
+    char *ret_data = NULL;
     bint_t ret_data_len = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     rv = buffer_get(self, &ret_data, &ret_data_len);
     lua_createtable(L, 0, 3);
     lua_pushstring(L, "rv");
@@ -152,12 +152,12 @@ static int _uscript_func_buffer_get(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_get_bline(lua_State* L) {
+static int _uscript_func_buffer_get_bline(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     bint_t line_index;
-    bline_t* ret_bline = NULL;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    bline_t *ret_bline = NULL;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     line_index = (bint_t)luaL_checkinteger(L, 2);
     rv = buffer_get_bline(self, line_index, &ret_bline);
     lua_createtable(L, 0, 2);
@@ -171,13 +171,13 @@ static int _uscript_func_buffer_get_bline(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_get_bline_col(lua_State* L) {
+static int _uscript_func_buffer_get_bline_col(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     bint_t offset;
-    bline_t* ret_bline = NULL;
+    bline_t *ret_bline = NULL;
     bint_t ret_col = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     offset = (bint_t)luaL_checkinteger(L, 2);
     rv = buffer_get_bline_col(self, offset, &ret_bline, &ret_col);
     lua_createtable(L, 0, 3);
@@ -194,12 +194,12 @@ static int _uscript_func_buffer_get_bline_col(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_get_lettered_mark(lua_State* L) {
+static int _uscript_func_buffer_get_lettered_mark(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     char letter;
-    mark_t* ret_mark = NULL;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    mark_t *ret_mark = NULL;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     letter = (char)luaL_checkinteger(L, 2);
     rv = buffer_get_lettered_mark(self, letter, &ret_mark);
     lua_createtable(L, 0, 2);
@@ -213,14 +213,14 @@ static int _uscript_func_buffer_get_lettered_mark(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_get_offset(lua_State* L) {
+static int _uscript_func_buffer_get_offset(lua_State *L) {
     int rv;
-    buffer_t* self;
-    bline_t* bline;
+    buffer_t *self;
+    bline_t *bline;
     bint_t col;
     bint_t ret_offset = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    bline = (bline_t*)luaL_checkpointer(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    bline = (bline_t *)luaL_checkpointer(L, 2);
     col = (bint_t)luaL_checkinteger(L, 3);
     rv = buffer_get_offset(self, bline, col, &ret_offset);
     lua_createtable(L, 0, 2);
@@ -234,16 +234,16 @@ static int _uscript_func_buffer_get_offset(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_insert(lua_State* L) {
+static int _uscript_func_buffer_insert(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     bint_t offset;
-    char* data;
+    char *data;
     bint_t data_len;
     bint_t optret_num_chars = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     offset = (bint_t)luaL_checkinteger(L, 2);
-    data = (char*)luaL_checkstring(L, 3);
+    data = (char *)luaL_checkstring(L, 3);
     data_len = (bint_t)luaL_checkinteger(L, 4);
     rv = buffer_insert(self, offset, data, data_len, &optret_num_chars);
     lua_createtable(L, 0, 2);
@@ -257,18 +257,18 @@ static int _uscript_func_buffer_insert(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_insert_w_bline(lua_State* L) {
+static int _uscript_func_buffer_insert_w_bline(lua_State *L) {
     int rv;
-    buffer_t* self;
-    bline_t* start_line;
+    buffer_t *self;
+    bline_t *start_line;
     bint_t start_col;
-    char* data;
+    char *data;
     bint_t data_len;
     bint_t optret_num_chars = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    start_line = (bline_t*)luaL_checkpointer(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    start_line = (bline_t *)luaL_checkpointer(L, 2);
     start_col = (bint_t)luaL_checkinteger(L, 3);
-    data = (char*)luaL_checkstring(L, 4);
+    data = (char *)luaL_checkstring(L, 4);
     data_len = (bint_t)luaL_checkinteger(L, 5);
     rv = buffer_insert_w_bline(self, start_line, start_col, data, data_len, &optret_num_chars);
     lua_createtable(L, 0, 2);
@@ -282,8 +282,8 @@ static int _uscript_func_buffer_insert_w_bline(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_new(lua_State* L) {
-    buffer_t* rv;
+static int _uscript_func_buffer_new(lua_State *L) {
+    buffer_t *rv;
     rv = buffer_new();
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -293,10 +293,10 @@ static int _uscript_func_buffer_new(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_new_open(lua_State* L) {
-    buffer_t* rv;
-    char* path;
-    path = (char*)luaL_checkstring(L, 1);
+static int _uscript_func_buffer_new_open(lua_State *L) {
+    buffer_t *rv;
+    char *path;
+    path = (char *)luaL_checkstring(L, 1);
     rv = buffer_new_open(path);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -306,12 +306,12 @@ static int _uscript_func_buffer_new_open(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_open(lua_State* L) {
+static int _uscript_func_buffer_open(lua_State *L) {
     int rv;
-    buffer_t* self;
-    char* path;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    path = (char*)luaL_checkstring(L, 2);
+    buffer_t *self;
+    char *path;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    path = (char *)luaL_checkstring(L, 2);
     rv = buffer_open(self, path);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -321,10 +321,10 @@ static int _uscript_func_buffer_open(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_redo(lua_State* L) {
+static int _uscript_func_buffer_redo(lua_State *L) {
     int rv;
-    buffer_t* self;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    buffer_t *self;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     rv = buffer_redo(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -334,15 +334,15 @@ static int _uscript_func_buffer_redo(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_register_append(lua_State* L) {
+static int _uscript_func_buffer_register_append(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     char reg;
-    char* data;
+    char *data;
     size_t data_len;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     reg = (char)luaL_checkinteger(L, 2);
-    data = (char*)luaL_checkstring(L, 3);
+    data = (char *)luaL_checkstring(L, 3);
     data_len = (size_t)luaL_checkinteger(L, 4);
     rv = buffer_register_append(self, reg, data, data_len);
     lua_createtable(L, 0, 1);
@@ -353,11 +353,11 @@ static int _uscript_func_buffer_register_append(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_register_clear(lua_State* L) {
+static int _uscript_func_buffer_register_clear(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     char reg;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     reg = (char)luaL_checkinteger(L, 2);
     rv = buffer_register_clear(self, reg);
     lua_createtable(L, 0, 1);
@@ -368,14 +368,14 @@ static int _uscript_func_buffer_register_clear(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_register_get(lua_State* L) {
+static int _uscript_func_buffer_register_get(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     char reg;
     int dup;
-    char* ret_data = NULL;
+    char *ret_data = NULL;
     size_t ret_data_len = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     reg = (char)luaL_checkinteger(L, 2);
     dup = (int)luaL_checkinteger(L, 3);
     rv = buffer_register_get(self, reg, dup, &ret_data, &ret_data_len);
@@ -393,15 +393,15 @@ static int _uscript_func_buffer_register_get(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_register_prepend(lua_State* L) {
+static int _uscript_func_buffer_register_prepend(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     char reg;
-    char* data;
+    char *data;
     size_t data_len;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     reg = (char)luaL_checkinteger(L, 2);
-    data = (char*)luaL_checkstring(L, 3);
+    data = (char *)luaL_checkstring(L, 3);
     data_len = (size_t)luaL_checkinteger(L, 4);
     rv = buffer_register_prepend(self, reg, data, data_len);
     lua_createtable(L, 0, 1);
@@ -412,15 +412,15 @@ static int _uscript_func_buffer_register_prepend(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_register_set(lua_State* L) {
+static int _uscript_func_buffer_register_set(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     char reg;
-    char* data;
+    char *data;
     size_t data_len;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     reg = (char)luaL_checkinteger(L, 2);
-    data = (char*)luaL_checkstring(L, 3);
+    data = (char *)luaL_checkstring(L, 3);
     data_len = (size_t)luaL_checkinteger(L, 4);
     rv = buffer_register_set(self, reg, data, data_len);
     lua_createtable(L, 0, 1);
@@ -431,20 +431,20 @@ static int _uscript_func_buffer_register_set(lua_State* L) {
     return 1;
 }
 
-// static int _uscript_func_buffer_remove_srule(lua_State* L) {
+// static int _uscript_func_buffer_remove_srule(lua_State *L) {
 // }
 
-static int _uscript_func_buffer_replace(lua_State* L) {
+static int _uscript_func_buffer_replace(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     bint_t offset;
     bint_t num_chars;
-    char* data;
+    char *data;
     bint_t data_len;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     offset = (bint_t)luaL_checkinteger(L, 2);
     num_chars = (bint_t)luaL_checkinteger(L, 3);
-    data = (char*)luaL_checkstring(L, 4);
+    data = (char *)luaL_checkstring(L, 4);
     data_len = (bint_t)luaL_checkinteger(L, 5);
     rv = buffer_replace(self, offset, num_chars, data, data_len);
     lua_createtable(L, 0, 1);
@@ -455,19 +455,19 @@ static int _uscript_func_buffer_replace(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_replace_w_bline(lua_State* L) {
+static int _uscript_func_buffer_replace_w_bline(lua_State *L) {
     int rv;
-    buffer_t* self;
-    bline_t* start_line;
+    buffer_t *self;
+    bline_t *start_line;
     bint_t start_col;
     bint_t num_chars;
-    char* data;
+    char *data;
     bint_t data_len;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    start_line = (bline_t*)luaL_checkpointer(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    start_line = (bline_t *)luaL_checkpointer(L, 2);
     start_col = (bint_t)luaL_checkinteger(L, 3);
     num_chars = (bint_t)luaL_checkinteger(L, 4);
-    data = (char*)luaL_checkstring(L, 5);
+    data = (char *)luaL_checkstring(L, 5);
     data_len = (bint_t)luaL_checkinteger(L, 6);
     rv = buffer_replace_w_bline(self, start_line, start_col, num_chars, data, data_len);
     lua_createtable(L, 0, 1);
@@ -478,10 +478,10 @@ static int _uscript_func_buffer_replace_w_bline(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_save(lua_State* L) {
+static int _uscript_func_buffer_save(lua_State *L) {
     int rv;
-    buffer_t* self;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    buffer_t *self;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     rv = buffer_save(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -491,13 +491,13 @@ static int _uscript_func_buffer_save(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_save_as(lua_State* L) {
+static int _uscript_func_buffer_save_as(lua_State *L) {
     int rv;
-    buffer_t* self;
-    char* path;
+    buffer_t *self;
+    char *path;
     bint_t optret_nbytes = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    path = (char*)luaL_checkstring(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    path = (char *)luaL_checkstring(L, 2);
     rv = buffer_save_as(self, path, &optret_nbytes);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -510,13 +510,13 @@ static int _uscript_func_buffer_save_as(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_set(lua_State* L) {
+static int _uscript_func_buffer_set(lua_State *L) {
     int rv;
-    buffer_t* self;
-    char* data;
+    buffer_t *self;
+    char *data;
     bint_t data_len;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    data = (char*)luaL_checkstring(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    data = (char *)luaL_checkstring(L, 2);
     data_len = (bint_t)luaL_checkinteger(L, 3);
     rv = buffer_set(self, data, data_len);
     lua_createtable(L, 0, 1);
@@ -527,16 +527,16 @@ static int _uscript_func_buffer_set(lua_State* L) {
     return 1;
 }
 
-// static int _uscript_func_buffer_set_callback(lua_State* L) {
+// static int _uscript_func_buffer_set_callback(lua_State *L) {
 // }
 
-static int _uscript_func_buffer_set_mmapped(lua_State* L) {
+static int _uscript_func_buffer_set_mmapped(lua_State *L) {
     int rv;
-    buffer_t* self;
-    char* data;
+    buffer_t *self;
+    char *data;
     bint_t data_len;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    data = (char*)luaL_checkstring(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    data = (char *)luaL_checkstring(L, 2);
     data_len = (bint_t)luaL_checkinteger(L, 3);
     rv = buffer_set_mmapped(self, data, data_len);
     lua_createtable(L, 0, 1);
@@ -547,11 +547,11 @@ static int _uscript_func_buffer_set_mmapped(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_set_styles_enabled(lua_State* L) {
+static int _uscript_func_buffer_set_styles_enabled(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     int is_enabled;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     is_enabled = (int)luaL_checkinteger(L, 2);
     rv = buffer_set_styles_enabled(self, is_enabled);
     lua_createtable(L, 0, 1);
@@ -562,11 +562,11 @@ static int _uscript_func_buffer_set_styles_enabled(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_set_tab_width(lua_State* L) {
+static int _uscript_func_buffer_set_tab_width(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     int tab_width;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     tab_width = (int)luaL_checkinteger(L, 2);
     rv = buffer_set_tab_width(self, tab_width);
     lua_createtable(L, 0, 1);
@@ -577,20 +577,20 @@ static int _uscript_func_buffer_set_tab_width(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_substr(lua_State* L) {
+static int _uscript_func_buffer_substr(lua_State *L) {
     int rv;
-    buffer_t* self;
-    bline_t* start_line;
+    buffer_t *self;
+    bline_t *start_line;
     bint_t start_col;
-    bline_t* end_line;
+    bline_t *end_line;
     bint_t end_col;
-    char* ret_data = NULL;
+    char *ret_data = NULL;
     bint_t ret_data_len = 0;
     bint_t ret_nchars = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
-    start_line = (bline_t*)luaL_checkpointer(L, 2);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
+    start_line = (bline_t *)luaL_checkpointer(L, 2);
     start_col = (bint_t)luaL_checkinteger(L, 3);
-    end_line = (bline_t*)luaL_checkpointer(L, 4);
+    end_line = (bline_t *)luaL_checkpointer(L, 4);
     end_col = (bint_t)luaL_checkinteger(L, 5);
     rv = buffer_substr(self, start_line, start_col, end_line, end_col, &ret_data, &ret_data_len, &ret_nchars);
     lua_createtable(L, 0, 4);
@@ -610,10 +610,10 @@ static int _uscript_func_buffer_substr(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_undo(lua_State* L) {
+static int _uscript_func_buffer_undo(lua_State *L) {
     int rv;
-    buffer_t* self;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    buffer_t *self;
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     rv = buffer_undo(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -623,12 +623,12 @@ static int _uscript_func_buffer_undo(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_buffer_write_to_fd(lua_State* L) {
+static int _uscript_func_buffer_write_to_fd(lua_State *L) {
     int rv;
-    buffer_t* self;
+    buffer_t *self;
     int fd;
     size_t optret_nbytes = 0;
-    self = (buffer_t*)luaL_checkpointer(L, 1);
+    self = (buffer_t *)luaL_checkpointer(L, 1);
     fd = (int)luaL_checkinteger(L, 2);
     rv = buffer_write_to_fd(self, fd, &optret_nbytes);
     lua_createtable(L, 0, 2);
@@ -642,17 +642,17 @@ static int _uscript_func_buffer_write_to_fd(lua_State* L) {
     return 1;
 }
 
-// static int _uscript_func_buffer_write_to_file(lua_State* L) {
+// static int _uscript_func_buffer_write_to_file(lua_State *L) {
 // }
 
-static int _uscript_func_bview_add_cursor(lua_State* L) {
+static int _uscript_func_bview_add_cursor(lua_State *L) {
     int rv;
-    bview_t* self;
-    bline_t* opt_bline;
+    bview_t *self;
+    bline_t *opt_bline;
     bint_t opt_col;
-    cursor_t* optret_cursor = NULL;
-    self = (bview_t*)luaL_checkpointer(L, 1);
-    opt_bline = (bline_t*)luaL_optpointer(L, 2, NULL);
+    cursor_t *optret_cursor = NULL;
+    self = (bview_t *)luaL_checkpointer(L, 1);
+    opt_bline = (bline_t *)luaL_optpointer(L, 2, NULL);
     opt_col = (bint_t)luaL_optinteger(L, 3, 0);
     rv = bview_add_cursor(self, opt_bline, opt_col, &optret_cursor);
     lua_createtable(L, 0, 2);
@@ -666,14 +666,14 @@ static int _uscript_func_bview_add_cursor(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_add_cursor_asleep(lua_State* L) {
+static int _uscript_func_bview_add_cursor_asleep(lua_State *L) {
     int rv;
-    bview_t* self;
-    bline_t* opt_bline;
+    bview_t *self;
+    bline_t *opt_bline;
     bint_t opt_col;
-    cursor_t* optret_cursor = NULL;
-    self = (bview_t*)luaL_checkpointer(L, 1);
-    opt_bline = (bline_t*)luaL_optpointer(L, 2, NULL);
+    cursor_t *optret_cursor = NULL;
+    self = (bview_t *)luaL_checkpointer(L, 1);
+    opt_bline = (bline_t *)luaL_optpointer(L, 2, NULL);
     opt_col = (bint_t)luaL_optinteger(L, 3, 0);
     rv = bview_add_cursor_asleep(self, opt_bline, opt_col, &optret_cursor);
     lua_createtable(L, 0, 2);
@@ -687,10 +687,10 @@ static int _uscript_func_bview_add_cursor_asleep(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_center_viewport_y(lua_State* L) {
+static int _uscript_func_bview_center_viewport_y(lua_State *L) {
     int rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_center_viewport_y(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -700,10 +700,10 @@ static int _uscript_func_bview_center_viewport_y(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_destroy(lua_State* L) {
+static int _uscript_func_bview_destroy(lua_State *L) {
     int rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_destroy(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -713,10 +713,10 @@ static int _uscript_func_bview_destroy(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_draw(lua_State* L) {
+static int _uscript_func_bview_draw(lua_State *L) {
     int rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_draw(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -726,11 +726,11 @@ static int _uscript_func_bview_draw(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_draw_cursor(lua_State* L) {
+static int _uscript_func_bview_draw_cursor(lua_State *L) {
     int rv;
-    bview_t* self;
+    bview_t *self;
     int set_real_cursor;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    self = (bview_t *)luaL_checkpointer(L, 1);
     set_real_cursor = (int)luaL_checkinteger(L, 2);
     rv = bview_draw_cursor(self, set_real_cursor);
     lua_createtable(L, 0, 1);
@@ -741,10 +741,10 @@ static int _uscript_func_bview_draw_cursor(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_get_active_cursor_count(lua_State* L) {
+static int _uscript_func_bview_get_active_cursor_count(lua_State *L) {
     int rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_get_active_cursor_count(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -754,10 +754,10 @@ static int _uscript_func_bview_get_active_cursor_count(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_get_split_root(lua_State* L) {
-    bview_t* rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+static int _uscript_func_bview_get_split_root(lua_State *L) {
+    bview_t *rv;
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_get_split_root(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -767,10 +767,10 @@ static int _uscript_func_bview_get_split_root(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_max_viewport_y(lua_State* L) {
+static int _uscript_func_bview_max_viewport_y(lua_State *L) {
     int rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_max_viewport_y(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -780,16 +780,16 @@ static int _uscript_func_bview_max_viewport_y(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_new(lua_State* L) {
-    bview_t* rv;
-    editor_t* editor;
-    char* opt_path;
+static int _uscript_func_bview_new(lua_State *L) {
+    bview_t *rv;
+    editor_t *editor;
+    char *opt_path;
     int opt_path_len;
-    buffer_t* opt_buffer;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
-    opt_path = (char*)luaL_optstring(L, 2, NULL);
+    buffer_t *opt_buffer;
+    editor = (editor_t *)luaL_checkpointer(L, 1);
+    opt_path = (char *)luaL_optstring(L, 2, NULL);
     opt_path_len = (int)luaL_optinteger(L, 3, 0);
-    opt_buffer = (buffer_t*)luaL_optpointer(L, 4, NULL);
+    opt_buffer = (buffer_t *)luaL_optpointer(L, 4, NULL);
     rv = bview_new(editor, opt_path, opt_path_len, opt_buffer);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -799,13 +799,13 @@ static int _uscript_func_bview_new(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_open(lua_State* L) {
+static int _uscript_func_bview_open(lua_State *L) {
     int rv;
-    bview_t* self;
-    char* path;
+    bview_t *self;
+    char *path;
     int path_len;
-    self = (bview_t*)luaL_checkpointer(L, 1);
-    path = (char*)luaL_checkstring(L, 2);
+    self = (bview_t *)luaL_checkpointer(L, 1);
+    path = (char *)luaL_checkstring(L, 2);
     path_len = (int)luaL_checkinteger(L, 3);
     rv = bview_open(self, path, path_len);
     lua_createtable(L, 0, 1);
@@ -816,16 +816,16 @@ static int _uscript_func_bview_open(lua_State* L) {
     return 1;
 }
 
-// static int _uscript_func_bview_pop_kmap(lua_State* L) {
+// static int _uscript_func_bview_pop_kmap(lua_State *L) {
 // }
 
-// static int _uscript_func_bview_push_kmap(lua_State* L) {
+// static int _uscript_func_bview_push_kmap(lua_State *L) {
 // }
 
-static int _uscript_func_bview_rectify_viewport(lua_State* L) {
+static int _uscript_func_bview_rectify_viewport(lua_State *L) {
     int rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_rectify_viewport(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -835,12 +835,12 @@ static int _uscript_func_bview_rectify_viewport(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_remove_cursor(lua_State* L) {
+static int _uscript_func_bview_remove_cursor(lua_State *L) {
     int rv;
-    bview_t* self;
-    cursor_t* cursor;
-    self = (bview_t*)luaL_checkpointer(L, 1);
-    cursor = (cursor_t*)luaL_checkpointer(L, 2);
+    bview_t *self;
+    cursor_t *cursor;
+    self = (bview_t *)luaL_checkpointer(L, 1);
+    cursor = (cursor_t *)luaL_checkpointer(L, 2);
     rv = bview_remove_cursor(self, cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -850,12 +850,12 @@ static int _uscript_func_bview_remove_cursor(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_remove_cursors_except(lua_State* L) {
+static int _uscript_func_bview_remove_cursors_except(lua_State *L) {
     int rv;
-    bview_t* self;
-    cursor_t* one;
-    self = (bview_t*)luaL_checkpointer(L, 1);
-    one = (cursor_t*)luaL_checkpointer(L, 2);
+    bview_t *self;
+    cursor_t *one;
+    self = (bview_t *)luaL_checkpointer(L, 1);
+    one = (cursor_t *)luaL_checkpointer(L, 2);
     rv = bview_remove_cursors_except(self, one);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -865,14 +865,14 @@ static int _uscript_func_bview_remove_cursors_except(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_resize(lua_State* L) {
+static int _uscript_func_bview_resize(lua_State *L) {
     int rv;
-    bview_t* self;
+    bview_t *self;
     int x;
     int y;
     int w;
     int h;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    self = (bview_t *)luaL_checkpointer(L, 1);
     x = (int)luaL_checkinteger(L, 2);
     y = (int)luaL_checkinteger(L, 3);
     w = (int)luaL_checkinteger(L, 4);
@@ -886,12 +886,12 @@ static int _uscript_func_bview_resize(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_set_syntax(lua_State* L) {
+static int _uscript_func_bview_set_syntax(lua_State *L) {
     int rv;
-    bview_t* self;
-    char* opt_syntax;
-    self = (bview_t*)luaL_checkpointer(L, 1);
-    opt_syntax = (char*)luaL_optstring(L, 2, NULL);
+    bview_t *self;
+    char *opt_syntax;
+    self = (bview_t *)luaL_checkpointer(L, 1);
+    opt_syntax = (char *)luaL_optstring(L, 2, NULL);
     rv = bview_set_syntax(self, opt_syntax);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -901,12 +901,12 @@ static int _uscript_func_bview_set_syntax(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_set_viewport_y(lua_State* L) {
+static int _uscript_func_bview_set_viewport_y(lua_State *L) {
     int rv;
-    bview_t* self;
+    bview_t *self;
     bint_t y;
     int do_rectify;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    self = (bview_t *)luaL_checkpointer(L, 1);
     y = (bint_t)luaL_checkinteger(L, 2);
     do_rectify = (int)luaL_checkinteger(L, 3);
     rv = bview_set_viewport_y(self, y, do_rectify);
@@ -918,13 +918,13 @@ static int _uscript_func_bview_set_viewport_y(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_split(lua_State* L) {
+static int _uscript_func_bview_split(lua_State *L) {
     int rv;
-    bview_t* self;
+    bview_t *self;
     int is_vertical;
     float factor;
-    bview_t* optret_bview = NULL;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *optret_bview = NULL;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     is_vertical = (int)luaL_checkinteger(L, 2);
     factor = (float)luaL_checknumber(L, 3);
     rv = bview_split(self, is_vertical, factor, &optret_bview);
@@ -939,10 +939,10 @@ static int _uscript_func_bview_split(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_wake_sleeping_cursors(lua_State* L) {
+static int _uscript_func_bview_wake_sleeping_cursors(lua_State *L) {
     int rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_wake_sleeping_cursors(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -952,10 +952,10 @@ static int _uscript_func_bview_wake_sleeping_cursors(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_bview_zero_viewport_y(lua_State* L) {
+static int _uscript_func_bview_zero_viewport_y(lua_State *L) {
     int rv;
-    bview_t* self;
-    self = (bview_t*)luaL_checkpointer(L, 1);
+    bview_t *self;
+    self = (bview_t *)luaL_checkpointer(L, 1);
     rv = bview_zero_viewport_y(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -965,10 +965,10 @@ static int _uscript_func_bview_zero_viewport_y(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_destroy(lua_State* L) {
+static int _uscript_func_cursor_destroy(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_destroy(cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -978,11 +978,11 @@ static int _uscript_func_cursor_destroy(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_get_anchor(lua_State* L) {
+static int _uscript_func_cursor_get_anchor(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    mark_t* ret_anchor = NULL;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    mark_t *ret_anchor = NULL;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_get_anchor(cursor, &ret_anchor);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -995,12 +995,12 @@ static int _uscript_func_cursor_get_anchor(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_get_lo_hi(lua_State* L) {
+static int _uscript_func_cursor_get_lo_hi(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    mark_t* ret_lo = NULL;
-    mark_t* ret_hi = NULL;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    mark_t *ret_lo = NULL;
+    mark_t *ret_hi = NULL;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_get_lo_hi(cursor, &ret_lo, &ret_hi);
     lua_createtable(L, 0, 3);
     lua_pushstring(L, "rv");
@@ -1016,11 +1016,11 @@ static int _uscript_func_cursor_get_lo_hi(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_get_mark(lua_State* L) {
+static int _uscript_func_cursor_get_mark(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    mark_t* ret_mark = NULL;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    mark_t *ret_mark = NULL;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_get_mark(cursor, &ret_mark);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -1033,10 +1033,10 @@ static int _uscript_func_cursor_get_mark(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_lift_anchor(lua_State* L) {
+static int _uscript_func_cursor_lift_anchor(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_lift_anchor(cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1046,16 +1046,16 @@ static int _uscript_func_cursor_lift_anchor(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_replace(lua_State* L) {
+static int _uscript_func_cursor_replace(lua_State *L) {
     int rv;
-    cursor_t* cursor;
+    cursor_t *cursor;
     int interactive;
-    char* opt_regex;
-    char* opt_replacement;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    char *opt_regex;
+    char *opt_replacement;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     interactive = (int)luaL_checkinteger(L, 2);
-    opt_regex = (char*)luaL_optstring(L, 3, NULL);
-    opt_replacement = (char*)luaL_optstring(L, 4, NULL);
+    opt_regex = (char *)luaL_optstring(L, 3, NULL);
+    opt_replacement = (char *)luaL_optstring(L, 4, NULL);
     rv = cursor_replace(cursor, interactive, opt_regex, opt_replacement);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1065,12 +1065,12 @@ static int _uscript_func_cursor_replace(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_select_by(lua_State* L) {
+static int _uscript_func_cursor_select_by(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    const char* strat;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
-    strat = (const char*)luaL_checkstring(L, 2);
+    cursor_t *cursor;
+    const char *strat;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
+    strat = (const char *)luaL_checkstring(L, 2);
     rv = cursor_select_by(cursor, strat);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1080,10 +1080,10 @@ static int _uscript_func_cursor_select_by(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_select_by_bracket(lua_State* L) {
+static int _uscript_func_cursor_select_by_bracket(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_select_by_bracket(cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1093,10 +1093,10 @@ static int _uscript_func_cursor_select_by_bracket(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_select_by_string(lua_State* L) {
+static int _uscript_func_cursor_select_by_string(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_select_by_string(cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1106,10 +1106,10 @@ static int _uscript_func_cursor_select_by_string(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_select_by_word(lua_State* L) {
+static int _uscript_func_cursor_select_by_word(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_select_by_word(cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1119,10 +1119,10 @@ static int _uscript_func_cursor_select_by_word(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_select_by_word_back(lua_State* L) {
+static int _uscript_func_cursor_select_by_word_back(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_select_by_word_back(cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1132,10 +1132,10 @@ static int _uscript_func_cursor_select_by_word_back(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_select_by_word_forward(lua_State* L) {
+static int _uscript_func_cursor_select_by_word_forward(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_select_by_word_forward(cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1145,10 +1145,10 @@ static int _uscript_func_cursor_select_by_word_forward(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_cursor_uncut(lua_State* L) {
+static int _uscript_func_cursor_uncut(lua_State *L) {
     int rv;
-    cursor_t* cursor;
-    cursor = (cursor_t*)luaL_checkpointer(L, 1);
+    cursor_t *cursor;
+    cursor = (cursor_t *)luaL_checkpointer(L, 1);
     rv = cursor_uncut(cursor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1158,10 +1158,10 @@ static int _uscript_func_cursor_uncut(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_editor_bview_edit_count(lua_State* L) {
+static int _uscript_func_editor_bview_edit_count(lua_State *L) {
     int rv;
-    editor_t* editor;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
+    editor_t *editor;
+    editor = (editor_t *)luaL_checkpointer(L, 1);
     rv = editor_bview_edit_count(editor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1171,13 +1171,13 @@ static int _uscript_func_editor_bview_edit_count(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_editor_close_bview(lua_State* L) {
+static int _uscript_func_editor_close_bview(lua_State *L) {
     int rv;
-    editor_t* editor;
-    bview_t* bview;
+    editor_t *editor;
+    bview_t *bview;
     int optret_num_closed = 0;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
-    bview = (bview_t*)luaL_checkpointer(L, 2);
+    editor = (editor_t *)luaL_checkpointer(L, 1);
+    bview = (bview_t *)luaL_checkpointer(L, 2);
     rv = editor_close_bview(editor, bview, &optret_num_closed);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -1190,12 +1190,12 @@ static int _uscript_func_editor_close_bview(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_editor_count_bviews_by_buffer(lua_State* L) {
+static int _uscript_func_editor_count_bviews_by_buffer(lua_State *L) {
     int rv;
-    editor_t* editor;
-    buffer_t* buffer;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
-    buffer = (buffer_t*)luaL_checkpointer(L, 2);
+    editor_t *editor;
+    buffer_t *buffer;
+    editor = (editor_t *)luaL_checkpointer(L, 1);
+    buffer = (buffer_t *)luaL_checkpointer(L, 2);
     rv = editor_count_bviews_by_buffer(editor, buffer);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1205,12 +1205,12 @@ static int _uscript_func_editor_count_bviews_by_buffer(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_editor_destroy_observer(lua_State* L) {
+static int _uscript_func_editor_destroy_observer(lua_State *L) {
     int rv;
-    editor_t* editor;
-    observer_t* observer;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
-    observer = (observer_t*)luaL_checkpointer(L, 2);
+    editor_t *editor;
+    observer_t *observer;
+    editor = (editor_t *)luaL_checkpointer(L, 1);
+    observer = (observer_t *)luaL_checkpointer(L, 2);
     rv = editor_destroy_observer(editor, observer);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1220,10 +1220,10 @@ static int _uscript_func_editor_destroy_observer(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_editor_display(lua_State* L) {
+static int _uscript_func_editor_display(lua_State *L) {
     int rv;
-    editor_t* editor;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
+    editor_t *editor;
+    editor = (editor_t *)luaL_checkpointer(L, 1);
     rv = editor_display(editor);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1233,23 +1233,23 @@ static int _uscript_func_editor_display(lua_State* L) {
     return 1;
 }
 
-// static int _uscript_func_editor_get_input(lua_State* L) {
+// static int _uscript_func_editor_get_input(lua_State *L) {
 // }
 
-// static int _uscript_func_editor_input_to_key(lua_State* L) {
+// static int _uscript_func_editor_input_to_key(lua_State *L) {
 // }
 
-// static int _uscript_func_editor_menu(lua_State* L) {
+// static int _uscript_func_editor_menu(lua_State *L) {
 // }
 
-static int _uscript_func_editor_notify_observers(lua_State* L) {
+static int _uscript_func_editor_notify_observers(lua_State *L) {
     int rv;
-    editor_t* editor;
-    char* event_name;
-    void* event_data;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
-    event_name = (char*)luaL_checkstring(L, 2);
-    event_data = (void*)luaL_checkpointer(L, 3);
+    editor_t *editor;
+    char *event_name;
+    void *event_data;
+    editor = (editor_t *)luaL_checkpointer(L, 1);
+    event_name = (char *)luaL_checkstring(L, 2);
+    event_data = (void *)luaL_checkpointer(L, 3);
     rv = editor_notify_observers(editor, event_name, event_data);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1259,27 +1259,27 @@ static int _uscript_func_editor_notify_observers(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_editor_open_bview(lua_State* L) {
+static int _uscript_func_editor_open_bview(lua_State *L) {
     int rv;
-    editor_t* editor;
-    bview_t* opt_parent;
+    editor_t *editor;
+    bview_t *opt_parent;
     int type;
-    char* opt_path;
+    char *opt_path;
     int opt_path_len;
     int make_active;
     bint_t linenum;
     int skip_resize;
-    buffer_t* opt_buffer;
-    bview_t* optret_bview = NULL;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
-    opt_parent = (bview_t*)luaL_optpointer(L, 2, NULL);
+    buffer_t *opt_buffer;
+    bview_t *optret_bview = NULL;
+    editor = (editor_t *)luaL_checkpointer(L, 1);
+    opt_parent = (bview_t *)luaL_optpointer(L, 2, NULL);
     type = (int)luaL_checkinteger(L, 3);
-    opt_path = (char*)luaL_optstring(L, 4, NULL);
+    opt_path = (char *)luaL_optstring(L, 4, NULL);
     opt_path_len = (int)luaL_optinteger(L, 5, 0);
     make_active = (int)luaL_checkinteger(L, 6);
     linenum = (bint_t)luaL_checkinteger(L, 7);
     skip_resize = (int)luaL_checkinteger(L, 8);
-    opt_buffer = (buffer_t*)luaL_optpointer(L, 9, NULL);
+    opt_buffer = (buffer_t *)luaL_optpointer(L, 9, NULL);
     rv = editor_open_bview(editor, opt_parent, type, opt_path, opt_path_len, make_active, linenum, skip_resize, opt_buffer, &optret_bview);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -1292,21 +1292,21 @@ static int _uscript_func_editor_open_bview(lua_State* L) {
     return 1;
 }
 
-// static int _uscript_func_editor_prompt(lua_State* L) {
+// static int _uscript_func_editor_prompt(lua_State *L) {
 // }
 
-// static int _uscript_func_editor_register_cmd(lua_State* L) {
+// static int _uscript_func_editor_register_cmd(lua_State *L) {
 // }
 
-// static int _uscript_func_editor_register_observer(lua_State* L) {
+// static int _uscript_func_editor_register_observer(lua_State *L) {
 // }
 
-static int _uscript_func_editor_set_active(lua_State* L) {
+static int _uscript_func_editor_set_active(lua_State *L) {
     int rv;
-    editor_t* editor;
-    bview_t* bview;
-    editor = (editor_t*)luaL_checkpointer(L, 1);
-    bview = (bview_t*)luaL_checkpointer(L, 2);
+    editor_t *editor;
+    bview_t *bview;
+    editor = (editor_t *)luaL_checkpointer(L, 1);
+    bview = (bview_t *)luaL_checkpointer(L, 2);
     rv = editor_set_active(editor, bview);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1316,11 +1316,11 @@ static int _uscript_func_editor_set_active(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_clone(lua_State* L) {
+static int _uscript_func_mark_clone(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* ret_mark = NULL;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *self;
+    mark_t *ret_mark = NULL;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_clone(self, &ret_mark);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -1333,12 +1333,12 @@ static int _uscript_func_mark_clone(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_clone_w_letter(lua_State* L) {
+static int _uscript_func_mark_clone_w_letter(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     char letter;
-    mark_t* ret_mark = NULL;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *ret_mark = NULL;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     letter = (char)luaL_checkinteger(L, 2);
     rv = mark_clone_w_letter(self, letter, &ret_mark);
     lua_createtable(L, 0, 2);
@@ -1352,11 +1352,11 @@ static int _uscript_func_mark_clone_w_letter(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_delete_after(lua_State* L) {
+static int _uscript_func_mark_delete_after(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t num_chars;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     num_chars = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_delete_after(self, num_chars);
     lua_createtable(L, 0, 1);
@@ -1367,11 +1367,11 @@ static int _uscript_func_mark_delete_after(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_delete_before(lua_State* L) {
+static int _uscript_func_mark_delete_before(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t num_chars;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     num_chars = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_delete_before(self, num_chars);
     lua_createtable(L, 0, 1);
@@ -1382,12 +1382,12 @@ static int _uscript_func_mark_delete_before(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_delete_between_mark(lua_State* L) {
+static int _uscript_func_mark_delete_between_mark(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    mark_t *self;
+    mark_t *other;
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_delete_between_mark(self, other);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1397,10 +1397,10 @@ static int _uscript_func_mark_delete_between_mark(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_destroy(lua_State* L) {
+static int _uscript_func_mark_destroy(lua_State *L) {
     int rv;
-    mark_t* self;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *self;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_destroy(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1410,14 +1410,14 @@ static int _uscript_func_mark_destroy(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_find_bracket_pair(lua_State* L) {
+static int _uscript_func_mark_find_bracket_pair(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t max_chars;
-    bline_t* ret_line = NULL;
+    bline_t *ret_line = NULL;
     bint_t ret_col = 0;
     bint_t ret_brkt = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     max_chars = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_find_bracket_pair(self, max_chars, &ret_line, &ret_col, &ret_brkt);
     lua_createtable(L, 0, 4);
@@ -1437,14 +1437,14 @@ static int _uscript_func_mark_find_bracket_pair(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_find_bracket_top(lua_State* L) {
+static int _uscript_func_mark_find_bracket_top(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t max_chars;
-    bline_t* ret_line = NULL;
+    bline_t *ret_line = NULL;
     bint_t ret_col = 0;
     bint_t ret_brkt = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     max_chars = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_find_bracket_top(self, max_chars, &ret_line, &ret_col, &ret_brkt);
     lua_createtable(L, 0, 4);
@@ -1464,16 +1464,16 @@ static int _uscript_func_mark_find_bracket_top(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_find_next_re(lua_State* L) {
+static int _uscript_func_mark_find_next_re(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* re;
+    mark_t *self;
+    char *re;
     bint_t re_len;
-    bline_t* ret_line = NULL;
+    bline_t *ret_line = NULL;
     bint_t ret_col = 0;
     bint_t ret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    re = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    re = (char *)luaL_checkstring(L, 2);
     re_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_find_next_re(self, re, re_len, &ret_line, &ret_col, &ret_num_chars);
     lua_createtable(L, 0, 4);
@@ -1493,16 +1493,16 @@ static int _uscript_func_mark_find_next_re(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_find_next_str(lua_State* L) {
+static int _uscript_func_mark_find_next_str(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* str;
+    mark_t *self;
+    char *str;
     bint_t str_len;
-    bline_t* ret_line = NULL;
+    bline_t *ret_line = NULL;
     bint_t ret_col = 0;
     bint_t ret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    str = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    str = (char *)luaL_checkstring(L, 2);
     str_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_find_next_str(self, str, str_len, &ret_line, &ret_col, &ret_num_chars);
     lua_createtable(L, 0, 4);
@@ -1522,16 +1522,16 @@ static int _uscript_func_mark_find_next_str(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_find_prev_re(lua_State* L) {
+static int _uscript_func_mark_find_prev_re(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* re;
+    mark_t *self;
+    char *re;
     bint_t re_len;
-    bline_t* ret_line = NULL;
+    bline_t *ret_line = NULL;
     bint_t ret_col = 0;
     bint_t ret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    re = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    re = (char *)luaL_checkstring(L, 2);
     re_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_find_prev_re(self, re, re_len, &ret_line, &ret_col, &ret_num_chars);
     lua_createtable(L, 0, 4);
@@ -1551,16 +1551,16 @@ static int _uscript_func_mark_find_prev_re(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_find_prev_str(lua_State* L) {
+static int _uscript_func_mark_find_prev_str(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* str;
+    mark_t *self;
+    char *str;
     bint_t str_len;
-    bline_t* ret_line = NULL;
+    bline_t *ret_line = NULL;
     bint_t ret_col = 0;
     bint_t ret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    str = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    str = (char *)luaL_checkstring(L, 2);
     str_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_find_prev_str(self, str, str_len, &ret_line, &ret_col, &ret_num_chars);
     lua_createtable(L, 0, 4);
@@ -1580,14 +1580,14 @@ static int _uscript_func_mark_find_prev_str(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_get_between_mark(lua_State* L) {
+static int _uscript_func_mark_get_between_mark(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    char* ret_str = NULL;
+    mark_t *self;
+    mark_t *other;
+    char *ret_str = NULL;
     bint_t ret_str_len = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_get_between_mark(self, other, &ret_str, &ret_str_len);
     lua_createtable(L, 0, 3);
     lua_pushstring(L, "rv");
@@ -1603,11 +1603,11 @@ static int _uscript_func_mark_get_between_mark(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_get_char_after(lua_State* L) {
+static int _uscript_func_mark_get_char_after(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     uint32_t ret_char = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_get_char_after(self, &ret_char);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -1620,11 +1620,11 @@ static int _uscript_func_mark_get_char_after(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_get_char_before(lua_State* L) {
+static int _uscript_func_mark_get_char_before(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     uint32_t ret_char = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_get_char_before(self, &ret_char);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -1637,11 +1637,11 @@ static int _uscript_func_mark_get_char_before(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_get_offset(lua_State* L) {
+static int _uscript_func_mark_get_offset(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t ret_offset = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_get_offset(self, &ret_offset);
     lua_createtable(L, 0, 2);
     lua_pushstring(L, "rv");
@@ -1654,13 +1654,13 @@ static int _uscript_func_mark_get_offset(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_insert_after(lua_State* L) {
+static int _uscript_func_mark_insert_after(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* data;
+    mark_t *self;
+    char *data;
     bint_t data_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    data = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    data = (char *)luaL_checkstring(L, 2);
     data_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_insert_after(self, data, data_len);
     lua_createtable(L, 0, 1);
@@ -1671,13 +1671,13 @@ static int _uscript_func_mark_insert_after(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_insert_before(lua_State* L) {
+static int _uscript_func_mark_insert_before(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* data;
+    mark_t *self;
+    char *data;
     bint_t data_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    data = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    data = (char *)luaL_checkstring(L, 2);
     data_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_insert_before(self, data, data_len);
     lua_createtable(L, 0, 1);
@@ -1688,11 +1688,11 @@ static int _uscript_func_mark_insert_before(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_after_col_minus_lefties(lua_State* L) {
+static int _uscript_func_mark_is_after_col_minus_lefties(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t col;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     col = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_is_after_col_minus_lefties(self, col);
     lua_createtable(L, 0, 1);
@@ -1703,10 +1703,10 @@ static int _uscript_func_mark_is_after_col_minus_lefties(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_at_bol(lua_State* L) {
+static int _uscript_func_mark_is_at_bol(lua_State *L) {
     int rv;
-    mark_t* self;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *self;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_is_at_bol(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1716,10 +1716,10 @@ static int _uscript_func_mark_is_at_bol(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_at_eol(lua_State* L) {
+static int _uscript_func_mark_is_at_eol(lua_State *L) {
     int rv;
-    mark_t* self;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *self;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_is_at_eol(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1729,11 +1729,11 @@ static int _uscript_func_mark_is_at_eol(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_at_word_bound(lua_State* L) {
+static int _uscript_func_mark_is_at_word_bound(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     int side;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     side = (int)luaL_checkinteger(L, 2);
     rv = mark_is_at_word_bound(self, side);
     lua_createtable(L, 0, 1);
@@ -1744,12 +1744,12 @@ static int _uscript_func_mark_is_at_word_bound(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_eq(lua_State* L) {
+static int _uscript_func_mark_is_eq(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    mark_t *self;
+    mark_t *other;
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_is_eq(self, other);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1759,12 +1759,12 @@ static int _uscript_func_mark_is_eq(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_gt(lua_State* L) {
+static int _uscript_func_mark_is_gt(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    mark_t *self;
+    mark_t *other;
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_is_gt(self, other);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1774,12 +1774,12 @@ static int _uscript_func_mark_is_gt(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_gte(lua_State* L) {
+static int _uscript_func_mark_is_gte(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    mark_t *self;
+    mark_t *other;
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_is_gte(self, other);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1789,12 +1789,12 @@ static int _uscript_func_mark_is_gte(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_lt(lua_State* L) {
+static int _uscript_func_mark_is_lt(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    mark_t *self;
+    mark_t *other;
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_is_lt(self, other);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1804,12 +1804,12 @@ static int _uscript_func_mark_is_lt(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_is_lte(lua_State* L) {
+static int _uscript_func_mark_is_lte(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    mark_t *self;
+    mark_t *other;
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_is_lte(self, other);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1819,12 +1819,12 @@ static int _uscript_func_mark_is_lte(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_join(lua_State* L) {
+static int _uscript_func_mark_join(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    mark_t *self;
+    mark_t *other;
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_join(self, other);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1834,10 +1834,10 @@ static int _uscript_func_mark_join(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_beginning(lua_State* L) {
+static int _uscript_func_mark_move_beginning(lua_State *L) {
     int rv;
-    mark_t* self;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *self;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_move_beginning(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1847,10 +1847,10 @@ static int _uscript_func_mark_move_beginning(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_bol(lua_State* L) {
+static int _uscript_func_mark_move_bol(lua_State *L) {
     int rv;
-    mark_t* self;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *self;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_move_bol(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1860,11 +1860,11 @@ static int _uscript_func_mark_move_bol(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_bracket_pair(lua_State* L) {
+static int _uscript_func_mark_move_bracket_pair(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t max_chars;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     max_chars = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_move_bracket_pair(self, max_chars);
     lua_createtable(L, 0, 1);
@@ -1875,14 +1875,14 @@ static int _uscript_func_mark_move_bracket_pair(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_bracket_pair_ex(lua_State* L) {
+static int _uscript_func_mark_move_bracket_pair_ex(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t max_chars;
-    bline_t* optret_line = NULL;
+    bline_t *optret_line = NULL;
     bint_t optret_col = 0;
     bint_t optret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     max_chars = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_move_bracket_pair_ex(self, max_chars, &optret_line, &optret_col, &optret_num_chars);
     lua_createtable(L, 0, 4);
@@ -1902,11 +1902,11 @@ static int _uscript_func_mark_move_bracket_pair_ex(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_bracket_top(lua_State* L) {
+static int _uscript_func_mark_move_bracket_top(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t max_chars;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     max_chars = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_move_bracket_top(self, max_chars);
     lua_createtable(L, 0, 1);
@@ -1917,14 +1917,14 @@ static int _uscript_func_mark_move_bracket_top(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_bracket_top_ex(lua_State* L) {
+static int _uscript_func_mark_move_bracket_top_ex(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t max_chars;
-    bline_t* optret_line = NULL;
+    bline_t *optret_line = NULL;
     bint_t optret_col = 0;
     bint_t optret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     max_chars = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_move_bracket_top_ex(self, max_chars, &optret_line, &optret_col, &optret_num_chars);
     lua_createtable(L, 0, 4);
@@ -1944,11 +1944,11 @@ static int _uscript_func_mark_move_bracket_top_ex(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_by(lua_State* L) {
+static int _uscript_func_mark_move_by(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t char_delta;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     char_delta = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_move_by(self, char_delta);
     lua_createtable(L, 0, 1);
@@ -1959,11 +1959,11 @@ static int _uscript_func_mark_move_by(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_col(lua_State* L) {
+static int _uscript_func_mark_move_col(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t col;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     col = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_move_col(self, col);
     lua_createtable(L, 0, 1);
@@ -1974,10 +1974,10 @@ static int _uscript_func_mark_move_col(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_end(lua_State* L) {
+static int _uscript_func_mark_move_end(lua_State *L) {
     int rv;
-    mark_t* self;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *self;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_move_end(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -1987,10 +1987,10 @@ static int _uscript_func_mark_move_end(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_eol(lua_State* L) {
+static int _uscript_func_mark_move_eol(lua_State *L) {
     int rv;
-    mark_t* self;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    mark_t *self;
+    self = (mark_t *)luaL_checkpointer(L, 1);
     rv = mark_move_eol(self);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -2000,13 +2000,13 @@ static int _uscript_func_mark_move_eol(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_next_re(lua_State* L) {
+static int _uscript_func_mark_move_next_re(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* re;
+    mark_t *self;
+    char *re;
     bint_t re_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    re = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    re = (char *)luaL_checkstring(L, 2);
     re_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_next_re(self, re, re_len);
     lua_createtable(L, 0, 1);
@@ -2017,16 +2017,16 @@ static int _uscript_func_mark_move_next_re(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_next_re_ex(lua_State* L) {
+static int _uscript_func_mark_move_next_re_ex(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* re;
+    mark_t *self;
+    char *re;
     bint_t re_len;
-    bline_t* optret_line = NULL;
+    bline_t *optret_line = NULL;
     bint_t optret_col = 0;
     bint_t optret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    re = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    re = (char *)luaL_checkstring(L, 2);
     re_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_next_re_ex(self, re, re_len, &optret_line, &optret_col, &optret_num_chars);
     lua_createtable(L, 0, 4);
@@ -2046,13 +2046,13 @@ static int _uscript_func_mark_move_next_re_ex(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_next_re_nudge(lua_State* L) {
+static int _uscript_func_mark_move_next_re_nudge(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* re;
+    mark_t *self;
+    char *re;
     bint_t re_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    re = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    re = (char *)luaL_checkstring(L, 2);
     re_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_next_re_nudge(self, re, re_len);
     lua_createtable(L, 0, 1);
@@ -2063,13 +2063,13 @@ static int _uscript_func_mark_move_next_re_nudge(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_next_str(lua_State* L) {
+static int _uscript_func_mark_move_next_str(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* str;
+    mark_t *self;
+    char *str;
     bint_t str_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    str = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    str = (char *)luaL_checkstring(L, 2);
     str_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_next_str(self, str, str_len);
     lua_createtable(L, 0, 1);
@@ -2080,16 +2080,16 @@ static int _uscript_func_mark_move_next_str(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_next_str_ex(lua_State* L) {
+static int _uscript_func_mark_move_next_str_ex(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* str;
+    mark_t *self;
+    char *str;
     bint_t str_len;
-    bline_t* optret_line = NULL;
+    bline_t *optret_line = NULL;
     bint_t optret_col = 0;
     bint_t optret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    str = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    str = (char *)luaL_checkstring(L, 2);
     str_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_next_str_ex(self, str, str_len, &optret_line, &optret_col, &optret_num_chars);
     lua_createtable(L, 0, 4);
@@ -2109,13 +2109,13 @@ static int _uscript_func_mark_move_next_str_ex(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_next_str_nudge(lua_State* L) {
+static int _uscript_func_mark_move_next_str_nudge(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* str;
+    mark_t *self;
+    char *str;
     bint_t str_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    str = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    str = (char *)luaL_checkstring(L, 2);
     str_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_next_str_nudge(self, str, str_len);
     lua_createtable(L, 0, 1);
@@ -2126,11 +2126,11 @@ static int _uscript_func_mark_move_next_str_nudge(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_offset(lua_State* L) {
+static int _uscript_func_mark_move_offset(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t offset;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     offset = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_move_offset(self, offset);
     lua_createtable(L, 0, 1);
@@ -2141,13 +2141,13 @@ static int _uscript_func_mark_move_offset(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_prev_re(lua_State* L) {
+static int _uscript_func_mark_move_prev_re(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* re;
+    mark_t *self;
+    char *re;
     bint_t re_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    re = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    re = (char *)luaL_checkstring(L, 2);
     re_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_prev_re(self, re, re_len);
     lua_createtable(L, 0, 1);
@@ -2158,16 +2158,16 @@ static int _uscript_func_mark_move_prev_re(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_prev_re_ex(lua_State* L) {
+static int _uscript_func_mark_move_prev_re_ex(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* re;
+    mark_t *self;
+    char *re;
     bint_t re_len;
-    bline_t* optret_line = NULL;
+    bline_t *optret_line = NULL;
     bint_t optret_col = 0;
     bint_t optret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    re = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    re = (char *)luaL_checkstring(L, 2);
     re_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_prev_re_ex(self, re, re_len, &optret_line, &optret_col, &optret_num_chars);
     lua_createtable(L, 0, 4);
@@ -2187,13 +2187,13 @@ static int _uscript_func_mark_move_prev_re_ex(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_prev_str(lua_State* L) {
+static int _uscript_func_mark_move_prev_str(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* str;
+    mark_t *self;
+    char *str;
     bint_t str_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    str = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    str = (char *)luaL_checkstring(L, 2);
     str_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_prev_str(self, str, str_len);
     lua_createtable(L, 0, 1);
@@ -2204,16 +2204,16 @@ static int _uscript_func_mark_move_prev_str(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_prev_str_ex(lua_State* L) {
+static int _uscript_func_mark_move_prev_str_ex(lua_State *L) {
     int rv;
-    mark_t* self;
-    char* str;
+    mark_t *self;
+    char *str;
     bint_t str_len;
-    bline_t* optret_line = NULL;
+    bline_t *optret_line = NULL;
     bint_t optret_col = 0;
     bint_t optret_num_chars = 0;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    str = (char*)luaL_checkstring(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    str = (char *)luaL_checkstring(L, 2);
     str_len = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_prev_str_ex(self, str, str_len, &optret_line, &optret_col, &optret_num_chars);
     lua_createtable(L, 0, 4);
@@ -2233,12 +2233,12 @@ static int _uscript_func_mark_move_prev_str_ex(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_to(lua_State* L) {
+static int _uscript_func_mark_move_to(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t line_index;
     bint_t col;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     line_index = (bint_t)luaL_checkinteger(L, 2);
     col = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_to(self, line_index, col);
@@ -2250,13 +2250,13 @@ static int _uscript_func_mark_move_to(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_to_w_bline(lua_State* L) {
+static int _uscript_func_mark_move_to_w_bline(lua_State *L) {
     int rv;
-    mark_t* self;
-    bline_t* bline;
+    mark_t *self;
+    bline_t *bline;
     bint_t col;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    bline = (bline_t*)luaL_checkpointer(L, 2);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    bline = (bline_t *)luaL_checkpointer(L, 2);
     col = (bint_t)luaL_checkinteger(L, 3);
     rv = mark_move_to_w_bline(self, bline, col);
     lua_createtable(L, 0, 1);
@@ -2267,11 +2267,11 @@ static int _uscript_func_mark_move_to_w_bline(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_move_vert(lua_State* L) {
+static int _uscript_func_mark_move_vert(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t line_delta;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     line_delta = (bint_t)luaL_checkinteger(L, 2);
     rv = mark_move_vert(self, line_delta);
     lua_createtable(L, 0, 1);
@@ -2282,15 +2282,15 @@ static int _uscript_func_mark_move_vert(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_replace(lua_State* L) {
+static int _uscript_func_mark_replace(lua_State *L) {
     int rv;
-    mark_t* self;
+    mark_t *self;
     bint_t num_chars;
-    char* data;
+    char *data;
     bint_t data_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
+    self = (mark_t *)luaL_checkpointer(L, 1);
     num_chars = (bint_t)luaL_checkinteger(L, 2);
-    data = (char*)luaL_checkstring(L, 3);
+    data = (char *)luaL_checkstring(L, 3);
     data_len = (bint_t)luaL_checkinteger(L, 4);
     rv = mark_replace(self, num_chars, data, data_len);
     lua_createtable(L, 0, 1);
@@ -2301,15 +2301,15 @@ static int _uscript_func_mark_replace(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_replace_between_mark(lua_State* L) {
+static int _uscript_func_mark_replace_between_mark(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    char* data;
+    mark_t *self;
+    mark_t *other;
+    char *data;
     bint_t data_len;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
-    data = (char*)luaL_checkstring(L, 3);
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
+    data = (char *)luaL_checkstring(L, 3);
     data_len = (bint_t)luaL_checkinteger(L, 4);
     rv = mark_replace_between_mark(self, other, data, data_len);
     lua_createtable(L, 0, 1);
@@ -2320,12 +2320,12 @@ static int _uscript_func_mark_replace_between_mark(lua_State* L) {
     return 1;
 }
 
-static int _uscript_func_mark_swap_with_mark(lua_State* L) {
+static int _uscript_func_mark_swap_with_mark(lua_State *L) {
     int rv;
-    mark_t* self;
-    mark_t* other;
-    self = (mark_t*)luaL_checkpointer(L, 1);
-    other = (mark_t*)luaL_checkpointer(L, 2);
+    mark_t *self;
+    mark_t *other;
+    self = (mark_t *)luaL_checkpointer(L, 1);
+    other = (mark_t *)luaL_checkpointer(L, 2);
     rv = mark_swap_with_mark(self, other);
     lua_createtable(L, 0, 1);
     lua_pushstring(L, "rv");
@@ -2335,10 +2335,10 @@ static int _uscript_func_mark_swap_with_mark(lua_State* L) {
     return 1;
 }
 
-// static int _uscript_func_util_escape_shell_arg(lua_State* L) {
+// static int _uscript_func_util_escape_shell_arg(lua_State *L) {
 // }
 
-// static int _uscript_func_util_shell_exec(lua_State* L) {
+// static int _uscript_func_util_shell_exec(lua_State *L) {
 // }
 
 static const struct luaL_Reg mle_lib[] = {
diff --git a/uscript.inc.php b/uscript.inc.php
index 35a6566..6f533db 100644
--- a/uscript.inc.php
+++ b/uscript.inc.php
@@ -16,9 +16,9 @@ class CodeGen {
     }
 
     function getProtoMap() {
-        $mlbuf_h = __DIR__ . '/mlbuf/mlbuf.h';
+        $mlbuf_h = __DIR__ . '/mlbuf.h';
         $mle_h = __DIR__ . '/mle.h';
-        $grep_re = '^\S+ (editor|bview|buffer|cursor|mark)_.*\);$';
+        $grep_re = '^\S+ \*?(editor|bview|buffer|cursor|mark)_.*\);$';
         $grep_cmd = sprintf(
             'grep -hP %s %s %s',
             escapeshellarg($grep_re),
@@ -61,7 +61,7 @@ class CodeGen {
             }
             $params = preg_split('@\s*,\s*@', $m['params']);
             $params = array_map(function($param) {
-                return sprintf("void* %s", $param);
+                return sprintf("void *%s", $param);
             }, $params);
             $params_str = implode(', ', $params);
             $proto_str = sprintf("void %s(%s);", $m['name'], $params_str);
@@ -93,17 +93,17 @@ class CodeGen {
     function printFunc($proto) {
         $is_hardcoded = $proto->is_hardcoded;
         printf(
-            "%sstatic int %s(lua_State* L) {\n",
+            "%sstatic int %s(lua_State *L) {\n",
             $is_hardcoded ? '// ' : '',
             $proto->c_func
         );
         if (!$is_hardcoded) {
-            printf("    %s rv;\n", $proto->ret_type);
+            printf("    %s%srv;\n", $proto->ret_type, $proto->ret_is_pointer ? '' : ' ');
             foreach ($proto->params as $param) {
                 if ($param->is_ret) {
-                    printf("    %s %s = %s;\n", $param->ret_type, $param->name, $param->zero_val);
+                    printf("    %s%s%s = %s;\n", $param->ret_type, $param->ret_is_pointer ? '' : ' ', $param->name, $param->ret_zero_val);
                 } else {
-                    printf("    %s %s;\n", $param->type, $param->name);
+                    printf("    %s%s%s;\n", $param->type, $param->is_pointer ? '' : ' ', $param->name);
                 }
             }
             $param_num = 1;
@@ -131,7 +131,7 @@ class CodeGen {
         printf('    lua_pushstring(L, "%s");' . "\n", $name);
         if (strpos($type, 'int') !== false || $type === 'char') {
             printf("    lua_pushinteger(L, (lua_Integer)%s);\n", $name);
-        } else if ($type === 'char*' || $type === 'const char*') {
+        } else if ($type === 'char *' || $type === 'const char *') {
             printf("    lua_pushstring(L, (const char*)%s);\n", $name);
         } else if (preg_match($this->valid_pointer_re, $type)) {
             printf("    lua_pushpointer(L, (void*)%s);\n", $name);
@@ -156,7 +156,7 @@ class CodeGen {
             } else {
                 printf("    %s = (%s)luaL_checknumber(L, %d);\n", $name, $type, $slot);
             }
-        } else if ($type === 'char*' || $type === 'const char*') {
+        } else if ($type === 'char *' || $type === 'const char *') {
             if ($param->is_opt) {
                 printf("    %s = (%s)luaL_optstring(L, %d, NULL);\n", $name, $type, $slot);
             } else {
@@ -176,14 +176,15 @@ class CodeGen {
 
 class Proto {
     function __construct($proto_str) {
-        $parse_re = '@^(?<ret_type>\S+) (?<name>[^\(]+)\((?<params>.*?)\);$@';
+        $parse_re = '@^(?<ret_type>\S+) (?<ret_type_ptr>\*?)(?<name>[^\(]+)\((?<params>.*?)\);$@';
         $match = [];
         if (!preg_match($parse_re, $proto_str, $match)) {
             throw new RuntimeException("Could not parse proto: $proto_str");
         }
         $this->name = $match['name'];
         $this->c_func = '_uscript_func_' . $this->name;
-        $this->ret_type = $match['ret_type'];
+        $this->ret_type = trim($match['ret_type'] . ' ' . $match['ret_type_ptr']);
+        $this->ret_is_pointer = substr($this->ret_type, -1) === '*';
         $this->params = [];
         $this->ret_count = 1;
         $this->has_funcs = false;
@@ -208,24 +209,32 @@ class Proto {
 class Param {
     function __construct($param_str) {
         $parts = preg_split('@\s+@', $param_str);
-        $this->name = current(array_slice($parts, -1));
-        $this->type = implode(' ', array_slice($parts, 0, -1));
+        $name_w_ptr = current(array_slice($parts, -1));
+        $type_wout_ptr = implode(' ', array_slice($parts, 0, -1));
+        $ptr_i = 0;
+        while (substr($name_w_ptr, $ptr_i, 1) === '*') $ptr_i += 1;
+        $ptr = substr($name_w_ptr, 0, $ptr_i);
+        $this->type = trim($type_wout_ptr . ' ' . $ptr);
+        $this->name = substr($name_w_ptr, $ptr_i);
         $this->is_func = preg_match('@^fn_@', $this->name);
         $this->is_opt = preg_match('@^opt(ret)?_@', $this->name);
         $this->is_ret = preg_match('@^(opt)?ret_@', $this->name);
         $this->is_optret = preg_match('@^optret_@', $this->name);
         $this->is_pointer = strpos($this->type, '*') !== false;
-        $this->is_string = $this->type === 'char*';
+        $this->is_string = $this->type === 'char *';
         if ($this->is_ret) {
-            if (substr($this->type, -1) !== '*') {
+            if (!$this->is_pointer) {
                 throw new RuntimeException("Expected ret param ptr: $param_str");
             }
-            $this->ret_type = substr($this->type, 0, -1);
+            $this->ret_type = trim(substr($this->type, 0, -1));
+            $this->ret_is_pointer = strpos($this->ret_type, '*') !== false;
+            $this->ret_zero_val = $this->ret_is_pointer ? 'NULL' : '0';
         } else {
             $this->ret_type = null;
+            $this->ret_is_pointer = false;
+            $this->ret_zero_val = '0';
         }
         $this->call_name = ($this->is_ret ? '&' : '') . $this->name;
-        $this->zero_val = strpos($this->ret_type, '*') !== false ? 'NULL' : '0';
     }
 }
 
diff --git a/util.c b/util.c
index a63f888..999c2b2 100644
--- a/util.c
+++ b/util.c
@@ -10,7 +10,7 @@
 
 // Run a shell command, optionally feeding stdin, collecting stdout
 // Specify timeout_s=-1 for no timeout
-int util_shell_exec(editor_t* editor, char* cmd, long timeout_s, char* input, size_t input_len, int setsid, char* opt_shell, char** optret_output, size_t* optret_output_len) {
+int util_shell_exec(editor_t *editor, char *cmd, long timeout_s, char *input, size_t input_len, int setsid, char *opt_shell, char **optret_output, size_t *optret_output_len) {
     // TODO clean this crap up
     int rv;
     int do_read;
@@ -21,7 +21,7 @@ int util_shell_exec(editor_t* editor, char* cmd, long timeout_s, char* input, si
     ssize_t nbytes;
     fd_set readfds;
     struct timeval timeout;
-    struct timeval* timeoutptr;
+    struct timeval *timeoutptr;
     pid_t pid;
     str_t readbuf = {0};
 
@@ -122,7 +122,7 @@ int util_shell_exec(editor_t* editor, char* cmd, long timeout_s, char* input, si
 }
 
 // Like popen, but more control over pipes. Returns 1 on success, 0 on failure.
-int util_popen2(char* cmd, int do_setsid, char* opt_shell, int* optret_fdread, int* optret_fdwrite, pid_t* optret_pid) {
+int util_popen2(char *cmd, int do_setsid, char *opt_shell, int *optret_fdread, int *optret_fdwrite, pid_t *optret_pid) {
     pid_t pid;
     int do_read;
     int do_write;
@@ -175,7 +175,7 @@ int util_popen2(char* cmd, int do_setsid, char* opt_shell, int* optret_fdread, i
 }
 
 // Return paired bracket if ch is a bracket, else return 0
-int util_get_bracket_pair(uint32_t ch, int* optret_is_closing) {
+int util_get_bracket_pair(uint32_t ch, int *optret_is_closing) {
     switch (ch) {
         case '[': if (optret_is_closing) *optret_is_closing = 0; return ']';
         case '(': if (optret_is_closing) *optret_is_closing = 0; return ')';
@@ -189,7 +189,7 @@ int util_get_bracket_pair(uint32_t ch, int* optret_is_closing) {
 }
 
 // Return 1 if path is file
-int util_is_file(char* path, char* opt_mode, FILE** optret_file) {
+int util_is_file(char *path, char *opt_mode, FILE **optret_file) {
     struct stat sb;
     if (stat(path, &sb) != 0 || !S_ISREG(sb.st_mode)) return 0;
     if (opt_mode && optret_file) {
@@ -200,16 +200,16 @@ int util_is_file(char* path, char* opt_mode, FILE** optret_file) {
 }
 
 // Return 1 if path is dir
-int util_is_dir(char* path) {
+int util_is_dir(char *path) {
     struct stat sb;
     if (stat(path, &sb) != 0 || !S_ISDIR(sb.st_mode)) return 0;
     return 1;
 }
 
 // Return 1 if re matches subject
-int util_pcre_match(char* re, char* subject, int subject_len, char** optret_capture, int* optret_capture_len) {
+int util_pcre_match(char *re, char *subject, int subject_len, char **optret_capture, int *optret_capture_len) {
     int rc;
-    pcre* cre;
+    pcre *cre;
     const char *error;
     int erroffset;
     int ovector[3];
@@ -232,9 +232,9 @@ int util_pcre_match(char* re, char* subject, int subject_len, char** optret_capt
 // Perform a regex replace with back-references. Return number of replacements
 // made. If regex is invalid, `ret_result` is set to NULL, `ret_result_len` is
 // set to 0 and 0 is returned.
-int util_pcre_replace(char* re, char* subj, char* repl, char** ret_result, int* ret_result_len) {
+int util_pcre_replace(char *re, char *subj, char *repl, char **ret_result, int *ret_result_len) {
     int rc;
-    pcre* cre;
+    pcre *cre;
     const char *error;
     int erroffset;
     int subj_offset;
@@ -300,7 +300,7 @@ int util_pcre_replace(char* re, char* subj, char* repl, char** ret_result, int*
 }
 
 // Return 1 if a > b, else return 0.
-int util_timeval_is_gt(struct timeval* a, struct timeval* b) {
+int util_timeval_is_gt(struct timeval *a, struct timeval *b) {
     if (a->tv_sec > b->tv_sec) {
         return 1;
     } else if (a->tv_sec == b->tv_sec) {
@@ -311,7 +311,7 @@ int util_timeval_is_gt(struct timeval* a, struct timeval* b) {
 
 // Ported from php_escape_shell_arg
 // https://github.com/php/php-src/blob/master/ext/standard/exec.c
-char* util_escape_shell_arg(char* str, int l) {
+char *util_escape_shell_arg(char *str, int l) {
     int x, y = 0;
     char *cmd;
 
@@ -377,7 +377,7 @@ int tb_printf(bview_rect_t rect, int x, int y, uint16_t fg, uint16_t bg, const c
 // reset that attribute.
 int tb_printf_attr(bview_rect_t rect, int x, int y, const char *fmt, ...) {
     char bufo[4096];
-    char* buf;
+    char *buf;
     int fg;
     int bg;
     int tfg;
@@ -428,8 +428,8 @@ int tb_printf_attr(bview_rect_t rect, int x, int y, const char *fmt, ...) {
 
 
 // Zero-fill realloc
-void* recalloc(void* ptr, size_t orig_num, size_t new_num, size_t el_size) {
-    void* newptr;
+void *recalloc(void *ptr, size_t orig_num, size_t new_num, size_t el_size) {
+    void *newptr;
     newptr = realloc(ptr, new_num * el_size);
     if (!newptr) return NULL;
     if (new_num > orig_num) {
@@ -439,51 +439,51 @@ void* recalloc(void* ptr, size_t orig_num, size_t new_num, size_t el_size) {
 }
 
 // Append from data up until data_stop to str
-void str_append_stop(str_t* str, char* data, char* data_stop) {
+void str_append_stop(str_t *str, char *data, char *data_stop) {
     size_t data_len;
     data_len = data_stop >= data ? data_stop - data : 0;
     str_append_len(str, data, data_len);
 }
 
 // Append data to str
-void str_append(str_t* str, char* data) {
+void str_append(str_t *str, char *data) {
     str_append_len(str, data, strlen(data));
 }
 
 // Append data_len bytes of data to str
-void str_append_len(str_t* str, char* data, size_t data_len) {
+void str_append_len(str_t *str, char *data, size_t data_len) {
     str_put_len(str, data, data_len, 0);
 }
 
 // Append char to str
-void str_append_char(str_t* str, char c) {
+void str_append_char(str_t *str, char c) {
     str_put_len(str, &c, 1, 0);
 }
 
 // Prepend from data up until data_stop to str
-void str_prepend_stop(str_t* str, char* data, char* data_stop) {
+void str_prepend_stop(str_t *str, char *data, char *data_stop) {
     size_t data_len;
     data_len = data_stop >= data ? data_stop - data : 0;
     str_prepend_len(str, data, data_len);
 }
 
 // Prepend data to str
-void str_prepend(str_t* str, char* data) {
+void str_prepend(str_t *str, char *data) {
     str_prepend_len(str, data, strlen(data));
 }
 
 // Prepend data_len bytes of data to str
-void str_prepend_len(str_t* str, char* data, size_t data_len) {
+void str_prepend_len(str_t *str, char *data, size_t data_len) {
     str_put_len(str, data, data_len, 1);
 }
 
 // Set str to data
-void str_set(str_t* str, char* data) {
+void str_set(str_t *str, char *data) {
     str_set_len(str, data, strlen(data));
 }
 
 // Set str to data for data_len bytes
-void str_set_len(str_t* str, char* data, size_t data_len) {
+void str_set_len(str_t *str, char *data, size_t data_len) {
     str_ensure_cap(str, data_len+1);
     memcpy(str->data, data, data_len);
     str->len = data_len;
@@ -491,7 +491,7 @@ void str_set_len(str_t* str, char* data, size_t data_len) {
 }
 
 // Append/prepend data_len bytes of data to str
-void str_put_len(str_t* str, char* data, size_t data_len, int is_prepend) {
+void str_put_len(str_t *str, char *data, size_t data_len, int is_prepend) {
     size_t req_cap;
     req_cap = str->len + data_len + 1;
     if (req_cap > str->cap) {
@@ -508,7 +508,7 @@ void str_put_len(str_t* str, char* data, size_t data_len, int is_prepend) {
 }
 
 // Ensure space in str
-void str_ensure_cap(str_t* str, size_t cap) {
+void str_ensure_cap(str_t *str, size_t cap) {
     if (cap > str->cap) {
         if (str->inc >= 0) {
             // If inc is positive, grow linearly
@@ -523,12 +523,12 @@ void str_ensure_cap(str_t* str, size_t cap) {
 }
 
 // Clear str
-void str_clear(str_t* str) {
+void str_clear(str_t *str) {
     str->len = 0;
 }
 
 // Free str
-void str_free(str_t* str) {
+void str_free(str_t *str) {
     if (str->data) free(str->data);
     memset(str, 0, sizeof(str_t));
 }
@@ -543,15 +543,15 @@ void str_free(str_t* str) {
 //   pcre_ovector  ovector used with pcre_exec
 //   pcre_ovecsize size of pcre_ovector
 //
-void str_append_replace_with_backrefs(str_t* str, char* subj, char* repl, int pcre_rc, int* pcre_ovector, int pcre_ovecsize) {
-    char* repl_stop;
-    char* repl_cur;
-    char* repl_z;
-    char* repl_backref;
+void str_append_replace_with_backrefs(str_t *str, char *subj, char *repl, int pcre_rc, int *pcre_ovector, int pcre_ovecsize) {
+    char *repl_stop;
+    char *repl_cur;
+    char *repl_z;
+    char *repl_backref;
     int repl_delta;
     int ibackref;
-    char* term;
-    char* term_stop;
+    char *term;
+    char *term_stop;
     char hex[3];
     char byte;
 
